{"version":3,"file":"lib-jitsi-meet.min.js","mappings":"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","sources":["webpack://JitsiMeetJS/webpack/universalModuleDefinition","webpack://JitsiMeetJS/./JitsiConferenceErrors.ts","webpack://JitsiMeetJS/./JitsiConferenceEvents.ts","webpack://JitsiMeetJS/./modules/statistics/constants.js","webpack://JitsiMeetJS/./JitsiTrackErrors.ts","webpack://JitsiMeetJS/./JitsiTrackError.js","webpack://JitsiMeetJS/./JitsiTrackEvents.ts","webpack://JitsiMeetJS/./service/statistics/AnalyticsEvents.ts","webpack://JitsiMeetJS/./service/statistics/Events.ts","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/browsers.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/BrowserDetection.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/jitsi-local-storage/index.js","webpack://JitsiMeetJS/./modules/browser/BrowserCapabilities.js","webpack://JitsiMeetJS/./modules/browser/index.js","webpack://JitsiMeetJS/./modules/statistics/AnalyticsAdapter.js","webpack://JitsiMeetJS/./modules/statistics/CallStats.js","webpack://JitsiMeetJS/./modules/statistics/LocalStatsCollector.js","webpack://JitsiMeetJS/./modules/util/MathUtil.js","webpack://JitsiMeetJS/./modules/statistics/PerformanceObserverStats.js","webpack://JitsiMeetJS/./service/RTC/MediaType.ts","webpack://JitsiMeetJS/./modules/flags/FeatureFlags.js","webpack://JitsiMeetJS/./modules/statistics/RTPStatsCollector.js","webpack://JitsiMeetJS/./modules/statistics/statistics.js","webpack://JitsiMeetJS/./JitsiConferenceEventManager.js","webpack://JitsiMeetJS/./modules/connectivity/ParticipantConnectionStatus.js","webpack://JitsiMeetJS/./JitsiParticipant.js","webpack://JitsiMeetJS/./JitsiConnectionEvents.ts","webpack://JitsiMeetJS/./JitsiConnectionErrors.ts","webpack://JitsiMeetJS/./modules/util/Deferred.js","webpack://JitsiMeetJS/./modules/util/Listenable.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEContext.js","webpack://JitsiMeetJS/./modules/e2ee/KeyHandler.js","webpack://JitsiMeetJS/./modules/e2ee/ExternallyManagedKeyHandler.js","webpack://JitsiMeetJS/./node_modules/uuid/wrapper.mjs","webpack://JitsiMeetJS/./modules/e2ee/OlmAdapter.js","webpack://JitsiMeetJS/./modules/e2ee/ManagedKeyHandler.js","webpack://JitsiMeetJS/./modules/e2ee/crypto-utils.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEncryption.js","webpack://JitsiMeetJS/./modules/xmpp/Caps.js","webpack://JitsiMeetJS/./modules/connectivity/NetworkInfo.js","webpack://JitsiMeetJS/./modules/xmpp/ResumeTask.js","webpack://JitsiMeetJS/./modules/util/Retry.js","webpack://JitsiMeetJS/./modules/xmpp/StropheLastSuccess.js","webpack://JitsiMeetJS/./modules/xmpp/ConnectionPlugin.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.ping.js","webpack://JitsiMeetJS/./modules/xmpp/XmppConnection.js","webpack://JitsiMeetJS/./JitsiTranscriptionStatus.ts","webpack://JitsiMeetJS/./modules/xmpp/AVModeration.js","webpack://JitsiMeetJS/./modules/xmpp/BreakoutRooms.js","webpack://JitsiMeetJS/./modules/xmpp/Lobby.js","webpack://JitsiMeetJS/./modules/xmpp/RoomMetadata.ts","webpack://JitsiMeetJS/./modules/settings/Settings.js","webpack://JitsiMeetJS/./modules/xmpp/moderator.js","webpack://JitsiMeetJS/./modules/xmpp/ChatRoom.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.emuc.js","webpack://JitsiMeetJS/./modules/xmpp/JingleHelperFunctions.js","webpack://JitsiMeetJS/./service/RTC/MediaDirection.ts","webpack://JitsiMeetJS/./modules/RTC/ScreenObtainer.js","webpack://JitsiMeetJS/./modules/sdp/SDPUtil.js","webpack://JitsiMeetJS/./modules/sdp/SDP.js","webpack://JitsiMeetJS/./modules/sdp/SDPDiffer.js","webpack://JitsiMeetJS/./node_modules/async/dist/async.mjs","webpack://JitsiMeetJS/./modules/util/AsyncQueue.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionState.ts","webpack://JitsiMeetJS/./modules/xmpp/JingleSession.js","webpack://JitsiMeetJS/./modules/xmpp/MediaSessionEvents.ts","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionPC.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.jingle.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.logger.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.rayo.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.util.js","webpack://JitsiMeetJS/./modules/xmpp/xmpp.js","webpack://JitsiMeetJS/./authenticateAndUpgradeRole.js","webpack://JitsiMeetJS/./modules/RTC/CodecSelection.js","webpack://JitsiMeetJS/./modules/RTC/BridgeChannel.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/utils.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_factory.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://JitsiMeetJS/./modules/RTC/RTCUtils.js","webpack://JitsiMeetJS/./modules/RTC/JitsiTrack.js","webpack://JitsiMeetJS/./modules/RTC/JitsiLocalTrack.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/transform.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/interop.js","webpack://JitsiMeetJS/./service/RTC/SignalingEvents.ts","webpack://JitsiMeetJS/./service/RTC/SignalingLayer.js","webpack://JitsiMeetJS/./modules/sdp/SdpTransformUtil.js","webpack://JitsiMeetJS/./modules/sdp/LocalSdpMunger.js","webpack://JitsiMeetJS/./modules/sdp/RtxModifier.js","webpack://JitsiMeetJS/./modules/sdp/SdpConsistency.js","webpack://JitsiMeetJS/./modules/sdp/SdpSimulcast.ts","webpack://JitsiMeetJS/./modules/connectivity/TrackStreamingStatus.ts","webpack://JitsiMeetJS/./modules/RTC/JitsiRemoteTrack.js","webpack://JitsiMeetJS/./modules/RTC/TPCUtils.js","webpack://JitsiMeetJS/./modules/RTC/TraceablePeerConnection.js","webpack://JitsiMeetJS/./modules/RTC/RTC.js","webpack://JitsiMeetJS/./service/connectivity/ConnectionQualityEvents.ts","webpack://JitsiMeetJS/./modules/connectivity/ConnectionQuality.js","webpack://JitsiMeetJS/./modules/connectivity/IceFailedHandling.js","webpack://JitsiMeetJS/./modules/detection/DetectionEvents.ts","webpack://JitsiMeetJS/./modules/detection/NoAudioSignalDetection.js","webpack://JitsiMeetJS/./modules/detection/P2PDominantSpeakerDetection.js","webpack://JitsiMeetJS/./modules/webaudio/WebAudioUtils.js","webpack://JitsiMeetJS/./modules/detection/TrackVADEmitter.js","webpack://JitsiMeetJS/./modules/detection/VADAudioAnalyser.js","webpack://JitsiMeetJS/./modules/detection/VADNoiseDetection.js","webpack://JitsiMeetJS/./modules/detection/VADTalkMutedDetection.js","webpack://JitsiMeetJS/./service/e2eping/E2ePingEvents.ts","webpack://JitsiMeetJS/./modules/e2eping/e2eping.js","webpack://JitsiMeetJS/./modules/event/Jvb121EventGenerator.js","webpack://JitsiMeetJS/./modules/qualitycontrol/ReceiveVideoController.js","webpack://JitsiMeetJS/./modules/qualitycontrol/SendVideoController.js","webpack://JitsiMeetJS/./modules/recording/recordingXMLUtils.js","webpack://JitsiMeetJS/./modules/recording/JibriSession.js","webpack://JitsiMeetJS/./modules/recording/RecordingManager.js","webpack://JitsiMeetJS/./modules/statistics/AudioOutputProblemDetector.js","webpack://JitsiMeetJS/./modules/statistics/AvgRTPStatsReporter.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStatsCollector.js","webpack://JitsiMeetJS/./modules/transcription/recordingResult.js","webpack://JitsiMeetJS/./modules/transcription/trackRecorder.js","webpack://JitsiMeetJS/./modules/transcription/audioRecorder.js","webpack://JitsiMeetJS/./modules/transcription/word.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/transcriber.js","webpack://JitsiMeetJS/./modules/version/ComponentsVersions.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGWConstants.ts","webpack://JitsiMeetJS/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGW.js","webpack://JitsiMeetJS/./modules/xmpp/SignalingLayerImpl.js","webpack://JitsiMeetJS/./JitsiConference.js","webpack://JitsiMeetJS/./JitsiConnection.js","webpack://JitsiMeetJS/./JitsiMediaDevicesEvents.ts","webpack://JitsiMeetJS/./JitsiMediaDevices.js","webpack://JitsiMeetJS/./modules/detection/ActiveDeviceDetector.js","webpack://JitsiMeetJS/./modules/proxyconnection/CustomSignalingLayer.js","webpack://JitsiMeetJS/./modules/proxyconnection/constants.ts","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionPC.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionService.js","webpack://JitsiMeetJS/./modules/statistics/PrecallTest.js","webpack://JitsiMeetJS/./modules/webaudio/AudioMixer.js","webpack://JitsiMeetJS/./JitsiMeetJS.ts","webpack://JitsiMeetJS/./modules/recording/recordingConstants.js","webpack://JitsiMeetJS/./index.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStats.js","webpack://JitsiMeetJS/./modules/util/AuthUtil.js","webpack://JitsiMeetJS/./modules/util/EventEmitterForwarder.js","webpack://JitsiMeetJS/./modules/util/GlobalOnErrorHandler.js","webpack://JitsiMeetJS/./modules/util/RandomUtil.js","webpack://JitsiMeetJS/./modules/util/ScriptUtil.js","webpack://JitsiMeetJS/./modules/util/StringUtils.js","webpack://JitsiMeetJS/./modules/util/UsernameGenerator.js","webpack://JitsiMeetJS/./node_modules/@jitsi/logger/lib/LogCollector.js","webpack://JitsiMeetJS/./node_modules/@jitsi/logger/lib/Logger.js","webpack://JitsiMeetJS/./node_modules/@jitsi/logger/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/parser.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/writer.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://JitsiMeetJS/./node_modules/base64-js/index.js","webpack://JitsiMeetJS/./node_modules/bowser/es5.js","webpack://JitsiMeetJS/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://JitsiMeetJS/./node_modules/events/events.js","webpack://JitsiMeetJS/./node_modules/jquery/dist/jquery.slim.min.js","webpack://JitsiMeetJS/./node_modules/js-md5/src/md5.js","webpack://JitsiMeetJS/./node_modules/lodash.clonedeep/index.js","webpack://JitsiMeetJS/./node_modules/lodash.debounce/index.js","webpack://JitsiMeetJS/./node_modules/lodash.isequal/index.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/index.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/parser.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/writer.js","webpack://JitsiMeetJS/./node_modules/sdp/sdp.js","webpack://JitsiMeetJS/./node_modules/strophe.js/dist/strophe.umd.js","webpack://JitsiMeetJS/../src/strophe.disco.js","webpack://JitsiMeetJS/../src/strophe.stream-management.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/bytesToUuid.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/index.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/md5-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/rng-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/sha1-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v1.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v3.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v35.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v4.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v5.js","webpack://JitsiMeetJS/./service/RTC/BridgeVideoType.js","webpack://JitsiMeetJS/./service/RTC/CameraFacingMode.js","webpack://JitsiMeetJS/./service/RTC/CodecMimeType.js","webpack://JitsiMeetJS/./service/RTC/RTCEvents.ts","webpack://JitsiMeetJS/./service/RTC/Resolutions.js","webpack://JitsiMeetJS/./service/RTC/VideoType.ts","webpack://JitsiMeetJS/./service/authentication/AuthenticationEvents.js","webpack://JitsiMeetJS/./service/statistics/constants.ts","webpack://JitsiMeetJS/./service/xmpp/XMPPEvents.ts","webpack://JitsiMeetJS/webpack/bootstrap","webpack://JitsiMeetJS/webpack/runtime/amd options","webpack://JitsiMeetJS/webpack/runtime/compat get default export","webpack://JitsiMeetJS/webpack/runtime/define property getters","webpack://JitsiMeetJS/webpack/runtime/global","webpack://JitsiMeetJS/webpack/runtime/hasOwnProperty shorthand","webpack://JitsiMeetJS/webpack/runtime/make namespace object","webpack://JitsiMeetJS/webpack/runtime/node module decorator","webpack://JitsiMeetJS/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetJS\"] = factory();\n\telse\n\t\troot[\"JitsiMeetJS\"] = factory();\n})(self, function() {\nreturn ","/**\n * The errors for the conference.\n */\n\nexport enum JitsiConferenceErrors {\n    /**\n     * Indicates that client must be authenticated to create the conference.\n     */\n    AUTHENTICATION_REQUIRED = 'conference.authenticationRequired',\n\n    /**\n     * Indicates that chat error occurred.\n     */\n    CHAT_ERROR = 'conference.chatError',\n\n    /**\n     * Indicates that a settings error occurred.\n     */\n    SETTINGS_ERROR = 'conference.settingsError',\n\n    /**\n     * Indicates that conference has been destroyed.\n     */\n    CONFERENCE_DESTROYED = 'conference.destroyed',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    CONFERENCE_MAX_USERS = 'conference.max_users',\n\n    /**\n     * Indicates that a connection error occurred when trying to join a conference.\n     */\n    CONNECTION_ERROR = 'conference.connectionError',\n\n    /**\n     * Indicates that the client has been forced to restart by jicofo when the\n     * conference was migrated from one bridge to another.\n     */\n    CONFERENCE_RESTARTED = 'conference.restarted',\n\n    /**\n     * Indicates that a connection error is due to not allowed,\n     * occurred when trying to join a conference.\n     */\n    NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed',\n\n    /**\n     * Indicates that a connection error is due to not allowed,\n     * occurred when trying to join a conference, only approved members are allowed to join.\n     */\n    MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly',\n\n    /**\n     * Indicates that a connection error is due to denied access to the room,\n     * occurred after joining a lobby room and access is denied by the room moderators.\n     */\n    CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied',\n\n    /**\n     * Indicates that focus error happened.\n     */\n    FOCUS_DISCONNECTED = 'conference.focusDisconnected',\n\n    /**\n     * Indicates that focus left the conference.\n     */\n    FOCUS_LEFT = 'conference.focusLeft',\n\n    /**\n     * Indicates that graceful shutdown happened.\n     */\n    GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown',\n\n    /**\n     * Indicates that the media connection has failed.\n     */\n    ICE_FAILED = 'conference.iceFailed',\n\n    /**\n     * Indicates that the versions of the server side components are incompatible\n     * with the client side.\n     */\n    INCOMPATIBLE_SERVER_VERSIONS = 'conference.incompatible_server_versions',\n\n    /**\n     * Indicates that offer/answer had failed.\n     */\n    OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed',\n\n    /**\n     * Indicates that password cannot be set for this conference.\n     */\n    PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported',\n\n    /**\n     * Indicates that a password is required in order to join the conference.\n     */\n    PASSWORD_REQUIRED = 'conference.passwordRequired',\n\n    /**\n     * Indicates that reservation system returned error.\n     */\n    RESERVATION_ERROR = 'conference.reservationError',\n\n    /**\n     * Indicates that there is no available videobridge.\n     */\n    VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable'\n};\n\n// exported for backward compatibility\nexport const AUTHENTICATION_REQUIRED = JitsiConferenceErrors.AUTHENTICATION_REQUIRED;\nexport const CHAT_ERROR = JitsiConferenceErrors.CHAT_ERROR;\nexport const SETTINGS_ERROR = JitsiConferenceErrors.SETTINGS_ERROR;\nexport const CONFERENCE_DESTROYED = JitsiConferenceErrors.CONFERENCE_DESTROYED;\nexport const CONFERENCE_MAX_USERS = JitsiConferenceErrors.CONFERENCE_MAX_USERS;\nexport const CONNECTION_ERROR = JitsiConferenceErrors.CONNECTION_ERROR;\nexport const CONFERENCE_RESTARTED = JitsiConferenceErrors.CONFERENCE_RESTARTED;\nexport const NOT_ALLOWED_ERROR = JitsiConferenceErrors.NOT_ALLOWED_ERROR;\nexport const MEMBERS_ONLY_ERROR = JitsiConferenceErrors.MEMBERS_ONLY_ERROR;\nexport const CONFERENCE_ACCESS_DENIED = JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED;\nexport const FOCUS_DISCONNECTED = JitsiConferenceErrors.FOCUS_DISCONNECTED;\nexport const FOCUS_LEFT = JitsiConferenceErrors.FOCUS_LEFT;\nexport const GRACEFUL_SHUTDOWN = JitsiConferenceErrors.GRACEFUL_SHUTDOWN;\nexport const ICE_FAILED = JitsiConferenceErrors.ICE_FAILED;\nexport const INCOMPATIBLE_SERVER_VERSIONS = JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS;\nexport const OFFER_ANSWER_FAILED = JitsiConferenceErrors.OFFER_ANSWER_FAILED;\nexport const PASSWORD_NOT_SUPPORTED = JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED;\nexport const PASSWORD_REQUIRED = JitsiConferenceErrors.PASSWORD_REQUIRED;\nexport const RESERVATION_ERROR = JitsiConferenceErrors.RESERVATION_ERROR;\nexport const VIDEOBRIDGE_NOT_AVAILABLE = JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE;\n","/**\n * The events for the conference.\n */\n\nexport enum JitsiConferenceEvents {\n    /**\n     * Event indicates that the current conference audio input switched between audio\n     * input states,i.e. with or without audio input.\n     */\n    AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed',\n\n    /**\n     * Event indicates that the permission for unmuting audio has changed based on the number of audio senders in the call\n     * and the audio sender limit configured in Jicofo.\n     */\n    AUDIO_UNMUTE_PERMISSIONS_CHANGED = 'conference.audio_unmute_permissions_changed',\n\n    /**\n     * Indicates that authentication status changed.\n     */\n    AUTH_STATUS_CHANGED = 'conference.auth_status_changed',\n\n    /**\n     * Fired just before the statistics module is disposed and it's the last chance\n     * to submit some logs to the statistics service (ex. CallStats if enabled),\n     * before it's disconnected.\n     */\n    BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed',\n\n    /**\n     * Indicates that an error occurred.\n     */\n    CONFERENCE_ERROR = 'conference.error',\n\n    /**\n     * Indicates that conference failed.\n     */\n    CONFERENCE_FAILED = 'conference.failed',\n\n    /**\n     * Indicates that conference is in progress of joining.\n     */\n    CONFERENCE_JOIN_IN_PROGRESS = 'conference.join_in_progress',\n\n    /**\n     * Indicates that conference has been joined. The event does NOT provide any\n     * parameters to its listeners.\n     */\n    CONFERENCE_JOINED = 'conference.joined',\n\n    /**\n     * Indicates that conference has been left.\n     */\n    CONFERENCE_LEFT = 'conference.left',\n\n    /**\n     * Indicates that the conference unique identifier has been set.\n     */\n    CONFERENCE_UNIQUE_ID_SET = 'conference.unique_id_set',\n\n    /**\n     * Indicates that the connection to the conference has been established\n     * XXX This is currently fired when the *ICE* connection enters 'connected'\n     * state for the first time.\n     */\n    CONNECTION_ESTABLISHED = 'conference.connectionEstablished',\n\n    /**\n     * Indicates that the connection to the conference has been interrupted for some\n     * reason.\n     * XXX This is currently fired when the *ICE* connection is interrupted.\n     */\n    CONNECTION_INTERRUPTED = 'conference.connectionInterrupted',\n\n    /**\n     * Indicates that the connection to the conference has been restored.\n     * XXX This is currently fired when the *ICE* connection is restored.\n     */\n    CONNECTION_RESTORED = 'conference.connectionRestored',\n\n    /**\n     * A connection to the video bridge's data channel has been established.\n     */\n    DATA_CHANNEL_OPENED = 'conference.dataChannelOpened',\n\n    /**\n     * A user has changed it display name\n     */\n    DISPLAY_NAME_CHANGED = 'conference.displayNameChanged',\n\n    /**\n     * The dominant speaker was changed.\n     */\n    DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker',\n\n    /**\n     * UTC conference timestamp when first participant joined.\n     */\n    CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp',\n\n    /**\n     * Indicates that DTMF support changed.\n     */\n    DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged',\n\n    /**\n     * Indicates that a message from another participant is received on data\n     * channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received',\n\n    /**\n     * Indicates that a message for the remote endpoint statistics has been received on the bridge channel.\n     */\n    ENDPOINT_STATS_RECEIVED = 'conference.endpoint_stats_received',\n\n    /**\n     * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n     *\n     * Event emitted when conference transits, between one to one and multiparty JVB\n     * conference. If the conference switches to P2P it's neither one to one nor\n     * a multiparty JVB conference, but P2P (the status argument of this event will\n     * be <tt>false</tt>).\n     *\n     * The first argument is a boolean which carries the previous value and\n     * the seconds argument is a boolean with the new status. The event is emitted\n     * only if the previous and the new values are different.\n     *\n     * @type {string}\n     */\n    JVB121_STATUS = 'conference.jvb121Status',\n\n    /**\n     * You are kicked from the conference.\n     * @param {JitsiParticipant} the participant that initiated the kick.\n     */\n    KICKED = 'conference.kicked',\n\n    /**\n     * Participant was kicked from the conference.\n     * @param {JitsiParticipant} the participant that initiated the kick.\n     * @param {JitsiParticipant} the participant that was kicked.\n     */\n    PARTICIPANT_KICKED = 'conference.participant_kicked',\n\n    /**\n     * The Last N set is changed.\n     *\n     * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n     * which are leaving Last N\n     * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n     * which are entering Last N\n     */\n    LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged',\n\n    /**\n     * The forwarded sources set is changed.\n     *\n     * @param {Array<string>} leavingForwardedSources the sourceNames of all the tracks which are leaving forwarded\n     * sources\n     * @param {Array<string>} enteringForwardedSources the sourceNames of all the tracks which are entering forwarded\n     * sources\n     */\n    FORWARDED_SOURCES_CHANGED = 'conference.forwardedSourcesChanged',\n\n    /**\n     * Indicates that the room has been locked or unlocked.\n     */\n    LOCK_STATE_CHANGED = 'conference.lock_state_changed',\n\n    /**\n     * Indicates that the region of the media server (jitsi-videobridge) that we\n     * are connected to changed (or was initially set).\n     * @type {string} the region.\n     */\n    SERVER_REGION_CHANGED = 'conference.server_region_changed',\n\n    /**\n     * An event(library-private) fired when a new media session is added to the conference.\n     * @type {string}\n     * @private\n     */\n    _MEDIA_SESSION_STARTED = 'conference.media_session.started',\n\n    /**\n     * An event(library-private) fired when the conference switches the currently active media session.\n     * @type {string}\n     * @private\n     */\n    _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed',\n\n    /**\n     * Indicates that the conference had changed to members only enabled/disabled.\n     * The first argument of this event is a <tt>boolean</tt> which when set to\n     * <tt>true</tt> means that the conference is running in members only mode.\n     * You may need to use Lobby if supported to ask for permissions to enter the conference.\n     */\n    MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged',\n\n    /**\n     * New text message was received.\n     */\n    MESSAGE_RECEIVED = 'conference.messageReceived',\n\n    /**\n     * Event indicates that the current selected input device has no signal\n     */\n    NO_AUDIO_INPUT = 'conference.no_audio_input',\n\n    /**\n     * Event indicates that the current microphone used by the conference is noisy.\n     */\n    NOISY_MIC = 'conference.noisy_mic',\n\n    /**\n     * Indicates that a message from the local user or from the Prosody backend\n     * was received on the data channel.\n     */\n    NON_PARTICIPANT_MESSAGE_RECEIVED = 'conference.non_participant_message_received',\n\n    /**\n     * New private text message was received.\n     */\n    PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived',\n\n    /**\n     * Event fired when JVB sends notification about interrupted/restored user's\n     * ICE connection status or we detect local problem with the video track.\n     * First argument is the ID of the participant and\n     * the seconds is a string indicating if the connection is currently\n     * - active - the connection is active\n     * - inactive - the connection is inactive, was intentionally interrupted by\n     * the bridge\n     * - interrupted - a network problem occurred\n     * - restoring - the connection was inactive and is restoring now\n     *\n     * The current status value can be obtained by calling\n     * JitsiParticipant.getConnectionStatus().\n     */\n    PARTICIPANT_CONN_STATUS_CHANGED = 'conference.participant_conn_status_changed',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     * TODO: there is a spelling mistake in this event name and associated constants\n     */\n    PARTCIPANT_FEATURES_CHANGED = 'conference.partcipant_features_changed',\n\n    /**\n     * Indicates that a the value of a specific property of a specific participant\n     * has changed.\n     */\n    PARTICIPANT_PROPERTY_CHANGED = 'conference.participant_property_changed',\n\n    /**\n     * Indicates that the conference has switched between JVB and P2P connections.\n     * The first argument of this event is a <tt>boolean</tt> which when set to\n     * <tt>true</tt> means that the conference is running on the P2P connection.\n     */\n    P2P_STATUS = 'conference.p2pStatus',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged',\n\n    /**\n     * The conference properties changed.\n     * @type {string}\n     */\n    PROPERTIES_CHANGED = 'conference.propertiesChanged',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED = 'conference.recorderStateChanged',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     * @param {VideoSIPGWConstants} status.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED = 'conference.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * @param {options} event - {\n     *     {string} address,\n     *     {VideoSIPGWConstants} oldState,\n     *     {VideoSIPGWConstants} newState,\n     *     {string} displayName}\n     * }.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED = 'conference.videoSIPGWSessionStateChanged',\n\n    /**\n     * Indicates that start muted settings changed.\n     */\n    START_MUTED_POLICY_CHANGED = 'conference.start_muted_policy_changed',\n\n    /**\n     * Indicates that the local user has started muted.\n     */\n    STARTED_MUTED = 'conference.started_muted',\n\n    /**\n     * Indicates that subject of the conference has changed.\n     */\n    SUBJECT_CHANGED = 'conference.subjectChanged',\n\n    /**\n     * Indicates that DTMF support changed.\n     */\n    SUSPEND_DETECTED = 'conference.suspendDetected',\n\n    /**\n     * Event indicates that local user is talking while he muted himself\n     */\n    TALK_WHILE_MUTED = 'conference.talk_while_muted',\n\n    /**\n     * A new media track was added to the conference. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {JitsiTrack} track the added JitsiTrack\n     */\n    TRACK_ADDED = 'conference.trackAdded',\n\n    /**\n     * Audio levels of a media track ( attached to the conference) was changed.\n     */\n    TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged',\n\n    /**\n     * A media track ( attached to the conference) mute status was changed.\n     * @param {JitsiParticipant|null} the participant that initiated the mute\n     * if it is a remote mute.\n     */\n    TRACK_MUTE_CHANGED = 'conference.trackMuteChanged',\n\n    /**\n     * The media track was removed from the conference. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {JitsiTrack} track the removed JitsiTrack\n     */\n    TRACK_REMOVED = 'conference.trackRemoved',\n\n    /**\n     * The source-add for unmuting of a media track was rejected by Jicofo.\n     *\n     */\n    TRACK_UNMUTE_REJECTED = 'conference.trackUnmuteRejected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED = 'conference.transcriptionStatusChanged',\n\n    /**\n     * A new user joined the conference.\n     */\n    USER_JOINED = 'conference.userJoined',\n\n    /**\n     * A user has left the conference.\n     */\n    USER_LEFT = 'conference.userLeft',\n\n    /**\n     * User role changed.\n     */\n    USER_ROLE_CHANGED = 'conference.roleChanged',\n\n    /**\n     * User status changed.\n     */\n    USER_STATUS_CHANGED = 'conference.statusChanged',\n\n    /**\n     * Event indicates that the permission for unmuting video has changed based on the number of video senders in the call\n     * and the video sender limit configured in Jicofo.\n     */\n    VIDEO_UNMUTE_PERMISSIONS_CHANGED = 'conference.video_unmute_permissions_changed',\n\n    /**\n     * Event indicates that the bot participant type changed.\n     */\n    BOT_TYPE_CHANGED = 'conference.bot_type_changed',\n\n    /**\n     * A new user joined the lobby room.\n     */\n    LOBBY_USER_JOINED = 'conference.lobby.userJoined',\n\n    /**\n     * A user from the lobby room has been update.\n     */\n    LOBBY_USER_UPDATED = 'conference.lobby.userUpdated',\n\n    /**\n     * A user left the lobby room.\n     */\n    LOBBY_USER_LEFT = 'conference.lobby.userLeft',\n\n    /**\n     * The local participant was approved to be able to unmute.\n     * @param {options} event - {\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_APPROVED = 'conference.av_moderation.approved',\n\n    /**\n     * The local participant was blocked to be able to unmute.\n     * @param {options} event - {\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_REJECTED = 'conference.av_moderation.rejected',\n\n    /**\n     * AV Moderation was enabled/disabled. The actor is the participant that is currently in the meeting,\n     * or undefined if that participant has left the meeting.\n     *\n     * @param {options} event - {\n     *     {boolean} enabled,\n     *     {MediaType} mediaType,\n     *     {JitsiParticipant} actor\n     * }.\n     */\n    AV_MODERATION_CHANGED = 'conference.av_moderation.changed',\n\n    /**\n     * AV Moderation, report for user being approved to unmute.\n     * @param {options} event - {\n     *     {JitsiParticipant} participant,\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED = 'conference.av_moderation.participant.approved',\n\n    /**\n     * AV Moderation, report for user being blocked to unmute.\n     * @param {options} event - {\n     *     {JitsiParticipant} participant,\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED = 'conference.av_moderation.participant.rejected',\n\n    /**\n     * A new face landmark object is added for a participant\n     */\n    FACE_LANDMARK_ADDED = 'conference.face_landmark.added',\n\n    /**\n     * Event fired when a participant is requested to join a given (breakout) room.\n     */\n    BREAKOUT_ROOMS_MOVE_TO_ROOM = 'conference.breakout-rooms.move-to-room',\n\n    /**\n     * Event fired when the breakout rooms data was updated.\n     */\n    BREAKOUT_ROOMS_UPDATED = 'conference.breakout-rooms.updated',\n\n    /**\n     * Event fired when the conference metadata is updated.\n     */\n    METADATA_UPDATED = 'conference.metadata.updated'\n};\n\n// exported for backward compatibility\nexport const AUDIO_INPUT_STATE_CHANGE = JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE;\nexport const AUDIO_UNMUTE_PERMISSIONS_CHANGED = JitsiConferenceEvents.AUDIO_UNMUTE_PERMISSIONS_CHANGED;\nexport const AUTH_STATUS_CHANGED = JitsiConferenceEvents.AUTH_STATUS_CHANGED;\nexport const BEFORE_STATISTICS_DISPOSED = JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED;\nexport const CONFERENCE_ERROR = JitsiConferenceEvents.CONFERENCE_ERROR;\nexport const CONFERENCE_FAILED = JitsiConferenceEvents.CONFERENCE_FAILED;\nexport const CONFERENCE_JOIN_IN_PROGRESS = JitsiConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS;\nexport const CONFERENCE_JOINED = JitsiConferenceEvents.CONFERENCE_JOINED;\nexport const CONFERENCE_LEFT = JitsiConferenceEvents.CONFERENCE_LEFT;\nexport const CONFERENCE_UNIQUE_ID_SET = JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET;\nexport const CONNECTION_ESTABLISHED = JitsiConferenceEvents.CONNECTION_ESTABLISHED;\nexport const CONNECTION_INTERRUPTED = JitsiConferenceEvents.CONNECTION_INTERRUPTED;\nexport const CONNECTION_RESTORED = JitsiConferenceEvents.CONNECTION_RESTORED;\nexport const DATA_CHANNEL_OPENED = JitsiConferenceEvents.DATA_CHANNEL_OPENED;\nexport const DISPLAY_NAME_CHANGED = JitsiConferenceEvents.DISPLAY_NAME_CHANGED;\nexport const DOMINANT_SPEAKER_CHANGED = JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED;\nexport const CONFERENCE_CREATED_TIMESTAMP = JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP;\nexport const DTMF_SUPPORT_CHANGED = JitsiConferenceEvents.DTMF_SUPPORT_CHANGED;\nexport const ENDPOINT_MESSAGE_RECEIVED = JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED;\nexport const ENDPOINT_STATS_RECEIVED = JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED;\nexport const JVB121_STATUS = JitsiConferenceEvents.JVB121_STATUS;\nexport const KICKED = JitsiConferenceEvents.KICKED;\nexport const PARTICIPANT_KICKED = JitsiConferenceEvents.PARTICIPANT_KICKED;\nexport const LAST_N_ENDPOINTS_CHANGED = JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED;\nexport const FORWARDED_SOURCES_CHANGED = JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED;\nexport const LOCK_STATE_CHANGED = JitsiConferenceEvents.LOCK_STATE_CHANGED;\nexport const SERVER_REGION_CHANGED = JitsiConferenceEvents.SERVER_REGION_CHANGED;\nexport const _MEDIA_SESSION_STARTED = JitsiConferenceEvents._MEDIA_SESSION_STARTED;\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED;\nexport const MEMBERS_ONLY_CHANGED = JitsiConferenceEvents.MEMBERS_ONLY_CHANGED;\nexport const MESSAGE_RECEIVED = JitsiConferenceEvents.MESSAGE_RECEIVED;\nexport const NO_AUDIO_INPUT = JitsiConferenceEvents.NO_AUDIO_INPUT;\nexport const NOISY_MIC = JitsiConferenceEvents.NOISY_MIC;\nexport const NON_PARTICIPANT_MESSAGE_RECEIVED = JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED;\nexport const PRIVATE_MESSAGE_RECEIVED = JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED;\nexport const PARTICIPANT_CONN_STATUS_CHANGED = JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED;\nexport const PARTCIPANT_FEATURES_CHANGED = JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED;\nexport const PARTICIPANT_PROPERTY_CHANGED = JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED;\nexport const P2P_STATUS = JitsiConferenceEvents.P2P_STATUS;\nexport const PHONE_NUMBER_CHANGED = JitsiConferenceEvents.PHONE_NUMBER_CHANGED;\nexport const PROPERTIES_CHANGED = JitsiConferenceEvents.PROPERTIES_CHANGED;\nexport const RECORDER_STATE_CHANGED = JitsiConferenceEvents.RECORDER_STATE_CHANGED;\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED = JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED;\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED = JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED;\nexport const START_MUTED_POLICY_CHANGED = JitsiConferenceEvents.START_MUTED_POLICY_CHANGED;\nexport const STARTED_MUTED = JitsiConferenceEvents.STARTED_MUTED;\nexport const SUBJECT_CHANGED = JitsiConferenceEvents.SUBJECT_CHANGED;\nexport const SUSPEND_DETECTED = JitsiConferenceEvents.SUSPEND_DETECTED;\nexport const TALK_WHILE_MUTED = JitsiConferenceEvents.TALK_WHILE_MUTED;\nexport const TRACK_ADDED = JitsiConferenceEvents.TRACK_ADDED;\nexport const TRACK_AUDIO_LEVEL_CHANGED = JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED;\nexport const TRACK_MUTE_CHANGED = JitsiConferenceEvents.TRACK_MUTE_CHANGED;\nexport const TRACK_REMOVED = JitsiConferenceEvents.TRACK_REMOVED;\nexport const TRACK_UNMUTE_REJECTED = JitsiConferenceEvents.TRACK_UNMUTE_REJECTED;\nexport const TRANSCRIPTION_STATUS_CHANGED = JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED;\nexport const USER_JOINED = JitsiConferenceEvents.USER_JOINED;\nexport const USER_LEFT = JitsiConferenceEvents.USER_LEFT;\nexport const USER_ROLE_CHANGED = JitsiConferenceEvents.USER_ROLE_CHANGED;\nexport const USER_STATUS_CHANGED = JitsiConferenceEvents.USER_STATUS_CHANGED;\nexport const VIDEO_UNMUTE_PERMISSIONS_CHANGED = JitsiConferenceEvents.VIDEO_UNMUTE_PERMISSIONS_CHANGED;\nexport const BOT_TYPE_CHANGED = JitsiConferenceEvents.BOT_TYPE_CHANGED;\nexport const LOBBY_USER_JOINED = JitsiConferenceEvents.LOBBY_USER_JOINED;\nexport const LOBBY_USER_UPDATED = JitsiConferenceEvents.LOBBY_USER_UPDATED;\nexport const LOBBY_USER_LEFT = JitsiConferenceEvents.LOBBY_USER_LEFT;\nexport const AV_MODERATION_APPROVED = JitsiConferenceEvents.AV_MODERATION_APPROVED;\nexport const AV_MODERATION_REJECTED = JitsiConferenceEvents.AV_MODERATION_REJECTED;\nexport const AV_MODERATION_CHANGED = JitsiConferenceEvents.AV_MODERATION_CHANGED;\nexport const AV_MODERATION_PARTICIPANT_APPROVED = JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED;\nexport const AV_MODERATION_PARTICIPANT_REJECTED = JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED;\nexport const FACE_LANDMARK_ADDED = JitsiConferenceEvents.FACE_LANDMARK_ADDED;\nexport const BREAKOUT_ROOMS_MOVE_TO_ROOM = JitsiConferenceEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM;\nexport const BREAKOUT_ROOMS_UPDATED = JitsiConferenceEvents.BREAKOUT_ROOMS_UPDATED;\nexport const METADATA_UPDATED = JitsiConferenceEvents.METADATA_UPDATED;\n","export const CALLSTATS_SCRIPT_URL = 'https://api.callstats.io/static/callstats-ws.min.js';\n\n/**\n * The number of remote speakers for which the audio levels will be calculated using\n * RTCRtpReceiver#getSynchronizationSources. Limit the number of endpoints to save cpu on the client as this API call\n * is known to take longer to execute when there are many audio receivers.\n */\nexport const SPEAKERS_AUDIO_LEVELS = 5;\n","/**\n * The errors for the JitsiTrack objects.\n */\n\nexport enum JitsiTrackErrors {\n    /**\n     * An error which indicates that some of requested constraints in\n     * getUserMedia call were not satisfied.\n     */\n    CONSTRAINT_FAILED = 'gum.constraint_failed',\n\n    /**\n     * A generic error which indicates an error occurred while selecting\n     * a DesktopCapturerSource from the electron app.\n     */\n    ELECTRON_DESKTOP_PICKER_ERROR = 'gum.electron_desktop_picker_error',\n\n    /**\n     * An error which indicates a custom desktop picker could not be detected\n     * for the electron app.\n     */\n    ELECTRON_DESKTOP_PICKER_NOT_FOUND = 'gum.electron_desktop_picker_not_found',\n\n    /**\n     * Generic getUserMedia error.\n     */\n    GENERAL = 'gum.general',\n\n    /**\n     * An error which indicates that requested device was not found.\n     */\n    NOT_FOUND = 'gum.not_found',\n\n    /**\n     * An error which indicates that user denied permission to share requested\n     * device.\n     */\n    PERMISSION_DENIED = 'gum.permission_denied',\n\n    /**\n     * Generic error for screensharing failure.\n     */\n    SCREENSHARING_GENERIC_ERROR = 'gum.screensharing_generic_error',\n\n    /**\n     * An error which indicates that user canceled screen sharing window\n     * selection dialog.\n     */\n    SCREENSHARING_USER_CANCELED = 'gum.screensharing_user_canceled',\n\n    /**\n     * Indicates that the timeout passed to the obtainAudioAndVideoPermissions has expired without GUM resolving.\n     */\n    TIMEOUT = 'gum.timeout',\n\n    /**\n     * An error which indicates that track has been already disposed and cannot\n     * be longer used.\n     */\n    TRACK_IS_DISPOSED = 'track.track_is_disposed',\n\n    /**\n     * An error which indicates that track has no MediaStream associated.\n     */\n    TRACK_NO_STREAM_FOUND = 'track.no_stream_found',\n\n    /**\n     * An error which indicates that requested video resolution is not supported\n     * by a webcam.\n     */\n    UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution'\n}\n\n// exported for backward compatibility\nexport const CONSTRAINT_FAILED = JitsiTrackErrors.CONSTRAINT_FAILED;\nexport const ELECTRON_DESKTOP_PICKER_ERROR = JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR;\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND = JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND;\nexport const GENERAL = JitsiTrackErrors.GENERAL;\nexport const NOT_FOUND = JitsiTrackErrors.NOT_FOUND;\nexport const PERMISSION_DENIED = JitsiTrackErrors.PERMISSION_DENIED;\nexport const SCREENSHARING_GENERIC_ERROR = JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR;\nexport const SCREENSHARING_USER_CANCELED = JitsiTrackErrors.SCREENSHARING_USER_CANCELED;\nexport const TIMEOUT = JitsiTrackErrors.TIMEOUT;\nexport const TRACK_IS_DISPOSED = JitsiTrackErrors.TRACK_IS_DISPOSED;\nexport const TRACK_NO_STREAM_FOUND = JitsiTrackErrors.TRACK_NO_STREAM_FOUND;\nexport const UNSUPPORTED_RESOLUTION = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_USER_CANCELED]\n    = 'User canceled screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]\n    = 'Unknown error from screensharing';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TIMEOUT]\n    = 'Could not start media source. Timeout occured!';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || new Error().stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","export enum JitsiTrackEvents {\n    /**\n     * The media track was removed to the conference.\n     */\n    LOCAL_TRACK_STOPPED = 'track.stopped',\n\n    /**\n     * Audio levels of a this track was changed.\n     * The first argument is a number with audio level value in range [0, 1].\n     * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n     * connection which measured the audio level (one audio track can be added\n     * to multiple peer connection at the same time). This argument is optional for\n     * local tracks for which we can measure audio level without the peer\n     * connection (the value will be <tt>undefined</tt>).\n     *\n     * NOTE The second argument should be treated as library internal and can be\n     * removed at any time.\n     */\n    TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged',\n\n    /**\n     * The audio output of the track was changed.\n     */\n    TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged',\n\n    /**\n     * A media track mute status was changed.\n     */\n    TRACK_MUTE_CHANGED = 'track.trackMuteChanged',\n\n    /**\n     * The video type(\"camera\" or \"desktop\") of the track was changed.\n     */\n    TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged',\n\n    /**\n     * Indicates that the track is not receiving any data even though we expect it\n     * to receive data (i.e. the stream is not stopped).\n     */\n    NO_DATA_FROM_SOURCE = 'track.no_data_from_source',\n\n    /**\n     * Indicates that the local audio track is not receiving any audio input from\n     * the microphone that is currently selected.\n     */\n    NO_AUDIO_INPUT = 'track.no_audio_input',\n\n    /**\n     * Event fired whenever video track's streaming changes.\n     * First argument is the sourceName of the track and the second is a string indicating if the connection is currently\n     * - active - the connection is active.\n     * - inactive - the connection is inactive, was intentionally interrupted by the bridge because of low BWE or because\n     *   of the endpoint falling out of last N.\n     * - interrupted - a network problem occurred.\n     * - restoring - the connection was inactive and is restoring now.\n     *\n     * The current status value can be obtained by calling JitsiRemoteTrack.getTrackStreamingStatus().\n     */\n    TRACK_STREAMING_STATUS_CHANGED = 'track.streaming_status_changed'\n};\n\n// exported for backward compatibility\nexport const LOCAL_TRACK_STOPPED = JitsiTrackEvents.LOCAL_TRACK_STOPPED;\nexport const TRACK_AUDIO_LEVEL_CHANGED = JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED;\nexport const TRACK_AUDIO_OUTPUT_CHANGED = JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED;\nexport const TRACK_MUTE_CHANGED = JitsiTrackEvents.TRACK_MUTE_CHANGED;\nexport const TRACK_VIDEOTYPE_CHANGED = JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED;\nexport const NO_DATA_FROM_SOURCE = JitsiTrackEvents.NO_DATA_FROM_SOURCE;\nexport const NO_AUDIO_INPUT = JitsiTrackEvents.NO_AUDIO_INPUT;\nexport const TRACK_STREAMING_STATUS_CHANGED = JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\nexport enum AnalyticsEvents {\n    /**\n     * The constant which identifies an event of type \"operational\".\n     */\n    TYPE_OPERATIONAL = 'operational',\n\n    /**\n     * The constant which identifies an event of type \"page\".\n     */\n    TYPE_PAGE = 'page',\n\n    /**\n     * The constant which identifies an event of type \"track\".\n     */\n    TYPE_TRACK = 'track',\n\n    /**\n     * The constant which identifies an event of type \"ui\".\n     */\n    TYPE_UI = 'ui',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that the Jingle session\n     * was restarted (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_RESTART = 'restart',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-accept\n     * timed out (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-initiate\n     * was received.\n     */\n    ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-initiate\n     * not arrived within a timeout (the value is specified in\n     * the {@link JingleSessionPC}.\n     */\n    ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout',\n\n    /**\n     * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n     * the documentation)\n     */\n    ACTION_JINGLE_TERMINATE = 'terminate',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a transport-replace\n     * was received.\n     */\n    ACTION_JINGLE_TR_RECEIVED = 'transport-replace.received',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a transport-replace\n     * succeeded (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_TR_SUCCESS = 'transport-replace.success',\n\n    /**\n     * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\n     * because the mandatory requirements were not met.\n     */\n    ACTION_P2P_DECLINED = 'decline',\n\n    /**\n     * The \"action\" value for P2P events which indicates that a connection was\n     * established (TODO: verify/fix the documentation)\n     */\n    ACTION_P2P_ESTABLISHED = 'established',\n\n    /**\n     * The \"action\" value for P2P events which indicates that something failed.\n     */\n    ACTION_P2P_FAILED = 'failed',\n\n    /**\n     * The \"action\" value for P2P events which indicates that a switch to\n     * jitsi-videobridge happened.\n     */\n    ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb',\n\n    /**\n     * The name of an event which indicates an available device. We send one such\n     * event per available device once when the available devices are first known,\n     * and every time that they change\n     *\n     * Properties:\n     *      audio_input_device_count: the number of audio input devices available at\n     *          the time the event was sent.\n     *      audio_output_device_count: the number of audio output devices available\n     *          at the time the event was sent.\n     *      video_input_device_count: the number of video input devices available at\n     *          the time the event was sent.\n     *      video_output_device_count: the number of video output devices available\n     *          at the time the event was sent.\n     *      device_id: an identifier of the device described in this event.\n     *      device_group_id:\n     *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n     *          'videooutput'.\n     *      device_label: a string which describes the device.\n     */\n    AVAILABLE_DEVICE = 'available.device',\n\n    /**\n     * This appears to be fired only in certain cases when the XMPP connection\n     * disconnects (and it was intentional?). It is currently never observed to\n     * fire in production.\n     *\n     * TODO: document\n     *\n     * Properties:\n     *      message: an error message\n     */\n    CONNECTION_DISCONNECTED = 'connection.disconnected',\n\n    /**\n     * Indicates that the user of the application provided feedback in terms of a\n     * rating (an integer from 1 to 5) and an optional comment.\n     * Properties:\n     *      value: the user's rating (an integer from 1 to 5)\n     *      comment: the user's comment\n     */\n    FEEDBACK = 'feedback',\n\n    /**\n     * Indicates the duration of a particular phase of the ICE connectivity\n     * establishment.\n     *\n     * Properties:\n     *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n     *      value: the duration in milliseconds.\n     *      p2p: whether the associated ICE connection is p2p or towards a\n     *          jitsi-videobridge\n     *      initiator: whether the local Jingle peer is the initiator or responder\n     *          in the Jingle session. XXX we probably actually care about the ICE\n     *          role (controlling vs controlled), and we assume that this correlates\n     *          with the Jingle initiator.\n     */\n    ICE_DURATION = 'ice.duration',\n\n    /**\n     * Indicates the difference in milliseconds between the ICE establishment time\n     * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n     * P2P connection took 10ms more than JVB connection to establish).\n     *\n     * Properties:\n     *      value: the difference in establishment durations in milliseconds.\n     *\n     */\n    ICE_ESTABLISHMENT_DURATION_DIFF = 'ice.establishment.duration.diff',\n\n    /**\n     * Indicates that the ICE state has changed.\n     *\n     * Properties:\n     *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n     *          'completed', etc).\n     *      value: the time in milliseconds (as reported by\n     *          window.performance.now()) that the state change occurred.\n     *      p2p: whether the associated ICE connection is p2p or towards a\n     *          jitsi-videobridge\n     *      signalingState: The signaling state of the associated PeerConnection\n     *      reconnect: whether the associated Jingle session is in the process of\n     *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n     */\n    ICE_STATE_CHANGED = 'ice.state.changed',\n\n    /**\n     * Indicates that no bytes have been sent for the track.\n     *\n     * Properties:\n     *      mediaType: the media type of the local track ('audio' or 'video').\n     */\n    NO_BYTES_SENT = 'track.no-bytes-sent',\n\n    /**\n     * Indicates that a track was unmuted (?).\n     *\n     * Properties:\n     *      mediaType: the media type of the local track ('audio' or 'video').\n     *      trackType: the type of the track ('local' or 'remote').\n     *      value: TODO: document\n     */\n    TRACK_UNMUTED = 'track.unmuted'\n}\n\n// exported for backward compatibility\nexport const TYPE_OPERATIONAL = AnalyticsEvents.TYPE_OPERATIONAL;\nexport const TYPE_PAGE = AnalyticsEvents.TYPE_PAGE;\nexport const TYPE_TRACK = AnalyticsEvents.TYPE_TRACK;\nexport const TYPE_UI = AnalyticsEvents.TYPE_UI;\nexport const ACTION_JINGLE_RESTART = AnalyticsEvents.ACTION_JINGLE_RESTART;\nexport const ACTION_JINGLE_SA_TIMEOUT = AnalyticsEvents.ACTION_JINGLE_SA_TIMEOUT;\nexport const ACTION_JINGLE_SI_RECEIVED = AnalyticsEvents.ACTION_JINGLE_SI_RECEIVED;\nexport const ACTION_JINGLE_SI_TIMEOUT = AnalyticsEvents.ACTION_JINGLE_SI_TIMEOUT;\nexport const ACTION_JINGLE_TERMINATE = AnalyticsEvents.ACTION_JINGLE_TERMINATE;\nexport const ACTION_JINGLE_TR_RECEIVED = AnalyticsEvents.ACTION_JINGLE_TR_RECEIVED;\nexport const ACTION_JINGLE_TR_SUCCESS = AnalyticsEvents.ACTION_JINGLE_TR_SUCCESS;\nexport const ACTION_P2P_DECLINED = AnalyticsEvents.ACTION_P2P_DECLINED;\nexport const ACTION_P2P_ESTABLISHED = AnalyticsEvents.ACTION_P2P_ESTABLISHED;\nexport const ACTION_P2P_FAILED = AnalyticsEvents.ACTION_P2P_FAILED;\nexport const ACTION_P2P_SWITCH_TO_JVB = AnalyticsEvents.ACTION_P2P_SWITCH_TO_JVB;\nexport const AVAILABLE_DEVICE = AnalyticsEvents.AVAILABLE_DEVICE;\nexport const CONNECTION_DISCONNECTED = AnalyticsEvents.CONNECTION_DISCONNECTED;\nexport const FEEDBACK = AnalyticsEvents.FEEDBACK;\nexport const ICE_DURATION = AnalyticsEvents.ICE_DURATION;\nexport const ICE_ESTABLISHMENT_DURATION_DIFF = AnalyticsEvents.ICE_ESTABLISHMENT_DURATION_DIFF;\nexport const ICE_STATE_CHANGED = AnalyticsEvents.ICE_STATE_CHANGED;\nexport const NO_BYTES_SENT = AnalyticsEvents.NO_BYTES_SENT;\nexport const TRACK_UNMUTED = AnalyticsEvents.TRACK_UNMUTED;\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = () => ( {\n    action: 'bridge.down',\n    actionSubject: 'bridge.down',\n    type: TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent = ( errorType: unknown, errorMessage: unknown, details: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'connection.failed',\n    attributes: {\n        'error_type': errorType,\n        'error_message': errorMessage,\n        ...details\n    }\n} );\n\n/**\n * Creates a conference event.\n *\n * @param action - The action of the event.\n * @param attributes - The attributes to be added to the event.\n */\nexport const createConferenceEvent = ( action: string, attributes: object ) => ( {\n    action,\n    attributes,\n    source: 'conference',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = ( stage: unknown, attributes: object ) => ( {\n    action: 'connection.stage.reached',\n    actionSubject: stage,\n    attributes,\n    source: 'connection.stage.reached',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = ( participantId: unknown, region: unknown, rtt: unknown ) => ( {\n    attributes: {\n        'participant_id': participantId,\n        region,\n        rtt\n    },\n    name: 'e2e_rtt',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = () => ( {\n    action: 'focus.left',\n    actionSubject: 'focus.left',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n */\nexport const createGetUserMediaEvent = ( action: 'error' | 'success' | 'warning' | string, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'get.user.media',\n    action,\n    attributes\n} );\n\n/**\n * Creates an event related to remote participant connection status changes.\n *\n * @param attributes the attributes to attach to the event.\n */\nexport const createParticipantConnectionStatusEvent = ( attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'peer.conn.status',\n    action: 'duration',\n    attributes\n} );\n\n/**\n * Creates an event related to remote track streaming status changes.\n *\n * @param attributes the attributes to attach to the event.\n */\nexport const createTrackStreamingStatusEvent = ( attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'track.streaming.status',\n    action: 'duration',\n    attributes\n} );\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = ( action: unknown, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action,\n    source: 'jingle',\n    attributes\n} );\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = ( mediaType: 'audio' | 'video' | string, value: unknown ) => ( {\n    attributes: {\n        'media_type': mediaType,\n        value\n    },\n    action: 'track.no.data.from.source',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = ( action: unknown, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action,\n    source: 'p2p',\n    attributes\n} )\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = ( mediaType: unknown ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'remotely.muted',\n    mediaType\n} );\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'rtp.stats',\n    attributes\n} );\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n */\nexport const createRttByRegionEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'rtt.by.region',\n    attributes\n} );\n\n/**\n * Creates an event which contains the local and remote ICE candidate types\n * for the transport that is currently selected.\n *\n * @param attributes\n */\nexport const createTransportStatsEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'transport.stats',\n    attributes\n} );\n\n/**\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\n * the local audio levels and the remote audio levels that triggered the event).\n *\n * @param userID - The user id of the affected participant.\n * @param localAudioLevels - The local audio levels.\n * @param remoteAudioLevels - The audio levels received from the participant.\n */\nexport const createAudioOutputProblemEvent = ( userID: string, localAudioLevels: unknown, remoteAudioLevels: unknown ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'audio.output.problem',\n    attributes: {\n        userID,\n        localAudioLevels,\n        remoteAudioLevels\n    }\n} );\n\n/**\n * Creates an event which contains an information related to the bridge channel close event.\n *\n * @param code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * @param reason - A string which describes the reason for closing the bridge channel.\n */\nexport const createBridgeChannelClosedEvent = ( code: string, reason: string ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'bridge-channel.error',\n    attributes: {\n        code,\n        reason\n    }\n} );\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = ( attributes: object ) => createConnectionStageReachedEvent( 'ttfm', attributes );\n","export enum Events {\n    /**\n     * Notifies about audio level in RTP statistics by SSRC.\n     *\n     * @param ssrc - The synchronization source identifier (SSRC) of the\n     * endpoint/participant whose audio level is being reported.\n     * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n     * RTP statistics.\n     * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n     * local endpoint/participant; otherwise, <tt>false</tt>.\n     */\n    AUDIO_LEVEL = 'statistics.audioLevel',\n\n    /**\n     * An event fired just before the statistics module gets disposes and it's\n     * the last chance to submit some logs that will end up in stats services like\n     * CallStats (if enabled).\n     */\n    BEFORE_DISPOSED = 'statistics.before_disposed',\n\n    /**\n     * An event carrying all statistics by ssrc.\n     */\n    BYTE_SENT_STATS = 'statistics.byte_sent_stats',\n\n    /**\n     * An event carrying connection statistics.\n     *\n     * @param {object} connectionStats - The connection statistics carried by the\n     * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n     * <tt>resolution</tt>, and <tt>transport</tt>.\n     */\n    CONNECTION_STATS = 'statistics.connectionstats',\n\n    /**\n     * An event carrying performance stats.\n     */\n    LONG_TASKS_STATS = 'statistics.long_tasks_stats'\n};\n\n// exported for backward compatibility\nexport const AUDIO_LEVEL = Events.AUDIO_LEVEL;\nexport const BEFORE_DISPOSED = Events.BEFORE_DISPOSED;\nexport const BYTE_SENT_STATS = Events.BYTE_SENT_STATS;\nexport const CONNECTION_STATS = Events.CONNECTION_STATS;\nexport const LONG_TASKS_STATS = Events.LONG_TASKS_STATS;\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\n\nexport const CHROME = 'chrome';\n\nexport const OPERA = 'opera';\n\nexport const FIREFOX = 'firefox';\n\nexport const INTERNET_EXPLORER = 'iexplorer';\n\nexport const SAFARI = 'safari';\n\nexport const NWJS = 'nwjs';\n\nexport const ELECTRON = 'electron';\n\nexport const REACT_NATIVE = 'react-native';\n\nexport const UNKNOWN = 'unknown';\n","import Bowser from 'bowser';\n\nimport {\n    CHROME,\n    OPERA,\n    FIREFOX,\n    INTERNET_EXPLORER,\n    SAFARI,\n    NWJS,\n    ELECTRON,\n    REACT_NATIVE,\n    UNKNOWN\n} from './browsers.js';\n\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\nconst bowserNameToJitsiName = {\n    'Chrome': CHROME,\n    'Chromium': CHROME,\n    'Opera': OPERA,\n    'Firefox': FIREFOX,\n    'Internet Explorer': INTERNET_EXPLORER,\n    'Safari': SAFARI\n};\n\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\nfunction _detectChromiumBased() {\n    const userAgent = navigator.userAgent;\n    const browserInfo = {\n        name: UNKNOWN,\n        version: undefined\n    };\n\n    if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n        // Edge is currenly supported only on desktop and android.\n        if (userAgent.match(/Edg(A?)/)) {\n            // Compare the underlying chromium version.\n            const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n            if (Number.parseInt(version, 10) > 72) {\n                browserInfo.name = CHROME;\n                browserInfo.version = version;\n            }\n        } else {\n            browserInfo.name = CHROME;\n            browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n        }\n    }\n\n    return browserInfo;\n}\n\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\nfunction _detectElectron() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/Electron/)) {\n        const version = userAgent.match(/Electron(?:\\s|\\/)([\\d.]+)/)[1];\n\n        return {\n            name: ELECTRON,\n            version\n        };\n    } else if (typeof window.JitsiMeetElectron !== 'undefined') {\n        return {\n            name: ELECTRON,\n            version: undefined\n        };\n    }\n}\n\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\nfunction _detectNWJS() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/JitsiMeetNW/)) {\n        const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n\n        return {\n            name: NWJS,\n            version\n        };\n    }\n}\n\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\nfunction _detectReactNative() {\n    const match\n        = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n    let version;\n\n    // If we're remote debugging a React Native app, it may be treated as\n    // Chrome. Check navigator.product as well and always return some version\n    // even if we can't get the real one.\n\n    if (match || navigator.product === 'ReactNative') {\n        let name;\n\n        if (match && match.length > 2) {\n            name = match[1];\n            version = match[2];\n        }\n        name || (name = 'react-native');\n        version || (version = 'unknown');\n\n        return {\n            name: REACT_NATIVE,\n            version\n        };\n    }\n}\n\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\nfunction _detect(bowser) {\n    let browserInfo;\n    const detectors = [\n        _detectReactNative,\n        _detectElectron,\n        _detectNWJS\n    ];\n\n    // Try all browser detectors\n    for (let i = 0; i < detectors.length; i++) {\n        browserInfo = detectors[i]();\n        if (browserInfo) {\n            return browserInfo;\n        }\n    }\n\n    const name = bowser.getBrowserName();\n\n    if (name in bowserNameToJitsiName) {\n        return {\n            name: bowserNameToJitsiName[name],\n            version: bowser.getBrowserVersion()\n        };\n    }\n\n    // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n    browserInfo = _detectChromiumBased();\n    if (browserInfo) {\n        return browserInfo;\n    }\n\n    return {\n        name: UNKNOWN,\n        version: undefined\n    };\n}\n\n/**\n * Implements browser detection.\n */\nexport default class BrowserDetection {\n    /**\n     * Creates new BrowserDetection instance.\n     *\n     * @param {Object} [browserInfo] - Information about the browser.\n     * @param {string} browserInfo.name - The name of the browser.\n     * @param {string} browserInfo.version - The version of the browser.\n     */\n    constructor(browserInfo) {\n        let name, version;\n\n        this._bowser = Bowser.getParser(navigator.userAgent);\n        if (typeof browserInfo === 'undefined') {\n            const detectedBrowserInfo = _detect(this._bowser);\n\n            name = detectedBrowserInfo.name;\n            version = detectedBrowserInfo.version;\n        } else if (browserInfo.name in bowserNameToJitsiName) {\n            name = bowserNameToJitsiName[browserInfo.name];\n            version = browserInfo.version;\n        } else {\n            name = UNKNOWN;\n            version = undefined;\n        }\n\n        this._name = name;\n        this._version = version;\n    }\n\n    /**\n     * Gets current browser name.\n     * @returns {string}\n     */\n    getName() {\n        return this._name;\n    }\n\n    /**\n     * Checks if current browser is Chrome.\n     * @returns {boolean}\n     */\n    isChrome() {\n        return this._name === CHROME;\n    }\n\n    /**\n     * Checks if current browser is Opera.\n     * @returns {boolean}\n     */\n    isOpera() {\n        return this._name === OPERA;\n    }\n\n    /**\n     * Checks if current browser is Firefox.\n     * @returns {boolean}\n     */\n    isFirefox() {\n        return this._name === FIREFOX;\n    }\n\n    /**\n     * Checks if current browser is Internet Explorer.\n     * @returns {boolean}\n     */\n    isIExplorer() {\n        return this._name === INTERNET_EXPLORER;\n    }\n\n    /**\n     * Checks if current browser is Safari.\n     * @returns {boolean}\n     */\n    isSafari() {\n        return this._name === SAFARI;\n    }\n\n    /**\n     * Checks if current environment is NWJS.\n     * @returns {boolean}\n     */\n    isNWJS() {\n        return this._name === NWJS;\n    }\n\n    /**\n     * Checks if current environment is Electron.\n     * @returns {boolean}\n     */\n    isElectron() {\n        return this._name === ELECTRON;\n    }\n\n    /**\n     * Checks if current environment is React Native.\n     * @returns {boolean}\n     */\n    isReactNative() {\n        return this._name === REACT_NATIVE;\n    }\n\n    /**\n     * Returns the version of the current browser.\n     * @returns {string}\n     */\n    getVersion() {\n        return this._version;\n    }\n\n    /**\n     * Check if the parsed browser matches the passed condition.\n     *\n     * @param {Object} checkTree - It's one or two layered object, which can include a\n     * platform or an OS on the first layer and should have browsers specs on the\n     * bottom layer.\n     * Eg. { chrome: '>71.1.0' }\n     *     { windows: { chrome: '<70.2' } }\n     * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n     * conditions, false if not and undefined when the browser is not defined in the\n     * checktree object or when the current browser's version is unknown.\n     * @private\n     */\n    _checkCondition(checkTree) {\n        if (this._version) {\n            return this._bowser.satisfies(checkTree);\n        }\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * greater than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionGreaterThan(version) {\n        return this._checkCondition({ [this._name]: `>${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * lower than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionLessThan(version) {\n        return this._checkCondition({ [this._name]: `<${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * equal to the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     * A loose-equality operator is used here so that it matches the sub-versions as well.\n     */\n    isVersionEqualTo(version) {\n        return this._checkCondition({ [this._name]: `~${version}` });\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * Dummy implementation of Storage interface.\n */\nclass DummyLocalStorage extends EventEmitter {\n\n    /**\n     * The object used for storage.\n     */\n    _storage = {};\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage = {};\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return Object.keys(this._storage).length;\n    }\n\n    /**\n     * Will return that key's value associated to the passed key name.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {*} - The key value.\n     */\n    getItem(keyName) {\n        return this._storage[keyName];\n    }\n\n    /**\n     * When passed a key name and value, will add that key to the storage,\n     * or update that key's value if it already exists.\n     *\n     * @param {string} keyName - The key name.\n     * @param {*} keyValue - The key value.\n     * @returns {void}\n     */\n    setItem(keyName, keyValue) {\n        this._storage[keyName] = keyValue;\n    }\n\n    /**\n     * When passed a key name, will remove that key from the storage.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {void}\n     */\n    removeItem(keyName) {\n        delete this._storage[keyName];\n    }\n\n    /**\n     * When passed a number n, this method will return the name of the nth key in the storage.\n     *\n     * @param {number} idx - The index of the key.\n     * @returns {string} - The nth key name.\n     */\n    key(n) {\n        const keys = Object.keys(this._storage);\n\n        if (keys.length <= n) {\n            return undefined;\n        }\n\n        return keys[n];\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @returns {string} - The serialized content.\n     */\n    serialize() {\n        return JSON.stringify(this._storage);\n    }\n}\n\n/**\n * Wrapper class for browser's local storage object.\n */\nclass JitsiLocalStorage extends EventEmitter {\n    /**\n     * @constructor\n     * @param {Storage} storage browser's local storage object.\n     */\n    constructor() {\n        super();\n\n        try {\n            this._storage = window.localStorage;\n            this._localStorageDisabled = false;\n        } catch (ignore) {\n            // localStorage throws an exception.\n        }\n\n        if (!this._storage) { // Handles the case when window.localStorage is undefined or throws an exception.\n            console.warn('Local storage is disabled.');\n            this._storage = new DummyLocalStorage();\n            this._localStorageDisabled = true;\n        }\n    }\n\n    /**\n     * Returns true if window.localStorage is disabled and false otherwise.\n     *\n     * @returns {boolean} - True if window.localStorage is disabled and false otherwise.\n     */\n    isLocalStorageDisabled() {\n        return this._localStorageDisabled;\n    }\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage.clear();\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return this._storage.length;\n    }\n\n    /**\n     * Returns that passed key's value.\n     * @param {string} keyName the name of the key you want to retrieve\n     * the value of.\n     * @returns {String|null} the value of the key. If the key does not exist,\n     * null is returned.\n     */\n    getItem(keyName) {\n        return this._storage.getItem(keyName);\n    }\n\n    /**\n     * Adds a key to the storage, or update key's value if it already exists.\n     * @param {string} keyName - the name of the key you want to create/update.\n     * @param {string} keyValue - the value you want to give the key you are\n     * creating/updating.\n     * @param {boolean} dontEmitChangedEvent - If true a changed event won't be emitted.\n     */\n    setItem(keyName, keyValue, dontEmitChangedEvent = false) {\n        this._storage.setItem(keyName, keyValue);\n\n        if (!dontEmitChangedEvent) {\n            this.emit('changed');\n        }\n    }\n\n    /**\n     * Remove a key from the storage.\n     * @param {string} keyName the name of the key you want to remove.\n     */\n    removeItem(keyName) {\n        this._storage.removeItem(keyName);\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the name of the nth key in the list, or null if n is greater\n     * than or equal to the number of key/value pairs in the object.\n     *\n     * @param {number} i - The index of the key in the list.\n     * @returns {string}\n     */\n    key(i) {\n        return this._storage.key(i);\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @returns {string} - The serialized content.\n     */\n    serialize() {\n        if (this.isLocalStorageDisabled()) {\n            return this._storage.serialize();\n        }\n\n        const length = this._storage.length;\n        const localStorageContent = {};\n\n        for (let i = 0; i < length; i++) {\n            const key = this._storage.key(i);\n\n            localStorageContent[key] = this._storage.getItem(key);\n        }\n\n        return JSON.stringify(localStorageContent);\n    }\n}\n\nexport const jitsiLocalStorage = new JitsiLocalStorage();\n","import { BrowserDetection } from '@jitsi/js-utils';\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\n/* Minimum required Chrome / Chromium version. This applies also to derivatives. */\nconst MIN_REQUIRED_CHROME_VERSION = 72;\nconst MIN_REQUIRED_SAFARI_VERSION = 14;\nconst MIN_REQUIRED_IOS_VERSION = 14;\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from the <tt>PeerConnection</tt> and disposed on video\n     * mute (in order to turn off the camera device). This is needed on Firefox because of the following bug\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=1735951\n     *\n     * @return {boolean} <tt>true</tt> if the current browser supports this strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return this.isChromiumBased() || this.isWebKitBased() || this.isFirefox();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, i.e., it's either Chrome / Chromium or uses it as its engine,\n     * but doesn't identify as Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium.\n     * - Other browsers which use the Chrome engine, but are detected as Chrome, such as Brave and Vivaldi.\n     * - Browsers which are NOT Chrome but use it as their engine, and have custom detection code: Opera, Electron\n     *   and NW.JS.\n     * This excludes\n     * - Chrome on iOS since it uses WKWebView.\n     */\n    isChromiumBased() {\n        return (this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera())\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current platform is iOS.\n     *\n     * @returns {boolean}\n     */\n    isIosBrowser() {\n        const { userAgent, maxTouchPoints, platform } = navigator;\n\n        return Boolean(userAgent.match(/iP(ad|hone|od)/i))\n            || (maxTouchPoints && maxTouchPoints > 2 && /MacIntel/.test(platform));\n    }\n\n    /**\n     * Checks if the current browser is WebKit based. It's either\n     * Safari or uses WebKit as its engine.\n     *\n     * This includes Chrome and Firefox on iOS\n     *\n     * @returns {boolean}\n     */\n    isWebKitBased() {\n        // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n        return this._bowser.isEngine('webkit')\n            && typeof navigator.mediaDevices !== 'undefined'\n            && typeof navigator.mediaDevices.getUserMedia !== 'undefined'\n            && typeof window.RTCRtpTransceiver !== 'undefined'\n            // eslint-disable-next-line no-undef\n            && Object.keys(RTCRtpTransceiver.prototype).indexOf('currentDirection') > -1;\n    }\n\n    /**\n     * Checks whether current running context is a Trusted Web Application.\n     *\n     * @returns {boolean} Whether the current context is a TWA.\n     */\n    isTwa() {\n        return 'matchMedia' in window && window.matchMedia('(display-mode:standalone)').matches;\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        if (this.isSafari() && this._getSafariVersion() < MIN_REQUIRED_SAFARI_VERSION) {\n            return false;\n        }\n\n        return (this.isChromiumBased() && this._getChromiumBasedVersion() >= MIN_REQUIRED_CHROME_VERSION)\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isWebKitBased();\n    }\n\n    /**\n     * Returns whether the browser is supported for Android\n     * @returns {boolean} true if the browser is supported for Android devices\n     */\n    isSupportedAndroidBrowser() {\n        return this.isChromiumBased() || this.isFirefox();\n    }\n\n    /**\n     * Returns whether the browser is supported for iOS\n     * @returns {boolean} true if the browser is supported for iOS devices\n     */\n    isSupportedIOSBrowser() {\n        return this._getIOSVersion() >= MIN_REQUIRED_IOS_VERSION;\n    }\n\n    /**\n     * Returns whether or not the current environment needs a user interaction\n     * with the page before any unmute can occur.\n     *\n     * @returns {boolean}\n     */\n    isUserInteractionRequiredForUnmute() {\n        return this.isFirefox() && this.isVersionLessThan('68');\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports setting codec preferences on the transceiver.\n     * @returns {boolean}\n     */\n    supportsCodecPreferences() {\n        return Boolean(window.RTCRtpTransceiver\n            && 'setCodecPreferences' in window.RTCRtpTransceiver.prototype\n            && window.RTCRtpReceiver\n            && typeof window.RTCRtpReceiver.getCapabilities !== 'undefined')\n\n            // this is not working on Safari because of the following bug\n            // https://bugs.webkit.org/show_bug.cgi?id=215567\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports the Long Tasks API that lets us observe\n     * performance measurement events and be notified of tasks that take longer than\n     * 50ms to execute on the main thread.\n     */\n    supportsPerformanceObserver() {\n        return typeof window.PerformanceObserver !== 'undefined'\n            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;\n    }\n\n    /**\n     * Checks if the current browser supports audio level stats on the receivers.\n     */\n    supportsReceiverStats() {\n        return typeof window.RTCRtpReceiver !== 'undefined'\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1\n\n            // Disable this on Safari because it is reporting 0.000001 as the audio levels for all\n            // remote audio tracks.\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox();\n    }\n\n    /**\n     * Returns true if VP9 is supported by the client on the browser. VP9 is currently disabled on Firefox and Safari\n     * because of issues with rendering. Please check https://bugzilla.mozilla.org/show_bug.cgi?id=1492500,\n     * https://bugs.webkit.org/show_bug.cgi?id=231071 and https://bugs.webkit.org/show_bug.cgi?id=231074 for details.\n     */\n    supportsVP9() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses SDP munging for turning on simulcast.\n     *\n     * @returns {boolean}\n     */\n    usesSdpMungingForSimulcast() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\n     * to the bridge instead of the ssrcs.\n     */\n    usesRidsForSimulcast() {\n        return false;\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports WebRTC Encoded Transform, an alternative\n     * to insertable streams.\n     *\n     * NOTE: At the time of this writing the only browser supporting this is\n     * Safari / WebKit, behind a flag.\n     *\n     * @returns {boolean} {@code true} if the browser supports it.\n     */\n    supportsEncodedTransform() {\n        return Boolean(window.RTCRtpScriptTransform);\n    }\n\n    /**\n     * Checks if the browser supports insertable streams, needed for E2EE.\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\n     */\n    supportsInsertableStreams() {\n        if (!(typeof window.RTCRtpSender !== 'undefined'\n            && window.RTCRtpSender.prototype.createEncodedStreams)) {\n            return false;\n        }\n\n        // Feature-detect transferable streams which we need to operate in a worker.\n        // See https://groups.google.com/a/chromium.org/g/blink-dev/c/1LStSgBt6AM/m/hj0odB8pCAAJ\n        const stream = new ReadableStream();\n\n        try {\n            window.postMessage(stream, '*', [ stream ]);\n\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Whether the browser supports the RED format for audio.\n     */\n    supportsAudioRed() {\n        return Boolean(window.RTCRtpSender\n            && window.RTCRtpSender.getCapabilities\n            && window.RTCRtpSender.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red')\n            && window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red'));\n    }\n\n    /**\n     * Checks if the browser supports unified plan.\n     *\n     * @returns {boolean}\n     */\n    supportsUnifiedPlan() {\n        // We do not want to enable unified plan on Electron clients that have Chromium version < 96 because of\n        // performance and screensharing issues.\n        return !(this.isReactNative() || (this.isElectron() && (this._getChromiumBasedVersion() < 96)));\n    }\n\n    /**\n     * Checks if the browser supports voice activity detection via the @type {VADAudioAnalyser} service.\n     *\n     * @returns {boolean}\n     */\n    supportsVADDetection() {\n        return this.isChromiumBased();\n    }\n\n    /**\n     * Check if the browser supports the RTP RTX feature (and it is usable).\n     *\n     * @returns {boolean}\n     */\n    supportsRTX() {\n        // Disable RTX on Firefox up to 96 because we prefer simulcast over RTX\n        // see https://bugzilla.mozilla.org/show_bug.cgi?id=1738504\n        return !(this.isFirefox() && this.isVersionLessThan('96'));\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of a Safari browser.\n     *\n     * @returns {Number}\n     */\n    _getSafariVersion() {\n        if (this.isSafari()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of an ios browser.\n     *\n     * @returns {Number}\n     */\n    _getIOSVersion() {\n        if (this.isWebKitBased()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n}\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection to the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     * @param {object} options.configParams the set of parameters\n     * to enable/disable certain features in the library. See CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            const configParams = { ...options.configParams };\n\n            if (options.applicationName) {\n                configParams.applicationVersion = `${options.applicationName} (${browser.getName()})`;\n            }\n\n            if (options.confID) {\n                // we first check is there a tenant in the confID\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\n\n                // if there is no tenant, we will just set '/'\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\n\n            if (getWiFiStatsMethod) {\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\n\n                getWiFiStatsMethod().then(result => {\n                    if (result) {\n                        logger.info('Reported wifi addresses:'\n                            , JSON.parse(result).addresses);\n                    }\n                })\n                .catch(() => {});// eslint-disable-line no-empty-function\n            }\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        return new Promise((resolve, reject) => {\n            if (CallStats.backend) {\n                CallStats.backend.sendUserFeedback(\n                    conferenceID,\n                    {\n                        userID: CallStats.userID,\n                        overall,\n                        comment\n                    },\n                    (status, message) => {\n                        if (status === 'success') {\n                            resolve(message);\n                        } else {\n                            reject(message);\n                        }\n                    });\n            } else {\n                const reason = 'Failed to submit feedback to CallStats - no backend';\n\n                logger.error(reason);\n                reject(reason);\n            }\n        });\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","/**\n * Provides statistics for the local stream.\n */\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\n/**\n * The audio context.\n * @type {AudioContext}\n */\nlet context = null;\n\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n    this.source = null;\n    this.analyser = null;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n\n    context.resume();\n    this.analyser = context.createAnalyser();\n\n    this.analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    this.analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    this.source = context.createMediaStreamSource(this.stream);\n\n    this.source.connect(this.analyser);\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(this.analyser.frequencyBinCount);\n\n            this.analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            // Set the audio levels always as NoAudioSignalDetection now\n            // uses audio levels from LocalStatsCollector and waits for\n            // atleast 4 secs for a no audio signal before displaying the\n            // notification on the UI.\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\n            this.callback(this.audioLevel);\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n\n    this.analyser?.disconnect();\n    this.analyser = null;\n    this.source?.disconnect();\n    this.source = null;\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(window.AudioContext);\n};\n\n/**\n * Disconnects the audio context.\n */\nLocalStatsCollector.disconnectAudioContext = async function() {\n    if (context) {\n        logger.info('Disconnecting audio context');\n        await context.close();\n        context = null;\n    }\n};\n\n/**\n * Connects the audio context.\n */\nLocalStatsCollector.connectAudioContext = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n\n    logger.info('Connecting audio context');\n    context = new AudioContext();\n\n    context.suspend();\n};\n\n/**\n * Initialize the audio context on startup.\n */\nLocalStatsCollector.connectAudioContext();\n","\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n\n/**\n * Calculates the average value of am Array of numbers.\n *\n * @param {Float32Array} valueArray - Array of numbers.\n * @returns {number} - Number array average.\n */\nexport function calculateAverage(valueArray) {\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\n}\n\n/**\n * Calculates a unique hash for a given string similar to Java's\n * implementation of String.hashCode()\n *\n * @param {String} string - String whose hash has to be calculated.\n * @returns {number} - Unique hash code calculated.\n */\nexport function hashString(string) {\n    let hash = 0;\n\n    for (let i = 0; i < string.length; i++) {\n        hash += Math.pow(string.charCodeAt(i) * 31, string.length - i);\n\n        /* eslint-disable no-bitwise */\n        hash = hash & hash; // Convert to 32bit integer\n    }\n\n    return Math.abs(hash);\n}\n\n/**\n * Returns only the positive values from an array of numbers.\n *\n * @param {Float32Array} valueArray - Array of vad scores.\n * @returns {Array} - Array of positive numbers.\n */\nexport function filterPositiveValues(valueArray) {\n    return valueArray.filter(value => value >= 0);\n}\n\n/**\n * This class calculates a simple running average that continually changes\n * as more data points are collected and added.\n */\nexport class RunningAverage {\n    /**\n     * Creates an instance of the running average calculator.\n     */\n    constructor() {\n        this.average = 0;\n        this.n = 0;\n    }\n\n    /**\n     * Adds a new data point to the existing set of values and recomputes\n     * the running average.\n     * @param {number} value\n     * @returns {void}\n     */\n    addNext(value) {\n        if (typeof value !== 'number') {\n            return;\n        }\n        this.n += 1;\n        this.average = this.average + ((value - this.average) / this.n);\n    }\n\n    /**\n     * Obtains the average value for the current subset of values.\n     * @returns {number} - computed average.\n     */\n    getAverage() {\n        return this.average;\n    }\n}\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport { RunningAverage } from '../util/MathUtil';\n\nconst logger = getLogger(__filename);\nconst MILLI_SECONDS = 1000;\nconst SECONDS = 60;\n\n/**\n * This class creates an observer that monitors browser's performance measurement events\n * as they are recorded in the browser's performance timeline and computes an average and\n * a maximum value for the long task events. Tasks are classified as long tasks if they take\n * longer than 50ms to execute on the main thread.\n */\nexport class PerformanceObserverStats {\n    /**\n     * Creates a new instance of Performance observer statistics.\n     *\n     * @param {*} emitter Event emitter for emitting stats periodically\n     * @param {*} statsInterval interval for calculating the stats\n     */\n    constructor(emitter, statsInterval) {\n        this.eventEmitter = emitter;\n        this.longTasks = 0;\n        this.maxDuration = 0;\n        this.performanceStatsInterval = statsInterval;\n        this.stats = new RunningAverage();\n    }\n\n    /**\n     * Obtains the average rate of long tasks observed per min and the\n     * duration of the longest task recorded by the observer.\n     * @returns {Object}\n     */\n    getLongTasksStats() {\n        return {\n            avgRatePerMinute: (this.stats.getAverage() * SECONDS).toFixed(2), // calc rate per min\n            maxDurationMs: this.maxDuration\n        };\n    }\n\n    /**\n     * Starts the performance observer by registering the callback function\n     * that calculates the performance statistics periodically.\n     * @returns {void}\n     */\n    startObserver() {\n        // Create a handler for when the long task event is fired.\n        this.longTaskEventHandler = list => {\n            const entries = list.getEntries();\n\n            for (const task of entries) {\n                this.longTasks++;\n                this.maxDuration = Math.max(this.maxDuration, task.duration).toFixed(3);\n            }\n        };\n\n        // Create an observer for monitoring long tasks.\n        logger.info('Creating a Performance Observer for monitoring Long Tasks');\n        this.observer = new PerformanceObserver(this.longTaskEventHandler);\n        this.observer.observe({ type: 'longtask',\n            buffered: true });\n        const startTime = Date.now();\n\n        // Calculate the average # of events/sec and emit a stats event.\n        this.longTasksIntervalId = setInterval(() => {\n            const now = Date.now();\n            const interval = this._lastTimeStamp\n                ? (now - this._lastTimeStamp) / MILLI_SECONDS\n                : (now - startTime) / MILLI_SECONDS;\n            const rate = this.longTasks / interval;\n\n            this.stats.addNext(rate);\n            this.eventEmitter.emit(\n                StatisticsEvents.LONG_TASKS_STATS, this.getLongTasksStats());\n\n            // Reset the counter and start counting events again.\n            this.longTasks = 0;\n            this._lastTimeStamp = Date.now();\n        }, this.performanceStatsInterval);\n    }\n\n    /**\n     * Stops the performance observer.\n     * @returns {void}\n     */\n    stopObserver() {\n        this.observer && this.observer.disconnect();\n        this.longTaskEventHandler = null;\n        if (this.longTasksIntervalId) {\n            clearInterval(this.longTasksIntervalId);\n            this.longTasksIntervalId = null;\n        }\n    }\n}\n","export enum MediaType {\n    /**\n     * The audio type.\n     */\n    AUDIO = 'audio',\n\n    /**\n     * The presenter type.\n     */\n    PRESENTER = 'presenter',\n\n    /**\n     * The video type.\n     */\n    VIDEO = 'video'\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport browser from '../browser';\n\nconst logger = getLogger('FeatureFlags');\n\n/**\n * A global module for accessing information about different feature flags state.\n */\nclass FeatureFlags {\n    /**\n     * Configures the module.\n     *\n     * @param {object} flags - The feature flags.\n     * @param {boolean=} flags.enableUnifiedOnChrome - Enable unified plan implementation support on Chromium.\n     * @param {boolean=} flags.runInLiteMode - Enables lite mode for testing to disable media decoding.\n     * @param {boolean=} flags.sourceNameSignaling - Enables source names in the signaling.\n     * @param {boolean=} flags.receiveMultipleVideoStreams - Signal support for receiving multiple video streams.\n     */\n    init(flags) {\n        this._receiveMultipleVideoStreams = flags.receiveMultipleVideoStreams ?? true;\n        this._runInLiteMode = Boolean(flags.runInLiteMode);\n        this._sendMultipleVideoStreams = flags.sendMultipleVideoStreams ?? true;\n        this._sourceNameSignaling = flags.sourceNameSignaling ?? true;\n        this._ssrcRewriting = Boolean(flags.ssrcRewritingEnabled);\n\n        // For Chromium, check if Unified plan is enabled.\n        this._usesUnifiedPlan = browser.supportsUnifiedPlan()\n            && (!browser.isChromiumBased() || (flags.enableUnifiedOnChrome ?? true));\n\n        logger.info(`Source name signaling: ${this._sourceNameSignaling},`\n            + ` Send multiple video streams: ${this._sendMultipleVideoStreams},`\n            + ` uses Unified plan: ${this._usesUnifiedPlan}`);\n    }\n\n    /**\n     * Checks if multiple local video streams support is enabled.\n     *\n     * @returns {boolean}\n     */\n    isMultiStreamSupportEnabled() {\n        return this._sourceNameSignaling && this._sendMultipleVideoStreams && this._usesUnifiedPlan;\n    }\n\n    /**\n     * Checks if receiving multiple video streams is supported.\n     *\n     * @returns {boolean}\n     */\n    isReceiveMultipleVideoStreamsSupported() {\n        return this._receiveMultipleVideoStreams;\n    }\n\n    /**\n     * Checks if the run in lite mode is enabled.\n     * This will cause any media to be received and not decoded. (Directions are inactive and no ssrc and ssrc-groups\n     * are added to the remote description). This can be used for various test scenarios.\n     *\n     * @returns {boolean}\n     */\n    isRunInLiteModeEnabled() {\n        return this._runInLiteMode;\n    }\n\n    /**\n     * Checks if the source name signaling is enabled.\n     *\n     * @returns {boolean}\n     */\n    isSourceNameSignalingEnabled() {\n        return this._sourceNameSignaling;\n    }\n\n    /**\n     * Checks if the clients supports re-writing of the SSRCs on the media streams by the bridge.\n     * @returns {boolean}\n     */\n    isSsrcRewritingSupported() {\n        return this._ssrcRewriting;\n    }\n}\n\nexport default new FeatureFlags();\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n    this.codec = '';\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\nSsrcStats.prototype.setCodec = function(codec) {\n    this.codec = codec || '';\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(peerconnection, audioLevelsInterval, statsInterval, eventEmitter) {\n    this.peerconnection = peerconnection;\n    this.baselineAudioLevelsReport = null;\n    this.currentAudioLevelsReport = null;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelReportHistory = {};\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.speakerList = [];\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/**\n * Set the list of the remote speakers for which audio levels are to be calculated.\n *\n * @param {Array<string>} speakerList - Endpoint ids.\n * @returns {void}\n */\nStatsCollector.prototype.setSpeakerList = function(speakerList) {\n    this.speakerList = speakerList;\n};\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    if (startAudioLevelStats) {\n        if (browser.supportsReceiverStats()) {\n            logger.info('Using RTCRtpSynchronizationSource for remote audio levels');\n        }\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                if (browser.supportsReceiverStats()) {\n                    const audioLevels = this.peerconnection.getAudioLevels(this.speakerList);\n\n                    for (const ssrc in audioLevels) {\n                        if (audioLevels.hasOwnProperty(ssrc)) {\n                            // Use a scaling factor of 2.5 to report the same\n                            // audio levels that getStats reports.\n                            const audioLevel = audioLevels[ssrc] * 2.5;\n\n                            this.eventEmitter.emit(\n                                StatisticsEvents.AUDIO_LEVEL,\n                                this.peerconnection,\n                                Number.parseInt(ssrc, 10),\n                                audioLevel,\n                                false /* isLocal */);\n                        }\n                    }\n                } else {\n                    // Interval updates\n                    this.peerconnection.getStats()\n                        .then(report => {\n                            this.currentAudioLevelsReport = typeof report?.result === 'function'\n                                ? report.result()\n                                : report;\n                            this.processAudioLevelReport();\n                            this.baselineAudioLevelsReport = this.currentAudioLevelsReport;\n                        })\n                        .catch(error => this.errorCallback(error));\n                }\n            },\n            this.audioLevelsIntervalMilis\n        );\n    }\n\n    const processStats = () => {\n        // Interval updates\n        this.peerconnection.getStats()\n            .then(report => {\n                this.currentStatsReport = typeof report?.result === 'function'\n                    ? report.result()\n                    : report;\n\n                try {\n                    this.processStatsReport();\n                } catch (error) {\n                    GlobalOnErrorHandler.callErrorHandler(error);\n                    logger.error('Processing of RTP stats failed:', error);\n                }\n                this.previousStatsReport = this.currentStatsReport;\n            })\n            .catch(error => this.errorCallback(error));\n    };\n\n    processStats();\n    this.statsIntervalId = setInterval(processStats, this.statsIntervalMilis);\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    const codecs = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let audioCodec;\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n    let videoCodec;\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (track) {\n            if (track.isAudioTrack()) {\n                audioBitrateDownload += ssrcStats.bitrate.download;\n                audioBitrateUpload += ssrcStats.bitrate.upload;\n                audioCodec = ssrcStats.codec;\n            } else {\n                videoBitrateDownload += ssrcStats.bitrate.download;\n                videoBitrateUpload += ssrcStats.bitrate.upload;\n                videoCodec = ssrcStats.codec;\n            }\n\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                const sourceName = track.getSourceName();\n\n                if (sourceName) {\n                    const resolution = ssrcStats.resolution;\n\n                    if (resolution.width // eslint-disable-line max-depth\n                            && resolution.height\n                            && resolution.width !== -1\n                            && resolution.height !== -1) {\n                        resolutions[sourceName] = resolution;\n                    }\n                    if (ssrcStats.framerate !== 0) { // eslint-disable-line max-depth\n                        framerates[sourceName] = ssrcStats.framerate;\n                    }\n                    if (audioCodec && videoCodec) { // eslint-disable-line max-depth\n                        const codecDesc = {\n                            'audio': audioCodec,\n                            'video': videoCodec\n                        };\n\n                        codecs[sourceName] = codecDesc;\n                    }\n                } else {\n                    logger.error(`No source name returned by ${track}`);\n                }\n            } else {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    const resolution = ssrcStats.resolution;\n\n                    if (resolution.width // eslint-disable-line max-depth\n                            && resolution.height\n                            && resolution.width !== -1\n                            && resolution.height !== -1) {\n                        const userResolutions = resolutions[participantId] || {};\n\n                        userResolutions[ssrc] = resolution;\n                        resolutions[participantId] = userResolutions;\n                    }\n                    if (ssrcStats.framerate !== 0) { // eslint-disable-line max-depth\n                        const userFramerates = framerates[participantId] || {};\n\n                        userFramerates[ssrc] = ssrcStats.framerate;\n                        framerates[participantId] = userFramerates;\n                    }\n                    if (audioCodec && videoCodec) { // eslint-disable-line max-depth\n                        const codecDesc = {\n                            'audio': audioCodec,\n                            'video': videoCodec\n                        };\n\n                        const userCodecs = codecs[participantId] || {};\n\n                        userCodecs[ssrc] = codecDesc;\n                        codecs[participantId] = userCodecs;\n                    }\n                } else {\n                    logger.error(`No participant ID returned by ${track}`);\n                }\n            }\n        }\n\n        ssrcStats.resetBitrate();\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    const avgAudioLevels = {};\n    let localAvgAudioLevels;\n\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\n\n        if (isLocal) {\n            localAvgAudioLevels = avgAudioLevel;\n        } else {\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\n\n            if (track) {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    avgAudioLevels[participantId] = avgAudioLevel;\n                }\n            }\n        }\n    });\n    this.audioLevelReportHistory = {};\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'codec': codecs,\n            'transport': this.conferenceStats.transport,\n            localAvgAudioLevels,\n            avgAudioLevels\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Stats processing for spec-compliant RTCPeerConnection#getStats.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n        // RTCIceCandidatePairStats - https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair' && now.nominated && now.state === 'succeeded') {\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            if (remoteUsedCandidate && localUsedCandidate) {\n                const remoteIpAddress = browser.isChromiumBased()\n                    ? remoteUsedCandidate.ip\n                    : remoteUsedCandidate.address;\n                const remotePort = remoteUsedCandidate.port;\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = browser.isChromiumBased()\n                    ? localUsedCandidate.ip\n                    : localUsedCandidate.address;\n                const localPort = localUsedCandidate.port;\n                const localip = `${localIpAddress}:${localPort}`;\n                const type = remoteUsedCandidate.protocol;\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(t =>\n                    t.ip === ip\n                    && t.type === type\n                    && t.localip === localip)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localip,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const before = this.previousStatsReport.get(now.id);\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!before || !ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            const packetsBefore = this.getNonNegativeValue(before[key]);\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n            const packetsLostNow = this.getNonNegativeValue(now.packetsLost);\n            const packetsLostBefore = this.getNonNegativeValue(before.packetsLost);\n            const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n            ssrcStats.setLoss({\n                packetsTotal: packetsDiff + packetsLostDiff,\n                packetsLost: packetsLostDiff,\n                isDownloadStream\n            });\n\n            // Get the resolution and framerate for only remote video sources here. For the local video sources,\n            // 'track' stats will be used since they have the updated resolution based on the simulcast streams\n            // currently being sent. Promise based getStats reports three 'outbound-rtp' streams and there will be\n            // more calculations needed to determine what is the highest resolution stream sent by the client if the\n            // 'outbound-rtp' stats are used.\n            if (now.type === 'inbound-rtp') {\n                const resolution = {\n                    height: now.frameHeight,\n                    width: now.frameWidth\n                };\n                const frameRate = now.framesPerSecond;\n\n                if (resolution.height && resolution.width) {\n                    ssrcStats.setResolution(resolution);\n                }\n                ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n            } else {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(now, before, 'bytesSent')\n                });\n            }\n\n            const codec = this.currentStatsReport.get(now.codecId);\n\n            if (codec) {\n                /**\n                 * The mime type has the following form: video/VP8 or audio/ISAC,\n                 * so we what to keep just the type after the '/', audio and video\n                 * keys will be added on the processing side.\n                 */\n                const codecShortType = codec.mimeType.split('/')[1];\n\n                codecShortType && ssrcStats.setCodec(codecShortType);\n            }\n\n        // Use track stats for resolution and framerate of the local video source.\n        // RTCVideoHandlerStats - https://w3c.github.io/webrtc-stats/#vststats-dict*\n        // RTCMediaHandlerStats - https://w3c.github.io/webrtc-stats/#mststats-dict*\n        } else if (now.type === 'track' && now.kind === MediaType.VIDEO && !now.remoteSource) {\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n            const localVideoTracks = this.peerconnection.getLocalTracks(MediaType.VIDEO);\n\n            if (!localVideoTracks?.length) {\n                return;\n            }\n\n            const ssrc = this.peerconnection.getSsrcByTrackId(now.trackIdentifier);\n\n            if (!ssrc) {\n                return;\n            }\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            }\n\n            // Calculate the frame rate. 'framesSent' is the total aggregate value for all the simulcast streams.\n            // Therefore, it needs to be divided by the total number of active simulcast streams.\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate) {\n                const before = this.previousStatsReport.get(now.id);\n\n                if (before) {\n                    const timeMs = now.timestamp - before.timestamp;\n\n                    if (timeMs > 0 && now.framesSent) {\n                        const numberOfFramesSinceBefore = now.framesSent - before.framesSent;\n\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                    }\n                }\n\n                if (!frameRate) {\n                    return;\n                }\n            }\n\n            // Get the number of simulcast streams currently enabled from TPC.\n            const numberOfActiveStreams = this.peerconnection.getActiveSimulcastStreams();\n\n            // Reset frame rate to 0 when video is suspended as a result of endpoint falling out of last-n.\n            frameRate = numberOfActiveStreams ? Math.round(frameRate / numberOfActiveStreams) : 0;\n            ssrcStats.setFramerate(frameRate);\n        }\n    });\n\n    this.eventEmitter.emit(StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n    this._processAndEmitReport();\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    this.currentAudioLevelsReport.forEach(now => {\n        if (now.type !== 'track') {\n            return;\n        }\n\n        // Audio level\n        const audioLevel = now.audioLevel;\n\n        if (!audioLevel) {\n            return;\n        }\n\n        const trackIdentifier = now.trackIdentifier;\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n        if (ssrc) {\n            const isLocal\n                = ssrc === this.peerconnection.getLocalSSRC(\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    });\n};\n\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport { JitsiTrackEvents } from '../../JitsiTrackEvents';\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport { PerformanceObserverStats } from './PerformanceObserverStats';\nimport RTPStats from './RTPStatsCollector';\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.userName,\n        aliasName: options.aliasName,\n        applicationName: options.applicationName,\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\n        confID: options.confID,\n        siteID: options.siteID,\n        configParams: options.configParams\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n    if (typeof options.pcStatsInterval === 'number') {\n        Statistics.pcStatsInterval = options.pcStatsInterval;\n    }\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    if (typeof options.longTasksStatsInterval === 'number') {\n        Statistics.longTasksStatsInterval = options.longTasksStatsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} aliasName - The alias name to use when initializing callstats.\n * @property {string} userName - The user name to use when initializing callstats.\n * @property {string} confID - The callstats conference ID to use.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n * @property {string} configParams - The set of parameters\n * to enable/disable certain features in the library. See CallStats docs for more info.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options) {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret && this.options.enableCallStats\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        this.callStatsApplicationLogsDisabled\n            = this.options.callStatsApplicationLogsDisabled;\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.confID) {\n            logger.warn('\"confID\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.pcStatsInterval = 10000;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                Statistics.pcStatsInterval,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(track, callback) {\n    if (browser.isIosBrowser()) {\n        // On iOS browsers audio is lost if the audio input device is in use by another app\n        // https://bugs.webkit.org/show_bug.cgi?id=233473\n        // The culprit was using the AudioContext, so now we close the AudioContext during\n        // the track being muted, and re-instantiate it afterwards.\n        track.addEventListener(\n        JitsiTrackEvents.NO_DATA_FROM_SOURCE,\n\n        /**\n         * Closes AudioContext on no audio data, and enables it on data received again.\n         *\n         * @param {boolean} value - Whether we receive audio data or not.\n         */\n        async value => {\n            if (value) {\n                for (const localStat of Statistics.localStats) {\n                    localStat.stop();\n                }\n\n                await LocalStats.disconnectAudioContext();\n            } else {\n                LocalStats.connectAudioContext();\n                for (const localStat of Statistics.localStats) {\n                    localStat.start();\n                }\n            }\n        });\n    }\n\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    track.addEventListener(\n        JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n        () => {\n            Statistics.stopLocalStats(track);\n        });\n\n    const stream = track.getOriginalStream();\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\n/**\n * Add a listener that would be notified on a LONG_TASKS_STATS event.\n *\n * @param {Function} listener a function that would be called when notified.\n * @returns {void}\n */\nStatistics.prototype.addLongTasksStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Creates an instance of {@link PerformanceObserverStats} and starts the\n * observer that records the stats periodically.\n *\n * @returns {void}\n */\nStatistics.prototype.attachLongTasksStats = function(conference) {\n    if (!browser.supportsPerformanceObserver()) {\n        logger.warn('Performance observer for long tasks not supported by browser!');\n\n        return;\n    }\n\n    this.performanceObserverStats = new PerformanceObserverStats(\n        this.eventEmitter,\n        Statistics.longTasksStatsInterval);\n\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_JOINED,\n        () => this.performanceObserverStats.startObserver());\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_LEFT,\n        () => this.performanceObserverStats.stopObserver());\n};\n\n/**\n * Obtains the current value of the LongTasks event statistics.\n *\n * @returns {Object|null} stats object if the observer has been\n * created, null otherwise.\n */\nStatistics.prototype.getLongTasksStats = function() {\n    return this.performanceObserverStats\n        ? this.performanceObserverStats.getLongTasksStats()\n        : null;\n};\n\n/**\n * Removes the given listener for the LONG_TASKS_STATS event.\n *\n * @param {Function} listener the listener we want to remove.\n * @returns {void}\n */\nStatistics.prototype.removeLongTasksStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Updates the list of speakers for which the audio levels are to be calculated. This is needed for the jvb pc only.\n *\n * @param {Array<string>} speakerList The list of remote endpoint ids.\n * @returns {void}\n */\nStatistics.prototype.setSpeakerList = function(speakerList) {\n    for (const rtpStats of Array.from(this.rtpStatsMap.values())) {\n        if (!rtpStats.peerconnection.isP2P) {\n            rtpStats.setSpeakerList(speakerList);\n        }\n    }\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(track) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    const stream = track.getOriginalStream();\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n    let confID = this.options.confID;\n\n    // confID - domain/tenant/roomName\n    // roomName - meeting name or breakout room ID\n    // For breakout rooms we change the conference ID used for callstats to use\n    // the room ID instead of the meeting name\n    if (!confID.endsWith(this.options.roomName)) {\n        confID = `${this.options.confID.slice(0, this.options.confID.lastIndexOf('/'))}/${this.options.roomName}`;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID,\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n * @param {boolean} silence - Whether the dominant speaker is silent or not.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid, silence) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid, silence);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callStatsApplicationLogsDisabled) {\n            return;\n        }\n\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n * @returns {Promise} Resolves when callstats feedback has been submitted\n * successfully.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    // Statistics.analytics.sendEvent is currently fire and forget, without\n    // confirmation of successful send.\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n};\n","import { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { SPEAKERS_AUDIO_LEVELS } from './modules/statistics/constants';\nimport Statistics from './modules/statistics/statistics';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport { VideoType } from './service/RTC/VideoType';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, (from, features) => {\n        const participant = conference.getParticipantById(Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            participant.setFeatures(features);\n            conference.eventEmitter.emit(JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED, participant);\n        }\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.AUDIO));\n\n            conference.mutedByFocusActor = actor;\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                    conference.mutedByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedByFocusActor = null;\n                        logger.warn(\n                            'Error while audio muting due to focus request', error);\n                    });\n        }\n    );\n\n    chatRoom.addListener(XMPPEvents.VIDEO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.VIDEO));\n\n            conference.mutedVideoByFocusActor = actor;\n\n            // set isVideoMutedByFocus when setVideoMute Promise ends\n            conference.rtc.setVideoMute(true).then(\n                () => {\n                    conference.isVideoMutedByFocus = true;\n                    conference.mutedVideoByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedVideoByFocusActor = null;\n                        logger.warn(\n                            'Error while video muting due to focus request', error);\n                    });\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOIN_IN_PROGRESS,\n        JitsiConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MEETING_ID_SET,\n        JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference._onMucJoined();\n\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\n        if (!session.isP2P) {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n        }\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n    chatRoom.addListener(XMPPEvents.ROOM_MAX_USERS_ERROR, () => conference.leave());\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_RESTARTED,\n        jingleSession => {\n            conference._onConferenceRestarted(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n    chatRoom.addListener(XMPPEvents.RESERVATION_ERROR, () => conference.leave());\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n    chatRoom.addListener(XMPPEvents.MUC_DESTROYED, () => conference.leave());\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.SETTINGS_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.SETTINGS_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\n        (session, jid) => {\n\n            if (jid) {\n                const resource = Strophe.getResourceFromJid(jid);\n                const participant = conference.getParticipantById(resource) || resource;\n\n                if (session.getStatus() === 'off') {\n                    session.setTerminator(participant);\n                } else if (session.getStatus() === 'on') {\n                    session.setInitiator(participant);\n                }\n            }\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                session);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    chatRoom.addListener(XMPPEvents.KICKED,\n        conference.onMemberKicked.bind(conference));\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED,\n                    id, payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        let isModerator = false;\n\n        if (conference.myUserId() === from && conference.isModerator()) {\n            isModerator = true;\n        } else {\n            const participant = conference.getParticipantById(from);\n\n            if (participant && participant.isModerator()) {\n                isModerator = true;\n            }\n        }\n\n        if (!isModerator) {\n            return;\n        }\n\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n\n    // Breakout rooms.\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM);\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_UPDATED,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_UPDATED);\n\n    // Room metadata.\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_METADATA_UPDATED,\n        JitsiConferenceEvents.METADATA_UPDATED);\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        (dominant, previous, silence) => {\n            if ((conference.lastDominantSpeaker !== dominant || conference.dominantSpeakerIsSilent !== silence)\n                    && conference.room) {\n                conference.lastDominantSpeaker = dominant;\n                conference.dominantSpeakerIsSilent = silence;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, dominant, previous, silence);\n                if (conference.statistics && conference.myUserId() === dominant) {\n                    // We are the new dominant speaker.\n                    conference.statistics.sendDominantSpeakerEvent(conference.room.roomjid, silence);\n                }\n                if (conference.lastDominantSpeaker !== dominant) {\n                    if (previous && previous.length) {\n                        const speakerList = previous.slice(0);\n\n                        // Add the dominant speaker to the top of the list (exclude self).\n                        if (conference.myUserId !== dominant) {\n                            speakerList.splice(0, 0, dominant);\n                        }\n\n                        // Trim the list to the top 5 speakers only.\n                        if (speakerList.length > SPEAKERS_AUDIO_LEVELS) {\n                            speakerList.splice(SPEAKERS_AUDIO_LEVELS, speakerList.length - SPEAKERS_AUDIO_LEVELS);\n                        }\n                        conference.statistics && conference.statistics.setSpeakerList(speakerList);\n                    }\n                }\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}:\\t`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.ENDPOINT_STATS_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED, participant, payload);\n            } else {\n                logger.warn(`Ignoring ENDPOINT_STATS_RECEIVED for a non-existant participant: ${from}`);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            if (audioMuted) {\n                conference.isMutedByFocus = true;\n            }\n\n            if (videoMuted) {\n                conference.isVideoMutedByFocus = true;\n            }\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\n        createdTimestamp => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_CHANGED,\n        (value, mediaType, actorJid) => {\n            const actorParticipant = conference.getParticipants().find(p => p.getJid() === actorJid);\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_CHANGED, {\n                enabled: value,\n                mediaType,\n                actor: actorParticipant\n            });\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_APPROVED,\n        value => conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_APPROVED, { mediaType: value }));\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_REJECTED,\n        value => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_REJECTED, { mediaType: value });\n        });\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\n    if (!conference.options.config.startSilent) {\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n                const ssrc = tpc.getLocalSSRC(track);\n\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                    return;\n                }\n\n                track.onByteSentStatsReceived(tpc, stats[ssrc]);\n            });\n        });\n    }\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\n\n/**\n * Default value of 2500 milliseconds for {@link ParticipantConnectionStatus.p2pRtcMuteTimeout}.\n */\nconst DEFAULT_P2P_RTC_MUTE_TIMEOUT = 2500;\n\n/**\n * Default value of 10000 milliseconds for {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of lastN\n * should be inactive and when entering lastN it becomes restoring and when\n * data is received from bridge it will become active, but if no data is\n * received for some time we set status of that participant connection to\n * interrupted.\n * @type {number}\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Participant connection statuses.\n *\n * @type {{\n *      ACTIVE: string,\n *      INACTIVE: string,\n *      INTERRUPTED: string,\n *      RESTORING: string\n * }}\n */\nexport const ParticipantConnectionStatus = {\n    /**\n     * Status indicating that connection is currently active.\n     */\n    ACTIVE: 'active',\n\n    /**\n     * Status indicating that connection is currently inactive.\n     * Inactive means the connection was stopped on purpose from the bridge,\n     * like exiting lastN or adaptivity decided to drop video because of not\n     * enough bandwidth.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Status indicating that connection is currently interrupted.\n     */\n    INTERRUPTED: 'interrupted',\n\n    /**\n     * Status indicating that connection is currently restoring.\n     */\n    RESTORING: 'restoring'\n};\n\n/**\n * Class is responsible for emitting\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\n */\nexport default class ParticipantConnectionStatusHandler {\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link ParticipantConnectionStatus} based on\n     * the values given for some specific remote user. It is assumed that\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\n     * data from the user for the last 15 seconds.\n     * @param {boolean} isInLastN indicates whether the user is in the last N\n     * set. When set to false it means that JVB is not sending any video for\n     * the user.\n     * @param {boolean} isRestoringTimedout if true it means that the user has\n     * been outside of last N too long to be considered\n     * {@link ParticipantConnectionStatus.RESTORING}.\n     * @param {boolean} isVideoMuted true if the user is video muted and we\n     * should not expect to receive any video.\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\n     * frozen detection then it will be set to true when the video track is\n     * frozen. If the current browser does not support frozen detection the it's\n     * always false.\n     * @return {ParticipantConnectionStatus} the new connection status for\n     * the user for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isConnectionActiveByJvb,\n            isInLastN,\n            isRestoringTimedout,\n            isVideoMuted,\n            isVideoTrackFrozen) {\n        if (!isConnectionActiveByJvb) {\n            // when there is a connection problem signaled from jvb\n            // it means no media was flowing for at least 15secs, so both audio\n            // and video are most likely interrupted\n            return ParticipantConnectionStatus.INTERRUPTED;\n        } else if (isVideoMuted) {\n            // If the connection is active according to JVB and the user is\n            // video muted there is no way for the connection to be inactive,\n            // because the detection logic below only makes sense for video.\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return ParticipantConnectionStatus.ACTIVE;\n            } else if (isInLastN) {\n                return isRestoringTimedout\n                    ? ParticipantConnectionStatus.INTERRUPTED\n                    : ParticipantConnectionStatus.RESTORING;\n            }\n\n            return ParticipantConnectionStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must\n        // rely on the lastN value\n        return isInLastN\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and\n     * the connection status can be only active or interrupted.\n     * @param {boolean} isVideoMuted the user if video muted\n     * @param {boolean} isVideoTrackFrozen true if the video track for\n     * the remote user is currently frozen. If the current browser does not\n     * support video frozen detection then it's always false.\n     * @return {ParticipantConnectionStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video\n            // track frozen detection...\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\n     *\n     * @constructor\n     * @param {RTC} rtc the RTC service instance\n     * @param {JitsiConference} conference parent conference instance\n     * @param {Object} options\n     * @param {number} [options.p2pRtcMuteTimeout=2500] custom value for\n     * {@link ParticipantConnectionStatus.p2pRtcMuteTimeout}.\n     * @param {number} [options.rtcMuteTimeout=10000] custom value for\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n     */\n    constructor(rtc, conference, options) {\n        this.rtc = rtc;\n        this.conference = conference;\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\n         * window.setTimeout.\n         * @type {Object.<string, number>}\n         */\n        this.trackTimers = {};\n\n        /**\n         * This map holds the endpoint connection status received from the JVB\n         * (as it might be different than the one stored in JitsiParticipant).\n         * Required for getting back in sync when remote video track is removed.\n         * @type {Object.<string, boolean>}\n         */\n        this.connStatusFromJvb = { };\n\n        /**\n         * If video track frozen detection through RTC mute event is supported,\n         * we wait some time until video track is considered frozen. But because\n         * when the user falls out of last N it is expected for the video to\n         * freeze this timeout must be significantly reduced in \"out of last N\"\n         * case.\n         *\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\n         * user is not in last N.\n         * @type {number}\n         */\n        this.outOfLastNTimeout\n            = typeof options.outOfLastNTimeout === 'number'\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\n\n        /**\n         * How long we are going to wait for the corresponding signaling mute event after the RTC video track muted\n         * event is fired on the Media stream, before the connection interrupted is fired. The default value is\n         * {@link DEFAULT_P2P_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds.\n         */\n        this.p2pRtcMuteTimeout = typeof options.p2pRtcMuteTimeout === 'number'\n            ? options.p2pRtcMuteTimeout : DEFAULT_P2P_RTC_MUTE_TIMEOUT;\n\n        /**\n         * How long we're going to wait after the RTC video track muted event\n         * for the corresponding signalling mute event, before the connection\n         * interrupted is fired. The default value is\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds\n         */\n        this.rtcMuteTimeout\n            = typeof options.rtcMuteTimeout === 'number'\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n\n        /**\n         * This map holds a timestamp indicating  when participant's video track\n         * was RTC muted (it is assumed that each participant can have only 1\n         * video track at a time). The purpose of storing the timestamp is to\n         * avoid the transition to disconnected status in case of legitimate\n         * video mute operation where the signalling video muted event can\n         * arrive shortly after RTC muted event.\n         *\n         * The key is participant's ID which is the same as endpoint id in\n         * the Colibri conference allocated on the JVB.\n         *\n         * The value is a timestamp measured in milliseconds obtained with\n         * <tt>Date.now()</tt>.\n         *\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n         *       implemented in JitsiLocalTrack by extending the event to\n         *       the remote track and allowing to set different timeout for\n         *       local and remote tracks.\n         *\n         * @type {Object.<string, number>}\n         */\n        this.rtcMutedTimestamp = { };\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n\n        /**\n         * This map holds the timestamps indicating when participant's video\n         * entered lastN set. Participants entering lastN will have connection\n         * status restoring and when we start receiving video will become\n         * active, but if video is not received for certain time\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\n         * will become interrupted.\n         *\n         * @type {Map<string, number>}\n         */\n        this.enteredLastNTimestamp = new Map();\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\n         * scheduled using window.setTimeout.\n         *\n         * @type {Map<string, number>}\n         */\n        this.restoringTimers = new Map();\n\n        /**\n         * A map that holds the current connection status (along with all the internal events that happen\n         * while in that state).\n         *\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\n         */\n        this.connectionStatusMap = new Map();\n    }\n\n    /**\n     * Gets the video frozen timeout for given user.\n     * @param {string} id endpoint/participant ID\n     * @return {number} how long are we going to wait since RTC video muted\n     * even, before a video track is considered frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(id) {\n        return this.rtc.isInLastN(id)\n            ? this.rtcMuteTimeout\n            : this.conference.isP2PActive() ? this.p2pRtcMuteTimeout : this.outOfLastNTimeout;\n    }\n\n    /**\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\n     * listeners.\n     */\n    init() {\n\n        this._onEndpointConnStatusChanged\n            = this.onEndpointConnStatusChanged.bind(this);\n\n        this.rtc.addListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        // Handles P2P status changes\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\n        // events for video type tracks when they stop receiving data which is\n        // often a sign that remote user is having connectivity issues\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\n            // event handlers\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for\n            // signalling mute/unmute events.\n            this._onSignallingMuteChanged\n                = this.onSignallingMuteChanged.bind(this);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged\n                = this.onTrackVideoTypeChanged.bind(this);\n        }\n\n        this._onLastNChanged = this._onLastNChanged.bind(this);\n        this.conference.on(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this._onLastNValueChanged\n            = this.refreshConnectionStatusForAll.bind(this);\n        this.rtc.on(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this\n     * instance.\n     */\n    dispose() {\n\n        this.rtc.removeListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_MUTE,\n                this._onTrackRtcMuted);\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE,\n                this._onTrackRtcUnmuted);\n\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n        }\n\n        this.conference.off(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this.rtc.removeListener(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.conference.off(\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        const participantIds = Object.keys(this.trackTimers);\n\n        for (const participantId of participantIds) {\n            this.clearTimeout(participantId);\n            this.clearRtcMutedTimestamp(participantId);\n        }\n\n        for (const id in this.connectionStatusMap) {\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\n                this.onUserLeft(id);\n            }\n        }\n\n        // Clear RTC connection status cache\n        this.connStatusFromJvb = {};\n    }\n\n    /**\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\n     * notification over the data channel from the bridge about endpoint's\n     * connection status update.\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\n     */\n    onEndpointConnStatusChanged(endpointId, isActive) {\n\n        logger.debug(\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\n                endpointId}: ${isActive}`);\n\n        // Filter out events for the local JID for now\n        if (endpointId !== this.conference.myUserId()) {\n            // Store the status received over the data channels\n            this.connStatusFromJvb[endpointId] = isActive;\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Changes connection status.\n     * @param {JitsiParticipant} participant\n     * @param newStatus\n     */\n    _changeConnectionStatus(participant, newStatus) {\n        if (participant.getConnectionStatus() !== newStatus) {\n\n            const endpointId = participant.getId();\n\n            participant._setConnectionStatus(newStatus);\n\n            logger.debug(\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\n                    newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'peer.conn.status',\n                    participant: endpointId,\n                    status: newStatus\n                }));\n\n\n            this.conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\n                endpointId, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"connection interrupted\" event which was previously\n     * scheduled as a timeout on RTC 'onmute' event.\n     *\n     * @param {string} participantId - The participant for which the \"connection\n     * interrupted\" timeout was scheduled.\n     */\n    clearTimeout(participantId) {\n        if (this.trackTimers[participantId]) {\n            window.clearTimeout(this.trackTimers[participantId]);\n            this.trackTimers[participantId] = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for participant's video track\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    clearRtcMutedTimestamp(participantId) {\n        this.rtcMutedTimestamp[participantId] = null;\n    }\n\n    /**\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\n     * a new one is added to the conference.\n     *\n     * @param {JitsiTrack} remoteTrack - The {JitsiTrack} which is being added to\n     * the conference.\n     */\n    onRemoteTrackAdded(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            logger.debug(\n                `Detector on remote track added for: ${\n                    remoteTrack.getParticipantId()}`);\n\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\n        }\n    }\n\n    /**\n     * Removes all event listeners bound to the remote video track and clears\n     * any related timeouts.\n     *\n     * @param {JitsiRemoteTrack} remoteTrack - The remote track which is being\n     * removed from the conference.\n     */\n    onRemoteTrackRemoved(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            const endpointId = remoteTrack.getParticipantId();\n\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\n\n            remoteTrack.off(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n\n            this.clearTimeout(endpointId);\n            this.clearRtcMutedTimestamp(endpointId);\n\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Checks if given participant's video is considered frozen.\n     * @param {JitsiParticipant} participant - The participant.\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\n     * participant or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n     *       implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for\n     *       local and remote tracks.\n     *\n     */\n    isVideoTrackFrozen(participant) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const id = participant.getId();\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\n        const timeout = this._getVideoFrozenTimeout(id);\n\n        return hasAnyVideoRTCMuted\n            && typeof rtcMutedTimestamp === 'number'\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Goes over every participant and updates connectivity status.\n     * Should be called when a parameter which affects all of the participants\n     * is changed (P2P for example).\n     */\n    refreshConnectionStatusForAll() {\n        const participants = this.conference.getParticipants();\n\n        for (const participant of participants) {\n            this.figureOutConnectionStatus(participant.getId());\n        }\n    }\n\n    /**\n     * Figures out (and updates) the current connectivity status for\n     * the participant identified by the given id.\n     *\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\n     */\n    figureOutConnectionStatus(id) {\n        const participant = this.conference.getParticipantById(id);\n\n        if (!participant) {\n            // Probably the participant is no longer in the conference\n            // (at the time of writing this code, participant is\n            // detached from the conference and TRACK_REMOVED events are\n            // fired),\n            // so we don't care, but let's print a log message for debugging purposes.\n            logger.debug(`figure out conn status - no participant for: ${id}`);\n\n            return;\n        }\n\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\n        // any detection based on video playback or the last N.\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\n        const isInLastN = this.rtc.isInLastN(id);\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\n\n        if (typeof isConnActiveByJvb !== 'boolean') {\n            // If no status was received from the JVB it means that it's active\n            // (the bridge does not send notification unless there is a problem)\n            isConnActiveByJvb = true;\n        }\n\n        const newState\n            = inP2PMode\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\n                    isConnActiveByJvb,\n                    isInLastN,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps\n        // that we use to track the restoring state\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\n            this._clearRestoringTimer(id);\n        }\n\n        logger.debug(\n            `Figure out conn status for ${id}, is video muted: ${\n                isVideoMuted} is active(jvb): ${\n                isConnActiveByJvb} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in last N: ${\n                isInLastN} currentStatus => newStatus: ${\n                participant.getConnectionStatus()} => ${newState}`);\n\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\n\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\n        // since the last time this code block run).\n        if (!('p2p' in oldConnectionStatus)\n            || !('connectionStatus' in oldConnectionStatus)\n            || oldConnectionStatus.p2p !== inP2PMode\n            || oldConnectionStatus.connectionStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n            this.connectionStatusMap[id] = {\n                ...oldConnectionStatus,\n                connectionStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\n            // video type is not in oldConnectionStatus.\n            if (!('videoType' in this.connectionStatusMap[id])) {\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\n                }\n            }\n        }\n        this._changeConnectionStatus(participant, newState);\n    }\n\n    /**\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\n     * in the INTERRUPTED state) and sends a participant connection status event.\n     * @param {string} id - The jid of the participant.\n     * @param {Number} nowMs - The current time (in millis).\n     * @returns {void}\n     */\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\n        const participantConnectionStatus = this.connectionStatusMap[id];\n\n        if (participantConnectionStatus\n            && 'startedMs' in participantConnectionStatus\n            && 'videoType' in participantConnectionStatus\n            && 'connectionStatus' in participantConnectionStatus\n            && 'p2p' in participantConnectionStatus) {\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\n            Statistics.sendAnalytics(\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\n        }\n    }\n\n    /**\n     * On change in Last N set check all leaving and entering participants to\n     * change their corresponding statuses.\n     *\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\n     * @private\n     */\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\n        const now = Date.now();\n\n        logger.debug(`LastN endpoints changed leaving=${leavingLastN}, entering=${enteringLastN} at ${now}`);\n\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\n        // calculate the connection status for all the endpoints since it won't get triggered automatically on\n        // the endpoint that has started/stopped receiving media.\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            this.refreshConnectionStatusForAll();\n        }\n\n        for (const id of leavingLastN) {\n            this.enteredLastNTimestamp.delete(id);\n            this._clearRestoringTimer(id);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n        for (const id of enteringLastN) {\n            // store the timestamp this id is entering lastN\n            this.enteredLastNTimestamp.set(id, now);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n    }\n\n    /**\n     * Clears the restoring timer for participant's video track and the\n     * timestamp for entering lastN.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    _clearRestoringTimer(participantId) {\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimers.delete(participantId);\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares\n     * current time and the time the track entered in lastN. If it hasn't\n     * timedout and there is no timer added, add new timer in order to give it\n     * more time to become active or mark it as interrupted on next check.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\n     * set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(participantId) {\n        const enteredLastNTimestamp\n            = this.enteredLastNTimestamp.get(participantId);\n\n        if (enteredLastNTimestamp\n            && (Date.now() - enteredLastNTimestamp)\n                >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled,\n        // schedule one so we can track the restoring state and change it after\n        // reaching the timeout\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (!rTimer) {\n            this.restoringTimers.set(participantId, setTimeout(\n                () => this.figureOutConnectionStatus(participantId),\n                DEFAULT_RESTORING_TIMEOUT));\n        }\n\n        return false;\n    }\n\n    /**\n     * Sends a last/final participant connection status event for the participant that left the conference.\n     * @param {string} id - The id of the participant that left the conference.\n     * @returns {void}\n     */\n    onUserLeft(id) {\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\n        delete this.connectionStatusMap[id];\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onmute' event\n     * will be processed.\n     */\n    onTrackRtcMuted(track) {\n        const participantId = track.getParticipantId();\n        const participant = this.conference.getParticipantById(participantId);\n\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\n        if (!participant) {\n            logger.error(`No participant for id: ${participantId}`);\n\n            return;\n        }\n        this.rtcMutedTimestamp[participantId] = Date.now();\n        if (!participant.isVideoMuted()) {\n            // If the user is not muted according to the signalling we'll give\n            // it some time, before the connection interrupted event is\n            // triggered.\n            this.clearTimeout(participantId);\n\n            // The timeout is reduced when user is not in the last N\n            const timeout = this._getVideoFrozenTimeout(participantId);\n\n            this.trackTimers[participantId] = window.setTimeout(() => {\n                logger.debug(\n                    `Set RTC mute timeout for: ${participantId}\\\n                     of ${timeout} ms`);\n                this.clearTimeout(participantId);\n                this.figureOutConnectionStatus(participantId);\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onunmute'\n     * event will be processed.\n     */\n    onTrackRtcUnmuted(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\n\n        this.clearTimeout(participantId);\n        this.clearRtcMutedTimestamp(participantId);\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param {JitsiRemoteTrack} track - The remote video track for which\n     * the signalling mute/unmute event will be processed.\n     */\n    onSignallingMuteChanged(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector on track signalling mute changed: ${participantId}`,\n            track.isMuted());\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Sends a participant connection status event as a result of the video type\n     * changing.\n     * @param {JitsiRemoteTrack} track - The track.\n     * @param {VideoType} type - The video type.\n     * @returns {void}\n     */\n    onTrackVideoTypeChanged(track, type) {\n        const id = track.getParticipantId();\n        const nowMs = Date.now();\n\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n        this.connectionStatusMap[id] = {\n            ...this.connectionStatusMap[id] || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n","\nimport { Strophe } from 'strophe.js';\n\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport { MediaType } from './service/RTC/MediaType';\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     * @param {object} identity - the xmpp identity\n     * @param {boolean?} isReplacing - whether this is a participant replacing another into the meeting.\n     * @param {boolean?} isReplaced - whether this is a participant to be kicked and replaced into the meeting.\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status, identity, isReplacing, isReplaced) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\n        this._properties = {};\n        this._identity = identity;\n        this._isReplacing = isReplacing;\n        this._isReplaced = isReplaced;\n        this._features = new Set();\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\n     * muted status.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\n     */\n    hasAnyVideoTrackWebRTCMuted() {\n        return (\n            this.getTracks().some(\n                jitsiTrack =>\n                    jitsiTrack.getType() === MediaType.VIDEO\n                        && jitsiTrack.isWebRTCTrackMuted()));\n    }\n\n    /**\n     * Updates participant's connection status.\n     * @param {string} state the current participant connection state.\n     * {@link ParticipantConnectionStatus}.\n     * @private\n     */\n    _setConnectionStatus(status) {\n        this._connectionStatus = status;\n    }\n\n    /**\n     * Return participant's connectivity status.\n     *\n     * @returns {string} the connection status\n     * <tt>ParticipantConnectionStatus</tt> of the user.\n     * {@link ParticipantConnectionStatus}.\n     */\n    getConnectionStatus() {\n        return this._connectionStatus;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHiddenFromRecorder() {\n        return this._identity?.user?.['hidden-from-recorder'] === 'true';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant replaces another participant\n     * from the meeting.\n     */\n    isReplacing() {\n        return this._isReplacing;\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants will be replaced by another\n     * participant in the meeting.\n     */\n    isReplaced() {\n        return this._isReplaced;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and\n     * which belong to this JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\n     * checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\n     * false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     * Sets a new participant role.\n     * @param {String} newRole - the new role.\n     */\n    setRole(newRole) {\n        this._role = newRole;\n    }\n\n    /**\n     * Sets whether participant is replacing another based on jwt.\n     * @param {String} newIsReplacing - whether is replacing.\n     */\n    setIsReplacing(newIsReplacing) {\n        this._isReplacing = newIsReplacing;\n    }\n\n    /**\n     * Sets whether participant is being replaced by another based on jwt.\n     * @param {boolean} newIsReplaced - whether is being replaced.\n     */\n    setIsReplaced(newIsReplaced) {\n        this._isReplaced = newIsReplaced;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures() {\n        return Promise.resolve(this._features);\n    }\n\n    /**\n     * Checks current set features.\n     * @param {String} feature - the feature to check.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains the\n     * <tt>feature</tt>.\n     */\n    hasFeature(feature) {\n        return this._features.has(feature);\n    }\n\n    /**\n     * Set new features.\n     * @param {Set<String>|undefined} newFeatures - Sets new features.\n     */\n    setFeatures(newFeatures) {\n        this._features = newFeatures || new Set();\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n\n    /**\n     * Sets the bot type for the participant.\n     * @param {String} newBotType - The new bot type to set.\n     */\n    setBotType(newBotType) {\n        this._botType = newBotType;\n    }\n\n    /**\n     * Returns the connection jid for the participant.\n     *\n     * @returns {string|undefined} - The connection jid of the participant.\n     */\n    getConnectionJid() {\n        return this._connectionJid;\n    }\n\n    /**\n     * Sets the connection jid for the participant.\n     * @param {String} newJid - The connection jid to set.\n     */\n    setConnectionJid(newJid) {\n        this._connectionJid = newJid;\n    }\n}\n","/**\n * The events for the connection.\n */\n\nexport enum JitsiConnectionEvents {\n    /**\n     * Indicates that the connection has been disconnected. The event provides\n     * the following parameters to its listeners:\n     *\n     * @param msg {string} a message associated with the disconnect such as the\n     * last (known) error message\n     */\n    CONNECTION_DISCONNECTED = 'connection.connectionDisconnected',\n\n    /**\n     * Indicates that the connection has been established. The event provides\n     * the following parameters to its listeners:\n     *\n     * @param id {string} the ID of the local endpoint/participant/peer (within\n     * the context of the established connection)\n     */\n    CONNECTION_ESTABLISHED = 'connection.connectionEstablished',\n\n    /**\n     * Indicates that the connection has been failed for some reason. The event\n     * provides the following parameters to its listeners:\n     *\n     * @param errType {JitsiConnectionErrors} the type of error associated with\n     * the failure\n     * @param errReason {string} the error (message) associated with the failure\n     * @param credentials {object} the credentials used to connect (if any)\n     * @param errReasonDetails {object} an optional object with details about\n     * the error, like shard moving, suspending. Used for analytics purposes.\n     */\n    CONNECTION_FAILED = 'connection.connectionFailed',\n\n    /**\n     * Indicates that the performed action cannot be executed because the\n     * connection is not in the correct state(connected, disconnected, etc.)\n     */\n    WRONG_STATE = 'connection.wrongState',\n\n    /**\n     * Indicates that the display name is required over this connection and need to be supplied when\n     * joining the room.\n     * There are cases like lobby room where display name is required.\n     */\n    DISPLAY_NAME_REQUIRED = 'connection.display_name_required'\n};\n\n// exported for backward compatibility\nexport const CONNECTION_DISCONNECTED = JitsiConnectionEvents.CONNECTION_DISCONNECTED;\nexport const CONNECTION_ESTABLISHED = JitsiConnectionEvents.CONNECTION_ESTABLISHED;\nexport const CONNECTION_FAILED = JitsiConnectionEvents.CONNECTION_FAILED;\nexport const WRONG_STATE = JitsiConnectionEvents.WRONG_STATE;\nexport const DISPLAY_NAME_REQUIRED = JitsiConnectionEvents.DISPLAY_NAME_REQUIRED;\n","/**\n * The errors for the connection.\n */\n\nexport enum JitsiConnectionErrors {\n    /**\n     * Indicates that the connection was dropped with an error which was most likely\n     * caused by some networking issues. The dropped term in this context means that\n     * the connection was closed unexpectedly (not on user's request).\n     *\n     * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n     * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n     * could also happen when BOSH request is sent to the server with the session-id\n     * that is not know to the server. But this should not happen in lib-jitsi-meet\n     * case as long as the service is configured correctly (there is no bug).\n     */\n    CONNECTION_DROPPED_ERROR = 'connection.droppedError',\n\n    /**\n     * Not specified errors.\n     */\n    OTHER_ERROR = 'connection.otherError',\n\n    /**\n     * Indicates that a password is required in order to join the conference.\n     */\n    PASSWORD_REQUIRED = 'connection.passwordRequired',\n\n    /**\n     * Indicates that the connection was dropped, because of too many 5xx HTTP\n     * errors on BOSH requests.\n     */\n    SERVER_ERROR = 'connection.serverError'\n};\n\n// exported for backward compatibility\nexport const CONNECTION_DROPPED_ERROR = JitsiConnectionErrors.CONNECTION_DROPPED_ERROR;\nexport const OTHER_ERROR = JitsiConnectionErrors.OTHER_ERROR;\nexport const PASSWORD_REQUIRED = JitsiConnectionErrors.PASSWORD_REQUIRED;\nexport const SERVER_ERROR = JitsiConnectionErrors.SERVER_ERROR;\n","\n/**\n * Promise-like object which can be passed around for resolving it later. It\n * implements the \"thenable\" interface, so it can be used wherever a Promise\n * could be used.\n *\n * In addition a \"reject on timeout\" functionality is provided.\n */\nexport default class Deferred {\n    /**\n     * Instantiates a Deferred object.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = (...args) => {\n                this.clearRejectTimeout();\n                resolve(...args);\n            };\n            this.reject = (...args) => {\n                this.clearRejectTimeout();\n                reject(...args);\n            };\n        });\n        this.then = this.promise.then.bind(this.promise);\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n\n    /**\n     * Clears the reject timeout.\n     */\n    clearRejectTimeout() {\n        clearTimeout(this._timeout);\n    }\n\n    /**\n     * Rejects the promise after the given timeout.\n     */\n    setRejectTimeout(ms) {\n        this._timeout = setTimeout(() => {\n            this.reject(new Error('timeout'));\n        }, ms);\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     * @returns {Function} - The unsubscribe function.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n\n        return () => this.removeEventListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","/* global RTCRtpScriptTransform */\n\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\n// Flag to set on senders / receivers to avoid setting up the encryption transform\n// more than once.\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\n\n/**\n * Context encapsulating the cryptography bits required for E2EE.\n * This uses the WebRTC Insertable Streams API which is explained in\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\n * that provides access to the encoded frames and allows them to be transformed.\n *\n * The encoded frame format is explained below in the _encodeFunction method.\n * High level design goals were:\n * - do not require changes to existing SFUs and retain (VP8) metadata.\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\n * - allow for the key to be rotated frequently.\n */\nexport default class E2EEcontext {\n    /**\n     * Build a new E2EE context instance, which will be used in a given conference.\n     * @param {boolean} [options.sharedKey] - whether there is a uniques key shared amoung all participants.\n     */\n    constructor({ sharedKey } = {}) {\n        // Determine the URL for the worker script. Relative URLs are relative to\n        // the entry point, not the script that launches the worker.\n        let baseUrl = '';\n        const ljm = document.querySelector('script[src*=\"lib-jitsi-meet\"]');\n\n        if (ljm) {\n            const idx = ljm.src.lastIndexOf('/');\n\n            baseUrl = `${ljm.src.substring(0, idx)}/`;\n        }\n\n        let workerUrl = `${baseUrl}lib-jitsi-meet.e2ee-worker.js`;\n\n        // If there is no baseUrl then we create the worker in a normal way\n        // as you cant load scripts inside blobs from relative paths.\n        // See: https://www.html5rocks.com/en/tutorials/workers/basics/#toc-inlineworkers-loadingscripts\n        if (baseUrl && baseUrl !== '/') {\n            // Initialize the E2EE worker. In order to avoid CORS issues, start the worker and have it\n            // synchronously load the JS.\n            const workerBlob\n                = new Blob([ `importScripts(\"${workerUrl}\");` ], { type: 'application/javascript' });\n\n            workerUrl = window.URL.createObjectURL(workerBlob);\n        }\n\n        this._worker = new Worker(workerUrl, { name: 'E2EE Worker' });\n\n        this._worker.onerror = e => logger.error(e);\n\n        this._worker.postMessage({\n            operation: 'initialize',\n            sharedKey\n        });\n    }\n\n    /**\n     * Cleans up all state associated with the given participant. This is needed when a\n     * participant leaves the current conference.\n     *\n     * @param {string} participantId - The participant that just left.\n     */\n    cleanup(participantId) {\n        this._worker.postMessage({\n            operation: 'cleanup',\n            participantId\n        });\n    }\n\n    /**\n     * Cleans up all state associated with all participants in the conference. This is needed when disabling e2ee.\n     *\n     */\n    cleanupAll() {\n        this._worker.postMessage({\n            operation: 'cleanupAll'\n        });\n    }\n\n    /**\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\n     * a frame decoder.\n     *\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\n     * @param {string} kind - The kind of track this receiver belongs to.\n     * @param {string} participantId - The participant id that this receiver belongs to.\n     */\n    handleReceiver(receiver, kind, participantId) {\n        if (receiver[kJitsiE2EE]) {\n            return;\n        }\n        receiver[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'decode',\n                participantId\n            };\n\n            receiver.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const receiverStreams = receiver.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'decode',\n                readableStream: receiverStreams.readable,\n                writableStream: receiverStreams.writable,\n                participantId\n            }, [ receiverStreams.readable, receiverStreams.writable ]);\n        }\n    }\n\n    /**\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\n     * a frame encoder.\n     *\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\n     * @param {string} kind - The kind of track this sender belongs to.\n     * @param {string} participantId - The participant id that this sender belongs to.\n     */\n    handleSender(sender, kind, participantId) {\n        if (sender[kJitsiE2EE]) {\n            return;\n        }\n        sender[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'encode',\n                participantId\n            };\n\n            sender.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const senderStreams = sender.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'encode',\n                readableStream: senderStreams.readable,\n                writableStream: senderStreams.writable,\n                participantId\n            }, [ senderStreams.readable, senderStreams.writable ]);\n        }\n    }\n\n    /**\n     * Set the E2EE key for the specified participant.\n     *\n     * @param {string} participantId - the ID of the participant who's key we are setting.\n     * @param {Uint8Array | boolean} key - they key for the given participant.\n     * @param {Number} keyIndex - the key index.\n     */\n    setKey(participantId, key, keyIndex) {\n        this._worker.postMessage({\n            operation: 'setKey',\n            key,\n            keyIndex,\n            participantId\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\n\nimport E2EEContext from './E2EEContext';\n\nconst logger = getLogger(__filename);\n\n/**\n * Abstract class that integrates {@link E2EEContext} with a key management system.\n */\nexport class KeyHandler extends Listenable {\n    /**\n     * Build a new KeyHandler instance, which will be used in a given conference.\n     * @param {JitsiConference} conference - the current conference.\n     * @param {object} options - the options passed to {E2EEContext}, see implemention.\n     */\n    constructor(conference, options = {}) {\n        super();\n\n        this.conference = conference;\n        this.e2eeCtx = new E2EEContext(options);\n\n        this.enabled = false;\n        this._enabling = undefined;\n\n        // Conference media events in order to attach the encryptor / decryptor.\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\n        // added instead of shenanigans around conference track events and track muted.\n        //\n\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            this._onMediaSessionStarted.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            track => track.isLocal() && this._onLocalTrackAdded(track));\n        this.conference.rtc.on(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        this._enabling && await this._enabling;\n\n        if (enabled === this.enabled) {\n            return;\n        }\n\n        this._enabling = new Deferred();\n\n        this.enabled = enabled;\n\n        if (!enabled) {\n            this.e2eeCtx.cleanupAll();\n        }\n\n        this._setEnabled && await this._setEnabled(enabled);\n\n        this.conference.setLocalParticipantProperty('e2ee.enabled', enabled);\n\n        this.conference._restartMediaSessions();\n\n        this._enabling.resolve();\n    }\n\n    /**\n     * Sets the key for End-to-End encryption.\n     *\n     * @returns {void}\n     */\n    setEncryptionKey() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\n     * @param {JitsiLocalTrack} track - the new track that's being added to the conference.\n     * @private\n     */\n    _onLocalTrackAdded(track) {\n        for (const session of this.conference.getMediaSessions()) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setups E2E encryption for the new session.\n     * @param {JingleSessionPC} session - the new media session.\n     * @private\n     */\n    _onMediaSessionStarted(session) {\n        const localTracks = this.conference.getLocalTracks();\n\n        for (const track of localTracks) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setup E2EE for the receiving side.\n     *\n     * @private\n     */\n    _setupReceiverE2EEForTrack(tpc, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const receiver = tpc.findReceiverForTrack(track.track);\n\n        if (receiver) {\n            this.e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE for the sending side.\n     *\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\n     * @param {JitsiLocalTrack} track - the local track for which e2e encoder will be configured.\n     * @private\n     */\n    _setupSenderE2EEForTrack(session, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const pc = session.peerconnection;\n        const sender = pc && pc.findSenderForTrack(track.track);\n\n        if (sender) {\n            this.e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE on the sender that is created for the unmuted local video track.\n     * @param {JitsiLocalTrack} track - the track for which muted status has changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\n            for (const session of this.conference.getMediaSessions()) {\n                this._setupSenderE2EEForTrack(session, track);\n            }\n        }\n    }\n}\n","import { KeyHandler } from './KeyHandler';\n\n/**\n * This module integrates {@link E2EEContext} with {external} in order to set the keys for encryption.\n */\nexport class ExternallyManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new ExternallyManagedKeyHandler instance, which will be used in a given conference.\n     * @param conference - the current conference.\n     */\n    constructor(conference) {\n        super(conference, { sharedKey: true });\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setKey(keyInfo) {\n        this.e2eeCtx.setKey(undefined, { encryptionKey: keyInfo.encryptionKey }, keyInfo.index);\n    }\n}\n","import uuid from './dist/index.js';\nexport const v1 = uuid.v1;\nexport const v3 = uuid.v3;\nexport const v4 = uuid.v4;\nexport const v5 = uuid.v5;\n","/* global Olm */\n\nimport { getLogger } from '@jitsi/logger';\nimport base64js from 'base64-js';\nimport isEqual from 'lodash.isequal';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\nimport { FEATURE_E2EE, JITSI_MEET_MUC_TYPE } from '../xmpp/xmpp';\n\nconst logger = getLogger(__filename);\n\nconst REQ_TIMEOUT = 5 * 1000;\nconst OLM_MESSAGE_TYPE = 'olm';\nconst OLM_MESSAGE_TYPES = {\n    ERROR: 'error',\n    KEY_INFO: 'key-info',\n    KEY_INFO_ACK: 'key-info-ack',\n    SESSION_ACK: 'session-ack',\n    SESSION_INIT: 'session-init'\n};\n\nconst kOlmData = Symbol('OlmData');\n\nconst OlmAdapterEvents = {\n    OLM_ID_KEY_READY: 'olm.id_key_ready',\n    PARTICIPANT_E2EE_CHANNEL_READY: 'olm.participant_e2ee_channel_ready',\n    PARTICIPANT_KEY_UPDATED: 'olm.partitipant_key_updated'\n};\n\n/**\n * This class implements an End-to-End Encrypted communication channel between every two peers\n * in the conference. This channel uses libolm to achieve E2EE.\n *\n * The created channel is then used to exchange the secret key that each participant will use\n * to encrypt the actual media (see {@link E2EEContext}).\n *\n * A simple JSON message based protocol is implemented, which follows a request - response model:\n * - session-init: Initiates an olm session establishment procedure. This message will be sent\n *                 by the participant who just joined, to everyone else.\n * - session-ack: Completes the olm session etablishment. This messsage may contain ancilliary\n *                encrypted data, more specifically the sender's current key.\n * - key-info: Includes the sender's most up to date key information.\n * - key-info-ack: Acknowledges the reception of a key-info request. In addition, it may contain\n *                 the sender's key information, if available.\n * - error: Indicates a request processing error has occurred.\n *\n * These requessts and responses are transport independent. Currently they are sent using XMPP\n * MUC private messages.\n */\nexport class OlmAdapter extends Listenable {\n    /**\n     * Creates an adapter instance for the given conference.\n     */\n    constructor(conference) {\n        super();\n\n        this._conf = conference;\n        this._init = new Deferred();\n        this._key = undefined;\n        this._keyIndex = -1;\n        this._reqs = new Map();\n        this._sessionInitialization = undefined;\n\n        if (OlmAdapter.isSupported()) {\n            this._bootstrapOlm();\n\n            this._conf.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this._onEndpointMessageReceived.bind(this));\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_LEFT, this._onConferenceLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.USER_LEFT, this._onParticipantLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this._onParticipantPropertyChanged.bind(this));\n        } else {\n            this._init.reject(new Error('Olm not supported'));\n        }\n    }\n\n    /**\n     * Starts new olm sessions with every other participant that has the participantId \"smaller\" the localParticipantId.\n     */\n    async initSessions() {\n        if (this._sessionInitialization) {\n            throw new Error('OlmAdapter initSessions called multiple times');\n        } else {\n            this._sessionInitialization = new Deferred();\n\n            await this._init;\n\n            const promises = [];\n            const localParticipantId = this._conf.myUserId();\n\n            for (const participant of this._conf.getParticipants()) {\n                if (participant.hasFeature(FEATURE_E2EE) && localParticipantId < participant.getId()) {\n                    promises.push(this._sendSessionInit(participant));\n                }\n            }\n\n            await Promise.allSettled(promises);\n\n            // TODO: retry failed ones.\n\n            this._sessionInitialization.resolve();\n            this._sessionInitialization = undefined;\n        }\n    }\n\n    /**\n     * Indicates if olm is supported on the current platform.\n     *\n     * @returns {boolean}\n     */\n    static isSupported() {\n        return typeof window.Olm !== 'undefined';\n    }\n\n    /**\n     * Updates the current participant key and distributes it to all participants in the conference\n     * by sending a key-info message.\n     *\n     * @param {Uint8Array|boolean} key - The new key.\n     * @retrns {Promise<Number>}\n     */\n    async updateKey(key) {\n        // Store it locally for new sessions.\n        this._key = key;\n        this._keyIndex++;\n\n        // Broadcast it.\n        const promises = [];\n\n        for (const participant of this._conf.getParticipants()) {\n            const pId = participant.getId();\n            const olmData = this._getParticipantOlmData(participant);\n\n            // TODO: skip those who don't support E2EE.\n            if (!olmData.session) {\n                logger.warn(`Tried to send key to participant ${pId} but we have no session`);\n\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            const uuid = uuidv4();\n            const data = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.KEY_INFO,\n                    data: {\n                        ciphertext: this._encryptKeyInfo(olmData.session),\n                        uuid\n                    }\n                }\n            };\n            const d = new Deferred();\n\n            d.setRejectTimeout(REQ_TIMEOUT);\n            d.catch(() => {\n                this._reqs.delete(uuid);\n            });\n            this._reqs.set(uuid, d);\n            promises.push(d);\n\n            this._sendMessage(data, pId);\n        }\n\n        await Promise.allSettled(promises);\n\n        // TODO: retry failed ones?\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Updates the current participant key.\n     * @param {Uint8Array|boolean} key - The new key.\n     * @returns {number}\n    */\n    updateCurrentKey(key) {\n        this._key = key;\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Frees the olmData session for the given participant.\n     *\n     */\n    clearParticipantSession(participant) {\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            olmData.session.free();\n            olmData.session = undefined;\n        }\n    }\n\n\n    /**\n     * Frees the olmData sessions for all participants.\n     *\n     */\n    clearAllParticipantsSessions() {\n        for (const participant of this._conf.getParticipants()) {\n            this.clearParticipantSession(participant);\n        }\n    }\n\n    /**\n     * Internal helper to bootstrap the olm library.\n     *\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _bootstrapOlm() {\n        logger.debug('Initializing Olm...');\n\n        try {\n            await Olm.init();\n\n            this._olmAccount = new Olm.Account();\n            this._olmAccount.create();\n\n            const idKeys = JSON.parse(this._olmAccount.identity_keys());\n\n            this._idKey = idKeys.curve25519;\n\n            logger.debug(`Olm ${Olm.get_library_version().join('.')} initialized`);\n            this._init.resolve();\n            this._onIdKeyReady(this._idKey);\n        } catch (e) {\n            logger.error('Failed to initialize Olm', e);\n            this._init.reject(e);\n        }\n\n    }\n\n    /**\n     * Publishes our own Olmn id key in presence.\n     * @private\n     */\n    _onIdKeyReady(idKey) {\n        logger.debug(`Olm id key ready: ${idKey}`);\n\n        // Publish it in presence.\n        this._conf.setLocalParticipantProperty('e2ee.idKey', idKey);\n    }\n\n    /**\n     * Event posted when the E2EE signalling channel has been established with the given participant.\n     * @private\n     */\n    _onParticipantE2EEChannelReady(id) {\n        logger.debug(`E2EE channel with participant ${id} is ready`);\n    }\n\n    /**\n     * Internal helper for encrypting the current key information for a given participant.\n     *\n     * @param {Olm.Session} session - Participant's session.\n     * @returns {string} - The encrypted text with the key information.\n     * @private\n     */\n    _encryptKeyInfo(session) {\n        const keyInfo = {};\n\n        if (this._key !== undefined) {\n            keyInfo.key = this._key ? base64js.fromByteArray(this._key) : false;\n            keyInfo.keyIndex = this._keyIndex;\n        }\n\n        return session.encrypt(JSON.stringify(keyInfo));\n    }\n\n    /**\n     * Internal helper for getting the olm related data associated with a participant.\n     *\n     * @param {JitsiParticipant} participant - Participant whose data wants to be extracted.\n     * @returns {Object}\n     * @private\n     */\n    _getParticipantOlmData(participant) {\n        participant[kOlmData] = participant[kOlmData] || {};\n\n        return participant[kOlmData];\n    }\n\n    /**\n     * Handles leaving the conference, cleaning up olm sessions.\n     *\n     * @private\n     */\n    async _onConferenceLeft() {\n        logger.debug('Conference left');\n\n        await this._init;\n\n        for (const participant of this._conf.getParticipants()) {\n            this._onParticipantLeft(participant.getId(), participant);\n        }\n\n        if (this._olmAccount) {\n            this._olmAccount.free();\n            this._olmAccount = undefined;\n        }\n    }\n\n    /**\n     * Main message handler. Handles 1-to-1 messages received from other participants\n     * and send the appropriate replies.\n     *\n     * @private\n     */\n    async _onEndpointMessageReceived(participant, payload) {\n        if (payload[JITSI_MEET_MUC_TYPE] !== OLM_MESSAGE_TYPE) {\n            return;\n        }\n\n        if (!payload.olm) {\n            logger.warn('Incorrectly formatted message');\n\n            return;\n        }\n\n        await this._init;\n\n        const msg = payload.olm;\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        switch (msg.type) {\n        case OLM_MESSAGE_TYPES.SESSION_INIT: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'Session already established');\n            } else {\n                // Create a session for communicating with this participant.\n\n                const session = new Olm.Session();\n\n                session.create_outbound(this._olmAccount, msg.data.idKey, msg.data.otKey);\n                olmData.session = session;\n\n                // Send ACK\n                const ack = {\n                    [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                    olm: {\n                        type: OLM_MESSAGE_TYPES.SESSION_ACK,\n                        data: {\n                            ciphertext: this._encryptKeyInfo(session),\n                            uuid: msg.data.uuid\n                        }\n                    }\n                };\n\n                this._sendMessage(ack, pId);\n                this._onParticipantE2EEChannelReady(pId);\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SESSION_ACK: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'No session found');\n            } else if (msg.data.uuid === olmData.pendingSessionUuid) {\n                const { ciphertext } = msg.data;\n                const d = this._reqs.get(msg.data.uuid);\n                const session = new Olm.Session();\n\n                session.create_inbound(this._olmAccount, ciphertext.body);\n\n                // Remove OT keys that have been used to setup this session.\n                this._olmAccount.remove_one_time_keys(session);\n\n                // Decrypt first message.\n                const data = session.decrypt(ciphertext.type, ciphertext.body);\n\n                olmData.session = session;\n                olmData.pendingSessionUuid = undefined;\n\n                this._onParticipantE2EEChannelReady(pId);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n\n                const json = safeJsonParse(data);\n\n                if (json.key) {\n                    const key = base64js.toByteArray(json.key);\n                    const keyIndex = json.keyIndex;\n\n                    olmData.lastKey = key;\n                    this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                }\n            } else {\n                logger.warn('Received ACK with the wrong UUID');\n\n                this._sendError(participant, 'Invalid UUID');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.ERROR: {\n            logger.error(msg.data.error);\n\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n\n                    // Send ACK.\n                    const ack = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO_ACK,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid: msg.data.uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(ack, pId);\n                }\n            } else {\n                logger.debug(`Received key info message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO_ACK: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n                }\n\n                const d = this._reqs.get(msg.data.uuid);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n            } else {\n                logger.debug(`Received key info ack message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info-ack');\n            }\n            break;\n        }\n        }\n    }\n\n    /**\n     * Handles a participant leaving. When a participant leaves their olm session is destroyed.\n     *\n     * @private\n     */\n    _onParticipantLeft(id, participant) {\n        logger.debug(`Participant ${id} left`);\n\n        this.clearParticipantSession(participant);\n    }\n\n    /**\n    * Handles an update in a participant's presence property.\n    *\n    * @param {JitsiParticipant} participant - The participant.\n    * @param {string} name - The name of the property that changed.\n    * @param {*} oldValue - The property's previous value.\n    * @param {*} newValue - The property's new value.\n    * @private\n    */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.enabled':\n            if (newValue && this._conf.isE2EEEnabled()) {\n                const localParticipantId = this._conf.myUserId();\n                const participantId = participant.getId();\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participantId) {\n                    if (this._sessionInitialization) {\n                        await this._sessionInitialization;\n                    }\n                    await this._sendSessionInit(participant);\n\n                    const olmData = this._getParticipantOlmData(participant);\n                    const uuid = uuidv4();\n\n                    const d = new Deferred();\n\n                    d.setRejectTimeout(REQ_TIMEOUT);\n                    d.catch(() => {\n                        this._reqs.delete(uuid);\n                        olmData.pendingSessionUuid = undefined;\n                    });\n                    this._reqs.set(uuid, d);\n\n                    const data = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(data, participantId);\n                }\n            }\n            break;\n        }\n    }\n\n    /**\n     * Builds and sends an error message to the target participant.\n     *\n     * @param {JitsiParticipant} participant - The target participant.\n     * @param {string} error - The error message.\n     * @returns {void}\n     */\n    _sendError(participant, error) {\n        const pId = participant.getId();\n        const err = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.ERROR,\n                data: {\n                    error\n                }\n            }\n        };\n\n        this._sendMessage(err, pId);\n    }\n\n    /**\n     * Internal helper to send the given object to the given participant ID.\n     * This function merely exists so the transport can be easily swapped.\n     * Currently messages are transmitted via XMPP MUC private messages.\n     *\n     * @param {object} data - The data that will be sent to the target participant.\n     * @param {string} participantId - ID of the target participant.\n     */\n    _sendMessage(data, participantId) {\n        this._conf.sendMessage(data, participantId);\n    }\n\n    /**\n     * Builds and sends the session-init request to the target participant.\n     *\n     * @param {JitsiParticipant} participant - Participant to whom we'll send the request.\n     * @returns {Promise} - The promise will be resolved when the session-ack is received.\n     * @private\n     */\n    _sendSessionInit(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a session`);\n\n            return Promise.reject();\n        }\n\n        if (olmData.pendingSessionUuid !== undefined) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a pending session`);\n\n            return Promise.reject();\n        }\n\n        // Generate a One Time Key.\n        this._olmAccount.generate_one_time_keys(1);\n\n        const otKeys = JSON.parse(this._olmAccount.one_time_keys());\n        const otKey = Object.values(otKeys.curve25519)[0];\n\n        if (!otKey) {\n            return Promise.reject(new Error('No one-time-keys generated'));\n        }\n\n        // Mark the OT keys (one really) as published so they are not reused.\n        this._olmAccount.mark_keys_as_published();\n\n        const uuid = uuidv4();\n        const init = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SESSION_INIT,\n                data: {\n                    idKey: this._idKey,\n                    otKey,\n                    uuid\n                }\n            }\n        };\n\n        const d = new Deferred();\n\n        d.setRejectTimeout(REQ_TIMEOUT);\n        d.catch(() => {\n            this._reqs.delete(uuid);\n            olmData.pendingSessionUuid = undefined;\n        });\n        this._reqs.set(uuid, d);\n\n        this._sendMessage(init, pId);\n\n        // Store the UUID for matching with the ACK.\n        olmData.pendingSessionUuid = uuid;\n\n        return d;\n    }\n}\n\n/**\n * Helper to ensure JSON parsing always returns an object.\n *\n * @param {string} data - The data that needs to be parsed.\n * @returns {object} - Parsed data or empty object in case of failure.\n */\nfunction safeJsonParse(data) {\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        return {};\n    }\n}\n\nOlmAdapter.events = OlmAdapterEvents;\n","import { getLogger } from '@jitsi/logger';\nimport debounce from 'lodash.debounce';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { KeyHandler } from './KeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\nimport { importKey, ratchet } from './crypto-utils';\n\nconst logger = getLogger(__filename);\n\n// Period which we'll wait before updating / rotating our keys when a participant\n// joins or leaves.\nconst DEBOUNCE_PERIOD = 5000;\n\n/**\n * This module integrates {@link E2EEContext} with {@link OlmAdapter} in order to distribute the keys for encryption.\n */\nexport class ManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new AutomaticKeyHandler instance, which will be used in a given conference.\n     */\n    constructor(conference) {\n        super(conference);\n\n        this._key = undefined;\n        this._conferenceJoined = false;\n\n        this._olmAdapter = new OlmAdapter(conference);\n\n        this._rotateKey = debounce(this._rotateKeyImpl, DEBOUNCE_PERIOD);\n        this._ratchetKey = debounce(this._ratchetKeyImpl, DEBOUNCE_PERIOD);\n\n        // Olm signalling events.\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_KEY_UPDATED,\n            this._onParticipantKeyUpdated.bind(this));\n\n        this.conference.on(\n            JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n            this._onParticipantPropertyChanged.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onParticipantJoined.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onParticipantLeft.bind(this));\n        this.conference.on(\n                JitsiConferenceEvents.CONFERENCE_JOINED,\n                () => {\n                    this._conferenceJoined = true;\n                });\n    }\n\n    /**\n     * When E2EE is enabled it initializes sessions and sets the key.\n     * Cleans up the sessions when disabled.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async _setEnabled(enabled) {\n        if (enabled) {\n            await this._olmAdapter.initSessions();\n        } else {\n            this._olmAdapter.clearAllParticipantsSessions();\n        }\n\n        // Generate a random key in case we are enabling.\n        this._key = enabled ? this._generateKey() : false;\n\n        // Send it to others using the E2EE olm channel.\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        // Set our key so we begin encrypting.\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's presence property.\n     *\n     * @param {JitsiParticipant} participant - The participant.\n     * @param {string} name - The name of the property that changed.\n     * @param {*} oldValue - The property's previous value.\n     * @param {*} newValue - The property's new value.\n     * @private\n     */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.idKey':\n            logger.debug(`Participant ${participant.getId()} updated their id key: ${newValue}`);\n            break;\n        case 'e2ee.enabled':\n            if (!newValue && this.enabled) {\n                this._olmAdapter.clearParticipantSession(participant);\n            }\n            break;\n        }\n    }\n\n    /**\n     * Advances (using ratcheting) the current key when a new participant joins the conference.\n     * @private\n     */\n    _onParticipantJoined() {\n        if (this._conferenceJoined && this.enabled) {\n            this._ratchetKey();\n        }\n    }\n\n    /**\n     * Rotates the current key when a participant leaves the conference.\n     * @private\n     */\n    _onParticipantLeft(id) {\n        this.e2eeCtx.cleanup(id);\n\n        if (this.enabled) {\n            this._rotateKey();\n        }\n    }\n\n    /**\n     * Rotates the local key. Rotating the key implies creating a new one, then distributing it\n     * to all participants and once they all received it, start using it.\n     *\n     * @private\n     */\n    async _rotateKeyImpl() {\n        logger.debug('Rotating key');\n\n        this._key = this._generateKey();\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Advances the current key by using ratcheting.\n     *\n     * @private\n     */\n    async _ratchetKeyImpl() {\n        logger.debug('Ratchetting key');\n\n        const material = await importKey(this._key);\n        const newKey = await ratchet(material);\n\n        this._key = new Uint8Array(newKey);\n\n        const index = this._olmAdapter.updateCurrentKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's key.\n     *\n     * @param {string} id - The participant ID.\n     * @param {Uint8Array | boolean} key - The new key for the participant.\n     * @param {Number} index - The new key's index.\n     * @private\n     */\n    _onParticipantKeyUpdated(id, key, index) {\n        logger.debug(`Participant ${id} updated their key`);\n\n        this.e2eeCtx.setKey(id, key, index);\n    }\n\n    /**\n     * Generates a new 256 bit random key.\n     *\n     * @returns {Uint8Array}\n     * @private\n     */\n    _generateKey() {\n        return window.crypto.getRandomValues(new Uint8Array(32));\n    }\n}\n","/**\n * Derives a set of keys from the master key.\n * @param {CryptoKey} material - master key to derive from\n *\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\n */\nexport async function deriveKeys(material) {\n    const info = new ArrayBuffer();\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\n    const encryptionKey = await crypto.subtle.deriveKey({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameEncryptionKey'),\n        hash: 'SHA-256',\n        info\n    }, material, {\n        name: 'AES-GCM',\n        length: 128\n    }, false, [ 'encrypt', 'decrypt' ]);\n\n    return {\n        material,\n        encryptionKey\n    };\n}\n\n/**\n * Ratchets a key. See\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\n * @param {CryptoKey} material - base key material\n * @returns {Promise<ArrayBuffer>} - ratcheted key material\n */\nexport async function ratchet(material) {\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\n    return crypto.subtle.deriveBits({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameRatchetKey'),\n        hash: 'SHA-256',\n        info: new ArrayBuffer()\n    }, material, 256);\n}\n\n/**\n * Converts a raw key into a WebCrypto key object with default options\n * suitable for our usage.\n * @param {ArrayBuffer} keyBytes - raw key\n * @param {Array} keyUsages - key usages, see importKey documentation\n * @returns {Promise<CryptoKey>} - the WebCrypto key.\n */\nexport async function importKey(keyBytes) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n    return crypto.subtle.importKey('raw', keyBytes, 'HKDF', false, [ 'deriveBits', 'deriveKey' ]);\n}\n","import browser from '../browser';\n\nimport { ExternallyManagedKeyHandler } from './ExternallyManagedKeyHandler';\nimport { ManagedKeyHandler } from './ManagedKeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\n\n/**\n * This module integrates {@link KeyHandler} with {@link JitsiConference} in order to enable E2E encryption.\n */\nexport class E2EEncryption {\n    /**\n     * A constructor.\n     * @param {JitsiConference} conference - The conference instance for which E2E encryption is to be enabled.\n     */\n    constructor(conference) {\n        const { e2ee = {} } = conference.options.config;\n\n        this._externallyManaged = e2ee.externallyManagedKey;\n\n        if (this._externallyManaged) {\n            this._keyHandler = new ExternallyManagedKeyHandler(conference);\n        } else {\n            this._keyHandler = new ManagedKeyHandler(conference);\n        }\n    }\n\n    /**\n     * Indicates if E2EE is supported in the current platform.\n     *\n     * @param {object} config - Global configuration.\n     * @returns {boolean}\n     */\n    static isSupported(config) {\n        const { e2ee = {} } = config;\n\n        if (!e2ee.externallyManagedKey && !OlmAdapter.isSupported()) {\n            return false;\n        }\n\n        return !(config.testing && config.testing.disableE2EE)\n            && (browser.supportsInsertableStreams()\n                || (config.enableEncodedTransformSupport && browser.supportsEncodedTransform()));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this._keyHandler.isEnabled();\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        await this._keyHandler.setEnabled(enabled);\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setEncryptionKey(keyInfo) {\n        this._keyHandler.setKey(keyInfo);\n    }\n}\n","import $ from 'jquery';\nimport { Strophe, b64_sha1 } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Produces a sha-1 from provided identity and features values.\n *\n * @param {Array<Object>} identities - The identity objects.\n * @param {Array<string>} features - The features.\n * @returns {string}\n */\nfunction generateSha(identities, features) {\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\n        (accumulatedValue, identity) => `${\n            IDENTITY_PROPERTIES.reduce(\n                (tmp, key, idx) =>\n                    tmp\n                        + (idx === 0 ? '' : '/')\n                        + (identity[key] ? identity[key] : ''),\n                '')\n        }<`, '');\n    const sortedFeatures = features.sort().reduce(\n        (tmp, feature) => `${tmp + feature}<`, '');\n\n    return b64_sha1(sortedIdentities + sortedFeatures);\n}\n\n/**\n * Parses the disco-info node and returns the sets of features and identities.\n * @param {String} node The node with results to parse.\n * @returns {{features: Set<any>, identities: Set<any>}}\n */\nexport function parseDiscoInfo(node) {\n    const features = new Set();\n    const identities = new Set();\n\n    $(node).find('>query>feature')\n        .each((_, el) => features.add(el.getAttribute('var')));\n    $(node).find('>query>identity')\n        .each((_, el) => identities.add({\n            type: el.getAttribute('type'),\n            name: el.getAttribute('name'),\n            category: el.getAttribute('category')\n        }));\n\n    return {\n        features,\n        identities\n    };\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.version = '';\n        this.rooms = new Set();\n\n        // We keep track of features added outside the library and we publish them\n        // in the presence of the participant for simplicity, avoiding the disco info request-response.\n        this.externalFeatures = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     * We put features used directly by the clients (is jibri, remote-control enabled etc.) in the presence\n     * to avoid additional disco-info queries by those clients.\n     */\n    addFeature(feature, submit = false, external = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n\n        if (external && !this.externalFeatures.has(feature)) {\n            this.externalFeatures.add(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     */\n    removeFeature(feature, submit = false, external = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n\n        if (external && this.externalFeatures.has(feature)) {\n            this.externalFeatures.delete(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Updates the presences in the room based on the current values in externalFeatures.\n     * @param {ChatRoom} room the room to update.\n     * @private\n     */\n    _updateRoomWithExternalFeatures(room) {\n        if (this.externalFeatures.size === 0) {\n            room.removeFromPresence('features');\n        } else {\n            const children = [];\n\n            this.externalFeatures.forEach(f => {\n                children.push({\n                    'tagName': 'feature',\n                    attributes: { 'var': f }\n                });\n            });\n\n            room.addOrReplaceInPresence('features', { children });\n        }\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\n        return this._getDiscoInfo(jid, node, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                resolve(parseDiscoInfo(response));\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        this._fixChatRoomPresenceMap(room);\n\n        this._updateRoomWithExternalFeatures(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addOrReplaceInPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        this.version\n            = generateSha(this.disco._identities, this.disco._features);\n\n        this._notifyVersionChanged();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\n\nconst logger = getLogger(__filename);\n\n/**\n * Module provides information about the current status of the internet\n * connection. Lib-jitsi-meet doesn't have any logic for detecting internet\n * online/offline, but rather it relies on the information supplied by the app\n * that uses it. By default the online state is assumed and the lib acts as if\n * it was connected. See {@link JitsiMeetJS.setNetworkInfo}.\n */\nexport class NetworkInfo extends Listenable {\n    /**\n     * Creates new {@link NetworkInfo} instance.\n     */\n    constructor() {\n        super();\n        this._current = {\n            isOnline: true\n        };\n    }\n\n    /**\n     * Updates the network info state.\n     *\n     * @param {object} state - The network info state.\n     * @param {boolean} state.isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    updateNetworkInfo({ isOnline }) {\n        logger.debug('updateNetworkInfo', { isOnline });\n        this._current = {\n            isOnline: isOnline === true\n        };\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\n    }\n\n    /**\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\n     * the lib's user wires the state through {@link JitsiMeetJS.setNetworkInfo} like the jitsi-meet does. Because of\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\n     * @returns {boolean}\n     */\n    isOnline() {\n        return this._current.isOnline === true;\n    }\n}\n\nconst networkInfo = new NetworkInfo();\n\nexport default networkInfo;\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    NETWORK_INFO_EVENT,\n    default as NetworkInfo\n} from '../connectivity/NetworkInfo';\nimport { getJitterDelay } from '../util/Retry';\n\nconst logger = getLogger(__filename);\n\n/**\n * The class contains the logic for triggering connection resume via XEP-0198 stream management.\n * It does two things, the first one is it tracks the internet online/offline status and it makes sure that\n * the reconnect is attempted only while online. The seconds thing is that it tracks the retry attempts and extends\n * the retry interval using the full jitter pattern.\n */\nexport default class ResumeTask {\n    /**\n     * Initializes new {@code RetryTask}.\n     * @param {Strophe.Connection} stropheConnection - The Strophe connection instance.\n     */\n    constructor(stropheConnection) {\n        this._stropheConn = stropheConnection;\n\n        /**\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\n         * @type {number}\n         * @private\n         */\n        this._resumeRetryN = 0;\n\n        this._retryDelay = undefined;\n    }\n\n    /**\n     * @returns {number|undefined} - How much the app will wait before trying to resume the XMPP connection. When\n     * 'undefined' it means that no resume task was not scheduled.\n     */\n    get retryDelay() {\n        return this._retryDelay;\n    }\n\n    /**\n     * Called by {@link XmppConnection} when the connection drops and it's a signal it wants to schedule a reconnect.\n     *\n     * @returns {void}\n     */\n    schedule() {\n        this._cancelResume();\n\n        this._resumeRetryN += 1;\n\n        this._networkOnlineListener\n            = NetworkInfo.addEventListener(\n                NETWORK_INFO_EVENT,\n                ({ isOnline }) => {\n                    if (isOnline) {\n                        this._scheduleResume();\n                    } else {\n                        this._cancelResume();\n                    }\n                });\n\n        NetworkInfo.isOnline() && this._scheduleResume();\n    }\n\n    /**\n     * Schedules a delayed timeout which will execute the resume action.\n     * @private\n     * @returns {void}\n     */\n    _scheduleResume() {\n        if (this._resumeTimeout) {\n\n            // NO-OP\n            return;\n        }\n\n        // The retry delay will be:\n        //   1st retry: 1.5s - 3s\n        //   2nd retry: 3s - 9s\n        //   3rd and next retry: 4.5s - 27s\n        this._resumeRetryN = Math.min(3, this._resumeRetryN);\n        this._retryDelay = getJitterDelay(\n            /* retry */ this._resumeRetryN,\n            /* minDelay */ this._resumeRetryN * 1500,\n            3);\n\n        logger.info(`Will try to resume the XMPP connection in ${this.retryDelay}ms`);\n\n        this._resumeTimeout = setTimeout(() => this._resumeConnection(), this.retryDelay);\n    }\n\n    /**\n     * Cancels the delayed resume task.\n     *\n     * @private\n     * @returns {void}\n     */\n    _cancelResume() {\n        if (this._resumeTimeout) {\n            logger.info('Canceling connection resume task');\n            clearTimeout(this._resumeTimeout);\n            this._resumeTimeout = undefined;\n            this._retryDelay = undefined;\n        }\n    }\n\n    /**\n     * Resumes the XMPP connection using the stream management plugin.\n     *\n     * @private\n     * @returns {void}\n     */\n    _resumeConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement.getResumeToken();\n\n        // Things may have changed since when the task was scheduled\n        if (!resumeToken) {\n            return;\n        }\n\n        logger.info('Trying to resume the XMPP connection');\n\n        const url = new URL(this._stropheConn.service);\n        let { search } = url;\n        const pattern = /(previd=)([\\w-]+)/;\n        const oldToken = search.match(pattern);\n\n        // Replace previd if the previd value has changed.\n        if (oldToken && oldToken.indexOf(resumeToken) === -1) {\n            search = search.replace(pattern, `$1${resumeToken}`);\n\n        // Append previd if it doesn't exist.\n        } else if (!oldToken) {\n            search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\n        }\n\n        url.search = search;\n\n        this._stropheConn.service = url.toString();\n\n        streamManagement.resume();\n    }\n\n    /**\n     * Cancels the retry task. It's called by {@link XmppConnection} when it's no longer interested in reconnecting for\n     * example when the disconnect method is called.\n     *\n     * @returns {void}\n     */\n    cancel() {\n        this._cancelResume();\n        this._resumeRetryN = 0;\n        if (this._networkOnlineListener) {\n            this._networkOnlineListener();\n            this._networkOnlineListener = null;\n        }\n    }\n}\n","/**\n* Gets next timeout using the full jitter pattern.\n*\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\n*\n* @param {number} retry - The retry number.\n* @param {number} minDelay - The minimal delay in milliseconds.\n* @param {number} base - The exponent base.\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\n* @private\n*/\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\n}\n","/**\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\n */\nexport default class LastRequestTracker {\n    /**\n     * Initializes new instance.\n     */\n    constructor() {\n        this._lastSuccess = null;\n        this._lastFailedMessage = null;\n    }\n\n    /**\n     * Starts tracking requests on the given connection.\n     *\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\n     * @param {Object} stropheConnection - Strophe connection instance.\n     */\n    startTracking(xmppConnection, stropheConnection) {\n        const originalRawInput = stropheConnection.rawInput;\n\n        stropheConnection.rawInput = (...args) => {\n            const rawMessage = args[0];\n\n            if (rawMessage.includes('failure')) {\n                this._lastFailedMessage = rawMessage;\n            }\n\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\n            if (xmppConnection.connected) {\n                this._lastSuccess = Date.now();\n            }\n            originalRawInput.apply(stropheConnection, args);\n        };\n    }\n\n    /**\n     * Returns the last raw failed incoming message on the xmpp connection.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._lastFailedMessage;\n    }\n\n    /**\n     * Returns how many milliseconds have passed since the last successful BOSH request.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccess\n            ? Date.now() - this._lastSuccess\n            : null;\n    }\n}\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","import { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Default ping every 10 sec\n */\nconst PING_DEFAULT_INTERVAL = 10000;\n\n/**\n * Default ping timeout error after 5 sec of waiting.\n */\nconst PING_DEFAULT_TIMEOUT = 5000;\n\n/**\n * Default value for how many ping failures will be tolerated before the WebSocket connection is killed.\n * The worst case scenario in case of ping timing out without a response is (25 seconds at the time of this writing):\n * PING_THRESHOLD * PING_INTERVAL + PING_TIMEOUT\n */\nconst PING_DEFAULT_THRESHOLD = 2;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nexport default class PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Constructs new object\n     * @param {Object} options\n     * @param {Function} options.onPingThresholdExceeded - Callback called when ping fails too many times (controlled\n     * by the {@link PING_THRESHOLD} constant).\n     * @param {Function} options._getTimeSinceLastServerResponse - A function to obtain the last seen\n     * response from the server.\n     * @param {Object} options.pingOptions - The ping options if any.\n     * @constructor\n     */\n    constructor({ getTimeSinceLastServerResponse, onPingThresholdExceeded, pingOptions = {} }) {\n        super();\n        this.failedPings = 0;\n        this._onPingThresholdExceeded = onPingThresholdExceeded;\n        this._getTimeSinceLastServerResponse = getTimeSinceLastServerResponse;\n\n        this.pingInterval = typeof pingOptions.interval === 'number' ? pingOptions.interval : PING_DEFAULT_INTERVAL;\n        this.pingTimeout = typeof pingOptions.timeout === 'number' ? pingOptions.timeout : PING_DEFAULT_TIMEOUT;\n        this.pingThreshold = typeof pingOptions.threshold === 'number'\n            ? pingOptions.threshold : PING_DEFAULT_THRESHOLD;\n\n        // The number of timestamps of send pings to keep.\n        // The current value is 2 minutes.\n        this.pingTimestampsToKeep = Math.round(120000 / this.pingInterval);\n        this.pingExecIntervals = new Array(this.pingTimestampsToKeep);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ2(iq, { timeout })\n            .then(success, error);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     */\n    startInterval(remoteJid) {\n        clearInterval(this.intervalId);\n        this.intervalId = window.setInterval(() => {\n\n            // when there were some server responses in the interval since the last time we checked (_lastServerCheck)\n            // let's skip the ping\n\n            const now = Date.now();\n\n            if (this._getTimeSinceLastServerResponse() < now - this._lastServerCheck) {\n                // do this just to keep in sync the intervals so we can detect suspended device\n                this._addPingExecutionTimestamp();\n\n                this._lastServerCheck = now;\n                this.failedPings = 0;\n\n                return;\n            }\n\n            this.ping(remoteJid, () => {\n                // server response is measured on raw input and ping response time is measured after all the xmpp\n                // processing is done in js, so there can be some misalignment when we do the check above.\n                // That's why we store the last time we got the response\n                this._lastServerCheck = this._getTimeSinceLastServerResponse() + Date.now();\n\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= this.pingThreshold) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n                    this._onPingThresholdExceeded && this._onPingThresholdExceeded();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, this.pingTimeout);\n        }, this.pingInterval);\n        logger.info(`XMPP pings will be sent every ${this.pingInterval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > this.pingTimestampsToKeep) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= this.pingInterval;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $pres, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-stream-management';\n\nimport Listenable from '../util/Listenable';\n\nimport ResumeTask from './ResumeTask';\nimport LastSuccessTracker from './StropheLastSuccess';\nimport PingConnectionPlugin from './strophe.ping';\n\nconst logger = getLogger(__filename);\n\n/**\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\n */\nexport default class XmppConnection extends Listenable {\n    /**\n     * The list of {@link XmppConnection} events.\n     *\n     * @returns {Object}\n     */\n    static get Events() {\n        return {\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED',\n            CONN_SHARD_CHANGED: 'CONN_SHARD_CHANGED'\n        };\n    }\n\n    /**\n     * The list of Xmpp connection statuses.\n     *\n     * @returns {Strophe.Status}\n     */\n    static get Status() {\n        return Strophe.Status;\n    }\n\n    /**\n     * Initializes new connection instance.\n     *\n     * @param {Object} options\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\n     * @param {String} options.shard - The BOSH or WebSocket is connecting to this shard.\n     * Useful for detecting when shard changes.\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\n     * It will enable automatically by default if supported by the XMPP server.\n     * @param {Number} [options.websocketKeepAlive=60000] - The websocket keep alive interval.\n     * It's the interval + a up to a minute of jitter. Pass -1 to disable.\n     * The keep alive is HTTP GET request to {@link options.serviceUrl} or to {@link options.websocketKeepAliveUrl}.\n     * @param {Number} [options.websocketKeepAliveUrl] - The websocket keep alive url to use if any,\n     * if missing the serviceUrl url will be used.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     */\n    constructor({ enableWebsocketResume, websocketKeepAlive, websocketKeepAliveUrl, serviceUrl, shard, xmppPing }) {\n        super();\n        this._options = {\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\n            pingOptions: xmppPing,\n            shard,\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 60 * 1000 : Number(websocketKeepAlive),\n            websocketKeepAliveUrl\n        };\n\n        this._stropheConn = new Strophe.Connection(serviceUrl);\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\n\n        // The default maxRetries is 5, which is too long.\n        this._stropheConn.maxRetries = 3;\n\n        this._rawInputTracker = new LastSuccessTracker();\n        this._rawInputTracker.startTracking(this, this._stropheConn);\n\n        this._resumeTask = new ResumeTask(this._stropheConn);\n\n        /**\n         * @typedef DeferredSendIQ Object\n         * @property {Element} iq - The IQ to send.\n         * @property {function} resolve - The resolve method of the deferred Promise.\n         * @property {function} reject - The reject method of the deferred Promise.\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\n         */\n        /**\n         * Deferred IQs to be sent upon reconnect.\n         * @type {Array<DeferredSendIQ>}\n         * @private\n         */\n        this._deferredIQs = [];\n\n        // Ping plugin is mandatory for the Websocket mode to work correctly. It's used to detect when the connection\n        // is broken (WebSocket/TCP connection not closed gracefully).\n        this.addConnectionPlugin(\n            'ping',\n            new PingConnectionPlugin({\n                getTimeSinceLastServerResponse: () => this.getTimeSinceLastSuccess(),\n                onPingThresholdExceeded: () => this._onPingErrorThresholdExceeded(),\n                pingOptions: xmppPing\n            }));\n\n        // tracks whether this is the initial connection or a reconnect\n        this._oneSuccessfulConnect = false;\n    }\n\n    /**\n     * A getter for the connected state.\n     *\n     * @returns {boolean}\n     */\n    get connected() {\n        const websocket = this._stropheConn && this._stropheConn._proto && this._stropheConn._proto.socket;\n\n        return (this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED)\n            && (!this.isUsingWebSocket || (websocket && websocket.readyState === WebSocket.OPEN));\n    }\n\n    /**\n     * Retrieves the feature discovery plugin instance.\n     *\n     * @returns {Strophe.Connection.disco}\n     */\n    get disco() {\n        return this._stropheConn.disco;\n    }\n\n    /**\n     * A getter for the disconnecting state.\n     *\n     * @returns {boolean}\n     */\n    get disconnecting() {\n        return this._stropheConn.disconnecting === true;\n    }\n\n    /**\n     * A getter for the domain.\n     *\n     * @returns {string|null}\n     */\n    get domain() {\n        return this._stropheConn.domain;\n    }\n\n    /**\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\n     * for BOSH.\n     * @returns {boolean}\n     */\n    get isUsingWebSocket() {\n        return this._usesWebsocket;\n    }\n\n    /**\n     * A getter for the JID.\n     *\n     * @returns {string|null}\n     */\n    get jid() {\n        return this._stropheConn.jid;\n    }\n\n    /**\n     * Returns headers for the last BOSH response received.\n     *\n     * @returns {string}\n     */\n    get lastResponseHeaders() {\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\n    }\n\n    /**\n     * A getter for the logger plugin instance.\n     *\n     * @returns {*}\n     */\n    get logger() {\n        return this._stropheConn.logger;\n    }\n\n    /**\n     * A getter for the connection options.\n     *\n     * @returns {*}\n     */\n    get options() {\n        return this._stropheConn.options;\n    }\n\n    /**\n     * A getter for the domain to be used for ping.\n     */\n    get pingDomain() {\n        return this._options.pingOptions?.domain || this.domain;\n    }\n\n    /**\n     * A getter for the service URL.\n     *\n     * @returns {string}\n     */\n    get service() {\n        return this._stropheConn.service;\n    }\n\n    /**\n     * Sets new value for shard.\n     * @param value the new shard value.\n     */\n    set shard(value) {\n        this._options.shard = value;\n\n        // shard setting changed so let's schedule a new keep-alive check if connected\n        if (this._oneSuccessfulConnect) {\n            this._maybeStartWSKeepAlive();\n        }\n    }\n\n    /**\n     * Returns the current connection status.\n     *\n     * @returns {Strophe.Status}\n     */\n    get status() {\n        return this._status;\n    }\n\n    /**\n     * Adds a connection plugin to this instance.\n     *\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\n     * instance.\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\n     */\n    addConnectionPlugin(name, plugin) {\n        this[name] = plugin;\n        plugin.init(this);\n    }\n\n    /**\n     * See {@link Strophe.Connection.addHandler}\n     *\n     * @returns {void}\n     */\n    addHandler(...args) {\n        this._stropheConn.addHandler(...args);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.attach} for the params description.\n     *\n     * @returns {void}\n     */\n    attach(jid, sid, rid, callback, ...args) {\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /**\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.connect} for the params description.\n     *\n     * @returns {void}\n     */\n    connect(jid, pass, callback, ...args) {\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Handles {@link Strophe.Status} updates for the current connection.\n     *\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\n     * the connect methods.\n     * @param {Strophe.Status} status - The new connection status.\n     * @param {*} args - The rest of the arguments passed by Strophe.\n     * @private\n     */\n    _stropheConnectionCb(targetCallback, status, ...args) {\n        this._status = status;\n\n        let blockCallback = false;\n\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            this._maybeEnableStreamResume();\n\n            // after connecting - immediately check whether shard changed,\n            // we need this only when using websockets as bosh checks headers from every response\n            if (this._usesWebsocket && this._oneSuccessfulConnect) {\n                this._keepAliveAndCheckShard();\n            }\n            this._oneSuccessfulConnect = true;\n\n            this._maybeStartWSKeepAlive();\n            this._processDeferredIQs();\n            this._resumeTask.cancel();\n            this.ping.startInterval(this._options.pingOptions?.domain || this.domain);\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            this.ping.stopInterval();\n\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\n            blockCallback = this._tryResumingConnection();\n            if (!blockCallback) {\n                clearTimeout(this._wsKeepAlive);\n            }\n        }\n\n        if (!blockCallback) {\n            targetCallback(status, ...args);\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\n        }\n    }\n\n    /**\n     * Clears the list of IQs and rejects deferred Promises with an error.\n     *\n     * @private\n     */\n    _clearDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            deferred.reject(new Error('disconnect'));\n        }\n        this._deferredIQs = [];\n    }\n\n    /**\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\n     *\n     * @returns {void}\n     */\n    closeWebsocket() {\n        if (this._stropheConn && this._stropheConn._proto) {\n            this._stropheConn._proto._closeSocket();\n            this._stropheConn._proto._onClose(null);\n        }\n    }\n\n    /**\n     * See {@link Strophe.Connection.disconnect}.\n     *\n     * @returns {void}\n     */\n    disconnect(...args) {\n        this._resumeTask.cancel();\n        clearTimeout(this._wsKeepAlive);\n        this._clearDeferredIQs();\n        this._stropheConn.disconnect(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.flush}.\n     *\n     * @returns {void}\n     */\n    flush(...args) {\n        this._stropheConn.flush(...args);\n    }\n\n    /**\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._rawInputTracker.getTimeSinceLastSuccess();\n    }\n\n    /**\n     * See {@link LastRequestTracker.getLastFailedMessage}.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._rawInputTracker.getLastFailedMessage();\n    }\n\n    /**\n     * Requests a resume token from the server if enabled and all requirements are met.\n     *\n     * @private\n     */\n    _maybeEnableStreamResume() {\n        if (!this._options.enableWebsocketResume) {\n\n            return;\n        }\n\n        const { streamManagement } = this._stropheConn;\n\n        if (!this.isUsingWebSocket) {\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\n        } else if (!streamManagement) {\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\n        } else if (!streamManagement.isSupported()) {\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\n        } else if (!streamManagement.getResumeToken()) {\n            logger.info('Enabling XEP-0198 stream management');\n            streamManagement.enable(/* resume */ true);\n        }\n    }\n\n    /**\n     * Starts the Websocket keep alive if enabled.\n     *\n     * @private\n     * @returns {void}\n     */\n    _maybeStartWSKeepAlive() {\n        const { websocketKeepAlive } = this._options;\n\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\n            clearTimeout(this._wsKeepAlive);\n\n            const intervalWithJitter = /* base */ websocketKeepAlive + /* jitter */ (Math.random() * 60 * 1000);\n\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\n\n            this._wsKeepAlive = setTimeout(\n                () => this._keepAliveAndCheckShard()\n                    .then(() => this._maybeStartWSKeepAlive()),\n                intervalWithJitter);\n        }\n    }\n\n    /**\n     * Do a http GET to the shard and if shard change will throw an event.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _keepAliveAndCheckShard() {\n        const { shard, websocketKeepAliveUrl } = this._options;\n        const url = websocketKeepAliveUrl ? websocketKeepAliveUrl\n            : this.service.replace('wss://', 'https://').replace('ws://', 'http://');\n\n        return fetch(url)\n            .then(response => {\n\n                // skips header checking if there is no info in options\n                if (!shard) {\n                    return;\n                }\n\n                const responseShard = response.headers.get('x-jitsi-shard');\n\n                if (responseShard !== shard) {\n                    logger.error(\n                        `Detected that shard changed from ${shard} to ${responseShard}`);\n                    this.eventEmitter.emit(XmppConnection.Events.CONN_SHARD_CHANGED);\n                }\n            })\n            .catch(error => {\n                logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\n            });\n    }\n\n    /**\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\n     *\n     * @private\n     * @returns {void}\n     */\n    _processDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            if (deferred.iq) {\n                clearTimeout(deferred.timeout);\n\n                const timeLeft = Date.now() - deferred.start;\n\n                this.sendIQ(\n                    deferred.iq,\n                    result => deferred.resolve(result),\n                    error => deferred.reject(error),\n                    timeLeft);\n            }\n        }\n\n        this._deferredIQs = [];\n    }\n\n    /**\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\n     *\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\n     * @returns {void}\n     */\n    send(stanza) {\n        if (!this.connected) {\n            throw new Error('Not connected');\n        }\n        this._stropheConn.send(stanza);\n    }\n\n    /**\n     * Helper function to send IQ stanzas.\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the IQ.\n     */\n    sendIQ(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\n    }\n\n    /**\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\n     * which would fail immediately if disconnected).\n     *\n     * @param {Element} iq - The IQ to send.\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\n     * included, which means that the IQ may never be sent and still fail with a timeout.\n     */\n    sendIQ2(iq, { timeout }) {\n        return new Promise((resolve, reject) => {\n            if (this.connected) {\n                this.sendIQ(\n                    iq,\n                    result => resolve(result),\n                    error => reject(error),\n                    timeout);\n            } else {\n                const deferred = {\n                    iq,\n                    resolve,\n                    reject,\n                    start: Date.now(),\n                    timeout: setTimeout(() => {\n                        // clears the IQ on timeout and invalidates the deferred task\n                        deferred.iq = undefined;\n\n                        // Strophe calls with undefined on timeout\n                        reject(undefined);\n                    }, timeout)\n                };\n\n                this._deferredIQs.push(deferred);\n            }\n        });\n    }\n\n    /**\n     * Called by the ping plugin when ping fails too many times.\n     *\n     * @returns {void}\n     */\n    _onPingErrorThresholdExceeded() {\n        if (this.isUsingWebSocket) {\n            logger.warn('Ping error threshold exceeded - killing the WebSocket');\n            this.closeWebsocket();\n        }\n    }\n\n    /**\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the presence.\n     */\n    sendPresence(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\n    }\n\n    /**\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\n     *\n     * @returns {boolean} - true if the beacon was sent.\n     */\n    sendUnavailableBeacon() {\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\n            return false;\n        }\n\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\n        this._stropheConn.disconnecting = true;\n\n        const body = this._stropheConn._proto._buildBody()\n            .attrs({\n                type: 'terminate'\n            });\n        const pres = $pres({\n            xmlns: Strophe.NS.CLIENT,\n            type: 'unavailable'\n        });\n\n        body.cnode(pres.tree());\n\n        const res = navigator.sendBeacon(\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\n            Strophe.serialize(body.tree()));\n\n        logger.info(`Successfully send unavailable beacon ${res}`);\n\n        this._stropheConn._proto._abortAllRequests();\n        this._stropheConn._doDisconnect();\n\n        return true;\n    }\n\n    /**\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\n     * the token is present it means the connection can be resumed.\n     *\n     * @private\n     * @returns {boolean}\n     */\n    _tryResumingConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\n\n        if (resumeToken) {\n            this._resumeTask.schedule();\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","export enum JitsiTranscriptionStatus {\n    /**\n     * The transcription is on.\n     */\n    ON = 'on',\n\n    /**\n     * The transcription is off.\n     */\n    OFF = 'off'\n}\n\n// exported for backward compatibility\nexport const ON = JitsiTranscriptionStatus.ON;\nexport const OFF = JitsiTranscriptionStatus.OFF;\n","import { getLogger } from '@jitsi/logger';\nimport { $msg } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AVModeration logic.\n */\nexport default class AVModeration {\n\n    /**\n     * Constructs AV moderation room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this._xmpp = room.xmpp;\n\n        this._mainRoom = room;\n\n        this._moderationEnabledByType = {\n            [MediaType.AUDIO]: false,\n            [MediaType.VIDEO]: false\n        };\n\n        this._whitelistAudio = [];\n        this._whitelistVideo = [];\n\n        this._onMessage = this._onMessage.bind(this);\n        this._xmpp.addListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this._xmpp.removeListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Whether AV moderation is supported on backend.\n     *\n     * @returns {boolean} whether AV moderation is supported on backend.\n     */\n    isSupported() {\n        return Boolean(this._xmpp.avModerationComponentAddress);\n    }\n\n    /**\n     * Enables or disables AV Moderation by sending a msg with command to the component.\n     */\n    enable(state, mediaType) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot enable:${state} AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        if (state === this._moderationEnabledByType[mediaType]) {\n            logger.warn(`Moderation already in state:${state} for mediaType:${mediaType}`);\n\n            return;\n        }\n\n        // send the enable/disable message\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            enable: state,\n            mediaType\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Approves that a participant can unmute by sending a msg with its jid to the component.\n     */\n    approve(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot approve in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to whitelist the jid and approve it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToWhitelist: jid }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Rejects that a participant can unmute by sending a msg with its jid to the component.\n     */\n    reject(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot reject in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to remove from whitelist the jid and reject it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToBlacklist: jid\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Receives av_moderation parsed messages as json.\n     * @param obj the parsed json content of the message to process.\n     * @private\n     */\n    _onMessage(obj) {\n        const { removed, mediaType: media, enabled, approved, actor, whitelists: newWhitelists } = obj;\n\n        if (newWhitelists) {\n            const oldList = media === MediaType.AUDIO\n                ? this._whitelistAudio\n                : this._whitelistVideo;\n            const newList = Array.isArray(newWhitelists[media]) ? newWhitelists[media] : [];\n\n            if (removed) {\n                oldList.filter(x => !newList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED, media, jid));\n            } else {\n                newList.filter(x => !oldList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED, media, jid));\n            }\n\n            if (media === MediaType.AUDIO) {\n                this._whitelistAudio = newList;\n            } else {\n                this._whitelistVideo = newList;\n            }\n        } else if (enabled !== undefined && this._moderationEnabledByType[media] !== enabled) {\n            this._moderationEnabledByType[media] = enabled;\n\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_CHANGED, enabled, media, actor);\n        } else if (removed) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_REJECTED, media);\n        } else if (approved) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_APPROVED, media);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst FEATURE_KEY = 'features/breakout-rooms';\nconst BREAKOUT_ROOM_ACTIONS = {\n    ADD: `${FEATURE_KEY}/add`,\n    REMOVE: `${FEATURE_KEY}/remove`,\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`\n};\nconst BREAKOUT_ROOM_EVENTS = {\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`,\n    UPDATE: `${FEATURE_KEY}/update`\n};\n\nconst logger = getLogger(__filename);\n\n/**\n * Helper class for handling breakout rooms.\n */\nexport default class BreakoutRooms {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the room we are in.\n     */\n    constructor(room) {\n        this.room = room;\n\n        this._handleMessages = this._handleMessages.bind(this);\n        this.room.xmpp.addListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n\n        this._rooms = {};\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this.room.xmpp.removeListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n    }\n\n    /**\n     * Creates a breakout room with the given subject.\n     *\n     * @param {string} subject - A subject for the breakout room.\n     */\n    createBreakoutRoom(subject) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot create breakout room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.ADD,\n            subject\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Removes a breakout room.\n     *\n     * @param {string} breakoutRoomJid - JID of the room to be removed.\n     */\n    removeBreakoutRoom(breakoutRoomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot remove breakout room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.REMOVE,\n            breakoutRoomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Sends the given participant to the given room.\n     *\n     * @param {string} participantJid - JID of the participant to be sent to a room.\n     * @param {string} roomJid - JID of the target room.\n     */\n    sendParticipantToRoom(participantJid, roomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot send participant to room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.MOVE_TO_ROOM,\n            participantJid,\n            roomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Whether Breakout Rooms support is enabled in the backend or not.\n     */\n    isSupported() {\n        return Boolean(this.getComponentAddress());\n    }\n\n    /**\n     * Gets the address of the Breakout Rooms XMPP component.\n     *\n     * @returns The address of the component.\n     */\n    getComponentAddress() {\n        return this.room.xmpp.breakoutRoomsComponentAddress;\n    }\n\n    /**\n     * Stores if the current room is a breakout room.\n     *\n     * @param {boolean} isBreakoutRoom - Whether this room is a breakout room.\n     */\n    _setIsBreakoutRoom(isBreakoutRoom) {\n        this._isBreakoutRoom = isBreakoutRoom;\n    }\n\n    /**\n     * Checks whether this room is a breakout room.\n     *\n     * @returns True if the room is a breakout room, false otherwise.\n     */\n    isBreakoutRoom() {\n        if (typeof this._isBreakoutRoom !== 'undefined') {\n            return this._isBreakoutRoom;\n        }\n\n        // Use heuristic, helpful for checking in the MUC_JOINED event.\n        return Strophe.getDomainFromJid(this.room.myroomjid) === this.getComponentAddress();\n    }\n\n    /**\n     * Sets the main room JID associated with this breakout room. Only applies when\n     * in a breakout room.\n     *\n     * @param {string} jid - The main room JID.\n     */\n    _setMainRoomJid(jid) {\n        this._mainRoomJid = jid;\n    }\n\n    /**\n     * Gets the main room's JID associated with this breakout room.\n     *\n     * @returns The main room JID.\n     */\n    getMainRoomJid() {\n        return this._mainRoomJid;\n    }\n\n    /**\n     * Handles a message for managing breakout rooms.\n     *\n     * @param {object} payload - Arbitrary data.\n     */\n    _handleMessages(payload) {\n        switch (payload.event) {\n        case BREAKOUT_ROOM_EVENTS.MOVE_TO_ROOM:\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM, payload.roomJid);\n            break;\n        case BREAKOUT_ROOM_EVENTS.UPDATE: {\n            this._rooms = payload.rooms;\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_UPDATED, payload);\n            break;\n        }\n        }\n    }\n\n    /**\n     * Helper to send a breakout rooms message to the component.\n     *\n     * @param {Object} message - Command that needs to be sent.\n     */\n    _sendMessage(message) {\n        const msg = $msg({ to: this.getComponentAddress() });\n\n        msg.c('breakout_rooms', message).up();\n\n        this.room.xmpp.connection.send(msg);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The command type for updating a lobby participant's e-mail address.\n *\n * @type {string}\n */\nconst EMAIL_COMMAND = 'email';\n\n/**\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\n * approving or denying access to participants from the lobby room.\n */\nexport default class Lobby {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this.xmpp = room.xmpp;\n        this.mainRoom = room;\n\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.LOCAL_ROLE_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n            jid => {\n                this.lobbyRoomJid = jid;\n            });\n    }\n\n    /**\n     * Whether lobby is supported on backend.\n     *\n     * @returns {boolean} whether lobby is supported on backend.\n     */\n    isSupported() {\n        return this.xmpp.lobbySupported;\n    }\n\n    /**\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\n     *\n     * @returns {Promise}\n     */\n    enable() {\n        if (!this.isSupported()) {\n            return Promise.reject(new Error('Lobby not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.mainRoom.setMembersOnly(true, resolve, reject);\n        });\n    }\n\n    /**\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\n     *\n     * @returns {void}\n     */\n    disable() {\n        if (!this.isSupported() || !this.mainRoom.isModerator()\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\n            return;\n        }\n\n        this.mainRoom.setMembersOnly(false);\n    }\n\n    /**\n     * Broadcast a message to all participants in the lobby room\n     * @param {Object} message The message to send\n     *\n     * @returns {void}\n     */\n    sendMessage(message) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.sendMessage(JSON.stringify(message), 'json-message');\n        }\n    }\n\n    /**\n     * Sends a private message to a participant in a lobby room.\n     * @param {string} id The message to send\n     * @param {Object} message The message to send\n     *\n     * @returns {void}\n     */\n    sendPrivateMessage(id, message) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.sendPrivateMessage(id, JSON.stringify(message), 'json-message');\n        }\n    }\n\n    /**\n     * Gets the local id for a participant in a lobby room.\n     * This is used for lobby room private chat messages.\n     *\n     * @returns {string}\n     */\n    getLocalId() {\n        if (this.lobbyRoom) {\n            return Strophe.getResourceFromJid(this.lobbyRoom.myroomjid);\n        }\n    }\n\n    /**\n     * Adds a message listener to the lobby room.\n     * @param {Function} listener The listener function,\n     * called when a new message is received in the lobby room.\n     *\n     * @returns {Function} Handler returned to be able to remove it later.\n     */\n    addMessageListener(listener) {\n        if (this.lobbyRoom) {\n            const handler = (participantId, message) => {\n                listener(message, Strophe.getResourceFromJid(participantId));\n            };\n\n            this.lobbyRoom.on(XMPPEvents.JSON_MESSAGE_RECEIVED, handler);\n\n            return handler;\n        }\n    }\n\n    /**\n     * Remove a message handler from the lobby room.\n     * @param {Function} handler The handler function to remove.\n     *\n     * @returns {void}\n     */\n    removeMessageHandler(handler) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.off(XMPPEvents.JSON_MESSAGE_RECEIVED, handler);\n        }\n    }\n\n    /**\n     * Leaves the lobby room.\n     *\n     * @returns {Promise}\n     */\n    leave() {\n        if (this.lobbyRoom) {\n            return this.lobbyRoom.leave()\n                .then(() => {\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left!');\n                })\n                .catch(() => {}); // eslint-disable-line no-empty-function\n        }\n\n        return Promise.reject(\n                new Error('The lobby has already been left'));\n    }\n\n    /**\n     * We had received a jid for the lobby room.\n     *\n     * @param jid the lobby room jid to join.\n     */\n    setLobbyRoomJid(jid) {\n        this.lobbyRoomJid = jid;\n    }\n\n    /**\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\n     * @private\n     */\n    _maybeJoinLobbyRoom() {\n        if (!this.isSupported()) {\n            return;\n        }\n\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\n            // join the lobby\n            this.join()\n                .then(() => logger.info('Joined lobby room'))\n                .catch(e => logger.error('Failed joining lobby', e));\n        }\n    }\n\n    /**\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\n     *\n     * @param {string} username is required.\n     * @param {string} email is optional.\n     * @returns {Promise} resolves once we join the room.\n     */\n    join(displayName, email) {\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (!this.lobbyRoomJid) {\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\n        }\n\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\n\n        this.lobbyRoom = this.xmpp.createRoom(\n            roomName, {\n                customDomain,\n                disableDiscoInfo: true,\n                disableFocus: true,\n                enableLobby: false\n            }\n        );\n\n        if (displayName) {\n            // remove previously set nickname\n            this.lobbyRoom.addOrReplaceInPresence('nick', {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: displayName\n            });\n        }\n\n        if (isModerator) {\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\n            });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_JOINED,\n                // eslint-disable-next-line max-params\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\n                    // we need to ignore joins on lobby for participants that are already in the main room\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\n                        return;\n                    }\n\n                    // Check if the user is a member if any breakout room.\n                    for (const room of Object.values(this.mainRoom.getBreakoutRooms()._rooms)) {\n                        if (Object.values(room.participants).find(p => p.jid === jid)) {\n                            return;\n                        }\n                    }\n\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n                        Strophe.getResourceFromJid(from),\n                        nick,\n                        identity ? identity.avatar : undefined\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n                        Strophe.getResourceFromJid(from)\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                () => {\n                    // let's make sure we emit that all lobby users had left\n                    Object.keys(this.lobbyRoom.members)\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\n\n                    this.lobbyRoom.clean();\n\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left(destroyed)!');\n                });\n        } else {\n            // this should only be handled by those waiting in lobby\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\n                if (isSelfPresence) {\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\n\n                    this.lobbyRoom.clean();\n\n                    return;\n                }\n            });\n\n            // As there is still reference of the main room\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\n            // the invite message should be received directly to the xmpp conn in general\n            this.mainRoom.addEventListener(\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                (roomJid, from, txt, invitePassword) => {\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\n                    if (roomJid === this.mainRoom.roomjid) {\n                        // we are now allowed, so let's join\n                        this.mainRoom.join(invitePassword);\n                    }\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                (reason, jid) => {\n                    // we are receiving the jid of the main room\n                    // means we are invited to join, maybe lobby was disabled\n                    if (jid) {\n                        this.mainRoom.join();\n\n                        return;\n                    }\n\n                    this.lobbyRoom.clean();\n\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n                });\n\n            // If participant retries joining shared password while waiting in the lobby\n            // and succeeds make sure we leave lobby\n            this.mainRoom.addEventListener(\n                XMPPEvents.MUC_JOINED,\n                () => {\n                    this.leave();\n                });\n        }\n\n        return new Promise((resolve, reject) => {\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\n                resolve();\n\n                // send our email, as we do not handle this on initial presence we need a second one\n                if (email && !isModerator) {\n                    this.lobbyRoom.addOrReplaceInPresence(EMAIL_COMMAND, { value: email })\n                        && this.lobbyRoom.sendPresence();\n                }\n            });\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\n\n            this.lobbyRoom.join();\n        });\n\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    denyAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const jid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (jid) {\n            this.lobbyRoom.kick(jid);\n        } else {\n            logger.error(`Not found member for ${id} in lobby room.`);\n        }\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    approveAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        // Get the main room JID. If we are in a breakout room we'll use the main\n        // room's lobby.\n        let mainRoomJid = this.mainRoom.roomjid;\n\n        if (this.mainRoom.getBreakoutRooms().isBreakoutRoom()) {\n            mainRoomJid = this.mainRoom.getBreakoutRooms().getMainRoomJid();\n        }\n\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (memberRoomJid) {\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\n            const msgToSend\n                = $msg({ to: mainRoomJid })\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\n                    .c('invite', { to: jid });\n\n            this.xmpp.connection.sendIQ(msgToSend,\n                () => { }, // eslint-disable-line no-empty-function\n                e => {\n                    logger.error(`Error sending invite for ${jid}`, e);\n                });\n        } else {\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\nimport { $msg } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport { JITSI_MEET_MUC_TYPE } from './xmpp';\n\nconst logger = getLogger(__filename);\n\n/**\n * Helper class for handling room metadata.\n */\nexport default class RoomMetadata {\n    room: any;\n    _metadata: any;\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the room we are in.\n     */\n    constructor(room) {\n        this.room = room;\n\n        this._handleMessages = this._handleMessages.bind(this);\n        this.room.xmpp.addListener(XMPPEvents.ROOM_METADATA_EVENT, this._handleMessages);\n\n        this._metadata = {};\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this.room.xmpp.removeListener(XMPPEvents.ROOM_METADATA_EVENT, this._handleMessages);\n    }\n\n    /**\n     * Sets metadata for the given key.\n     *\n     * @param {string} key - key under which the  metadata will be stored.\n     * @param {object} data - data to be stored.\n     */\n    setMetadata(key, data) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot set room metadata - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            key,\n            data\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Gets the stored metadata (all of it).\n     *\n     * @returns The stored metadata.\n     */\n    getMetadata() {\n        return this._metadata;\n    }\n\n    /**\n     * Whether Breakout Rooms support is enabled in the backend or not.\n     */\n    isSupported() {\n        return Boolean(this.getComponentAddress());\n    }\n\n    /**\n     * Gets the address of the Breakout Rooms XMPP component.\n     *\n     * @returns The address of the component.\n     */\n    getComponentAddress() {\n        return this.room.xmpp.roomMetadataComponentAddress;\n    }\n\n    /**\n     * Handles a message with metadata updates.\n     *\n     * @param {object} payload - Arbitrary data.\n     */\n    _handleMessages(payload) {\n        const { metadata } = payload;\n\n        if (!metadata || isEqual(this._metadata, metadata)) {\n            return;\n        }\n\n        this._metadata = metadata;\n        this.room.eventEmitter.emit(XMPPEvents.ROOM_METADATA_UPDATED, metadata);\n    }\n\n    /**\n     * Helper to send a breakout rooms message to the component.\n     *\n     * @param {Object} message - Command that needs to be sent.\n     */\n    _sendMessage(message) {\n        message[JITSI_MEET_MUC_TYPE] = 'room_metadata';\n\n        const msg = $msg({ to: this.getComponentAddress() });\n\n        msg.c('room_metadata', {\n            room: this.room.roomjid,\n            xmlns: 'http://jitsi.org/jitmeet'\n        }, JSON.stringify(message)).up();\n\n        this.room.xmpp.connection.send(msg);\n    }\n}\n","import { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n\n    /**\n     * The storage used to store the settings.\n     */\n    _storage: jitsiLocalStorage,\n\n    /**\n     * Initializes the Settings class.\n     *\n     * @param {Storage|undefined} externalStorage - Object that implements the Storage interface. This object will be\n     * used for storing data instead of jitsiLocalStorage if specified.\n     */\n    init(externalStorage) {\n        this._storage = externalStorage || jitsiLocalStorage;\n    },\n\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            _callStatsUserName = this._storage.getItem('callStatsUserName');\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                this._storage.setItem('callStatsUserName', _callStatsUserName);\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            const amDid = this._storage.getItem('billingId');\n\n            _machineId = amDid || this._storage.getItem('jitsiMeetId');\n\n            if (amDid) {\n                this._storage.setItem('jitsiMeetId', amDid);\n            } else if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                this._storage.setItem('jitsiMeetId', _machineId);\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        return this._storage.getItem('sessionId');\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        if (sessionId) {\n            this._storage.setItem('sessionId', sessionId);\n        } else {\n            this._storage.removeItem('sessionId');\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport Settings from '../settings/Settings';\n\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst { XMPPEvents } = require('../../service/xmpp/XMPPEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return timeout * step;\n    };\n}\n\n/* eslint-disable max-params */\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.xmppService = xmpp;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n    this.options = options;\n\n    // Whether SIP gateway (jigasi) support is enabled. This is set\n    // based on conference properties received in presence.\n    this.sipGatewayEnabled = false;\n\n    this.eventEmitter = emitter;\n\n    this.connection = this.xmppService.connection;\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(\n                    `Ignoring sessionId from different origin: ${\n                        event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\n/* eslint-enable max-params */\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\nModerator.prototype.onMucMemberLeft = function(jid) {\n    const resource = Strophe.getResourceFromJid(jid);\n\n    if (resource === 'focus') {\n        logger.info(\n            'Focus has left the room - leaving conference');\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n    }\n};\n\nModerator.prototype.setFocusUserJid = function(focusJid) {\n    if (!this.focusUserJid) {\n        this.focusUserJid = focusJid;\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\n    }\n};\n\nModerator.prototype.getFocusUserJid = function() {\n    return this.focusUserJid;\n};\n\nModerator.prototype.getFocusComponent = function() {\n    // Get focus component address\n    let focusComponent = this.options.connection.hosts.focus;\n\n    // If not specified use default:  'focus.domain'\n\n    if (!focusComponent) {\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\n    }\n\n    return focusComponent;\n};\n\nModerator.prototype.createConferenceIq = function() {\n    // Generate create conference IQ\n    const elem = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const machineUID = Settings.machineId;\n    const config = this.options.conference;\n\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': machineUID\n    });\n\n    if (sessionId) {\n        elem.attrs({ 'session-id': sessionId });\n    }\n\n    elem.c(\n        'property', {\n            name: 'disableRtx',\n            value: Boolean(config.disableRtx)\n        }).up();\n\n    if (config.audioPacketDelay !== undefined) {\n        elem.c(\n            'property', {\n                name: 'audioPacketDelay',\n                value: config.audioPacketDelay\n            }).up();\n    }\n    if (config.startBitrate) {\n        elem.c(\n            'property', {\n                name: 'startBitrate',\n                value: config.startBitrate\n            }).up();\n    }\n    if (config.minBitrate) {\n        elem.c(\n            'property', {\n                name: 'minBitrate',\n                value: config.minBitrate\n            }).up();\n    }\n\n    if (this.options.conference.startAudioMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startAudioMuted',\n                value: this.options.conference.startAudioMuted\n            }).up();\n    }\n    if (this.options.conference.startVideoMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startVideoMuted',\n                value: this.options.conference.startVideoMuted\n            }).up();\n    }\n\n    // this flag determines whether the bridge will include this call in its\n    // rtcstats reporting or not. If the site admin hasn't set the flag in\n    // config.js, then the client defaults to false (see\n    // react/features/rtcstats/functions.js in jitsi-meet). The server-side\n    // components default to true to match the pre-existing behavior so we only\n    // signal if false.\n    const rtcstatsEnabled = this.options.conference?.analytics?.rtcstatsEnabled ?? false;\n\n    if (!rtcstatsEnabled) {\n        elem.c(\n            'property', {\n                name: 'rtcstatsEnabled',\n                value: rtcstatsEnabled\n            }).up();\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests, enableCallStats } = this.options.conference;\n    const callstatsDisabled = !callStatsID || !callStatsSecret || !enableCallStats\n\n        // Even though AppID and AppSecret may be specified, the integration\n        // of callstats.io may be disabled because of globally-disallowed\n        // requests to any third parties.\n        || disableThirdPartyRequests === true;\n\n    // since the default is true across all the server-side components, only signal if false.\n    if (callstatsDisabled) {\n        elem.c(\n            'property', {\n                name: 'callstatsEnabled',\n                value: !callstatsDisabled\n            }).up();\n    }\n    elem.up();\n\n    return elem;\n};\n\n\nModerator.prototype.parseSessionId = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    const sessionId = $(resultIq).find('conference').attr('session-id');\n\n    if (sessionId) {\n        logger.info(`Received sessionId:  ${sessionId}`);\n        Settings.sessionId = sessionId;\n    }\n};\n\nModerator.prototype.parseConfigOptions = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\n\n    const authenticationEnabled\n        = $(resultIq).find(\n            '>conference>property'\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = $(resultIq).find(\n        '>conference>property'\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\n\n    logger.info(\n        `External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled) {\n        // We expect to receive sessionId in 'internal' authentication mode\n        this.parseSessionId(resultIq);\n    }\n\n    // eslint-disable-next-line newline-per-chained-call\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\n        authenticationEnabled, authIdentity);\n\n    // Check if jicofo has jigasi support enabled.\n    if ($(resultIq).find(\n        '>conference>property'\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\n        this.sipGatewayEnabled = true;\n    }\n\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.allocateConferenceFocus = function() {\n    return new Promise(resolve => {\n        // Try to use focus user JID from the config\n        this.setFocusUserJid(this.options.connection.focusUserJid);\n\n        // Send create conference IQ\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => this._allocateConferenceFocusSuccess(result, resolve),\n            error => this._allocateConferenceFocusError(error, resolve));\n\n        // XXX We're pressed for time here because we're beginning a complex\n        // and/or lengthy conference-establishment process which supposedly\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\n        // decide to send our IQ.\n        this.connection.flush();\n    });\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    const invalidSession\n        = $(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length;\n\n    if (invalidSession) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n    if ($(error).find('>error>graceful-shutdown').length) {\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\n\n        return;\n    }\n\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    // Not authorized to create new room\n    if ($(error).find('>error>not-authorized').length) {\n        logger.warn('Unauthorized to start the conference', error);\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\n\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\n            // FIXME \"is external\" should come either from the focus or\n            // config.js\n            this.externalAuthEnabled = true;\n        }\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n    const waitMs = this.getNextErrorTimeout();\n    const errmsg = `Focus error, retry after ${waitMs}`;\n\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n    logger.error(errmsg, error);\n\n    // Show message\n    const focusComponent = this.getFocusComponent();\n    const retrySec = waitMs / 1000;\n\n    // FIXME: message is duplicated ? Do not show in case of session invalid\n    // which means just a retry\n\n    if (!invalidSession) {\n        this.eventEmitter.emit(\n            XMPPEvents.FOCUS_DISCONNECTED,\n            focusComponent,\n            retrySec);\n    }\n\n    // Reset response timeout\n    this.getNextTimeout(true);\n    window.setTimeout(\n        () => this.allocateConferenceFocus().then(callback),\n        waitMs);\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    this.parseConfigOptions(result);\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    // eslint-disable-next-line newline-per-chained-call\n    if ($(result).find('conference').attr('ready') === 'true') {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // Exec callback\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        logger.info(`Waiting for the focus... ${waitMs}`);\n        window.setTimeout(\n            () => this.allocateConferenceFocus().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => {\n                this.parseSessionId(result);\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first')\n                    .prop('tagName'),\n                message: $(errorIq).find('iq>error>text')\n                    .text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport isEqual from 'lodash.isequal';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport AVModeration from './AVModeration';\nimport BreakoutRooms from './BreakoutRooms';\nimport Lobby from './Lobby';\nimport RoomMetadata from './RoomMetadata';\nimport XmppConnection from './XmppConnection';\nimport Moderator from './moderator';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nexport function filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Array of affiliations that are allowed in members only room.\n * @type {string[]}\n */\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room.\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\n     * This is intended to be used only for lobby rooms.\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\n     * @param {boolean} options.hiddenFromRecorderFeatureEnabled - when set to {@code true} we will check identity tag\n     * for node presence.\n     */\n    constructor(connection, jid, password, XMPP, options) {\n        super();\n        this.xmpp = XMPP;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        this.replaceParticipant = false;\n        logger.info(`Joined MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this._removeConnListeners = [];\n        this.joined = false;\n        this.inProgressEmitted = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\n                connection: this.xmpp.options,\n                conference: this.options\n            });\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\n            this.lobby = new Lobby(this);\n        }\n        this.avModeration = new AVModeration(this);\n        this.breakoutRooms = new BreakoutRooms(this);\n        this.roomMetadata = new RoomMetadata(this);\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.statsId) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': options.statsId\n            });\n        }\n\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     * Joins the chat room.\n     * @param {string} password - Password to unlock room on joining.\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password, replaceParticipant) {\n        this.password = password;\n        this.replaceParticipant = replaceParticipant;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\n\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.allocateConferenceFocus();\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                this._removeConnListeners.push(\n                    this.connection.addEventListener(\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\n                        this.onConnStatusChanged.bind(this))\n                );\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin - Whether this is initial presence to join the room.\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            if (this.replaceParticipant) {\n                pres.c('flip_device').up();\n            }\n\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            if (this.options.billingId) {\n                pres.c('billingid').t(this.options.billingId).up();\n            }\n\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n\n        // we store time we last synced presence state\n        this.presenceSyncTime = Date.now();\n\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave(reason) {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({\n            to: this.myroomjid,\n            type: 'unavailable'\n        });\n\n        if (reason) {\n            pres.c('status').t(reason).up();\n        }\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\n        !this.connection.isUsingWebSocket && this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n\n            const meetingIdValEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\n\n            if (meetingIdValEl.length) {\n                this.setMeetingId(meetingIdValEl.text());\n            } else {\n                logger.warn('No meeting ID from backend');\n            }\n\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\n\n            const lobbyRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\n\n            if (this.lobby) {\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\n            }\n\n            const isBreakoutField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_isbreakout\"]>value');\n            const isBreakoutRoom = Boolean(isBreakoutField?.text());\n\n            this.breakoutRooms._setIsBreakoutRoom(isBreakoutRoom);\n\n            const breakoutMainRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_breakout_main_room\"]>value');\n\n            if (breakoutMainRoomField?.length) {\n                this.breakoutRooms._setMainRoomJid(breakoutMainRoomField.text());\n            }\n\n            if (membersOnly !== this.membersOnlyEnabled) {\n                this.membersOnlyEnabled = membersOnly;\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\n            }\n\n            const roomMetadataEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_jitsimetadata\"]>value');\n            const roomMetadataText = roomMetadataEl?.text();\n\n            if (roomMetadataText) {\n                try {\n                    this.roomMetadata._handleMessages(JSON.parse(roomMetadataText));\n                } catch (e) {\n                    logger.warn('Failed to set room metadata', e);\n                }\n            }\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     * Sets the meeting unique Id (received from the backend).\n     *\n     * @param {string} meetingId - The new meetings id.\n     * @returns {void}\n     */\n    setMeetingId(meetingId) {\n        if (this.meetingId !== meetingId) {\n            if (this.meetingId) {\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\n            }\n            this.meetingId = meetingId;\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\n        }\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        if (this.options.disableDiscoInfo) {\n            return;\n        }\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: this.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            this.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     * Handles Xmpp Connection status updates.\n     *\n     * @param {Strophe.Status} status - The Strophe connection status.\n     */\n    onConnStatusChanged(status) {\n        // Send cached presence when the XMPP connection is re-established.\n        if (status === XmppConnection.Status.CONNECTED) {\n            this.sendPresence();\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        let hasVersionUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.isReplaceParticipant\n            = pres.getElementsByTagName('flip_device').length;\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        // process nodes to extract data needed for MUC_JOINED and\n        // MUC_MEMBER_JOINED events\n        const extractIdentityInformation = node => {\n            const identity = {};\n            const userInfo = node.children.find(c => c.tagName === 'user');\n\n            if (userInfo) {\n                identity.user = {};\n                const tags = [ 'id', 'name', 'avatar' ];\n\n                if (this.options.hiddenFromRecorderFeatureEnabled) {\n                    tags.push('hidden-from-recorder');\n                }\n\n                for (const tag of tags) {\n                    const child\n                        = userInfo.children.find(c => c.tagName === tag);\n\n                    if (child) {\n                        identity.user[tag] = child.value;\n                    }\n                }\n            }\n            const groupInfo = node.children.find(c => c.tagName === 'group');\n\n            if (groupInfo) {\n                identity.group = groupInfo.value;\n            }\n\n            return identity;\n        };\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node);\n                break;\n            case 'features': {\n                member.features = this._extractFeatures(node);\n                break;\n            }\n            case 'stat': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { name } = attributes;\n\n                if (name === 'version') {\n                    member.version = attributes.value;\n                }\n                break;\n            }\n            }\n        }\n\n        if (!this.joined && !this.inProgressEmitted) {\n            const now = this.connectionTimes['muc.join.started'] = window.performance.now();\n\n            logger.log('(TIME) MUC join started:\\t', now);\n\n            this.eventEmitter.emit(XMPPEvents.MUC_JOIN_IN_PROGRESS);\n            this.inProgressEmitted = true;\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                // Re-send presence in case any presence updates were added,\n                // but blocked from sending, during the join process.\n                // send the presence only if there was a modification after we had synced it\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\n                    this.sendPresence();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n\n                // Now let's check the disco-info to retrieve the\n                // meeting Id if any\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\n            }\n        } else if (jid === undefined) {\n            logger.info('Ignoring member with undefined JID');\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            hasVersionUpdate = member.version !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, member.features);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType,\n                    member.jid,\n                    member.features,\n                    member.isReplaceParticipant);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // affiliation changed\n            if (memberOfThis.affiliation !== member.affiliation) {\n                memberOfThis.affiliation = member.affiliation;\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                // By default we are disabling the waiting for form submission in order to use the room\n                // and we had enabled by default that jids are public in the room ,\n                // so this case should not happen, if public jid is turned off we will receive the jid\n                // when we become moderator in the room\n                memberOfThis.isFocus = true;\n                this._initFocus(from, member.features);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n\n            if (memberOfThis.version !== member.version) {\n                hasVersionUpdate = true;\n                memberOfThis.version = member.version;\n            }\n\n            if (!isEqual(memberOfThis.features, member.features)) {\n                memberOfThis.features = member.features;\n                this.eventEmitter.emit(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, from, member.features);\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n\n                    // Log if Jicofo supports restart by terminate only once. This conference property does not change\n                    // during the call.\n                    if (typeof this.restartByTerminateSupported === 'undefined') {\n                        this.restartByTerminateSupported = properties['support-terminate-restart'] === 'true';\n                        logger.info(`Jicofo supports restart by terminate: ${this.supportsRestartByTerminate()}`);\n                    }\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n\n        if (hasVersionUpdate) {\n            logger.info(`Received version for ${jid}: ${member.version}`);\n        }\n    }\n\n    /**\n     * Extracts the features from the presence.\n     * @param node the node to process.\n     * @return features the Set of features where extracted data is added.\n     * @private\n     */\n    _extractFeatures(node) {\n        const features = new Set();\n\n        for (let j = 0; j < node.children.length; j++) {\n            const { attributes } = node.children[j];\n\n            if (attributes && attributes.var) {\n                features.add(attributes.var);\n            }\n        }\n\n        return features;\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param features the features reported in jicofo presence\n     */\n    _initFocus(from, features) {\n        this.focusMucJid = from;\n        this.focusFeatures = features;\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     * Checks if Jicofo supports restarting Jingle session after 'session-terminate'.\n     * @returns {boolean}\n     */\n    supportsRestartByTerminate() {\n        return this.restartByTerminateSupported;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     */\n    sendMessage(message, elementName) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, {}, message);\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message);\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     */\n    sendPrivateMessage(id, message, elementName) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     * Called when participant leaves.\n     * @param jid the jid of the participant that leaves\n     * @param skipEvents optional params to skip any events, including check\n     * whether this is the focus that left\n     * @param reason the reason for leaving (optional).\n     */\n    onParticipantLeft(jid, skipEvents, reason) {\n        delete this.lastPresences[jid];\n\n        if (skipEvents) {\n            return;\n        }\n\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid, reason);\n\n        this.moderator.onMucMemberLeft(jid);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\n\n        if (destroySelect.length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n        const isReplaceParticipant = $(pres).find('flip_device').length;\n\n        if (isKick) {\n            const actorSelect\n                = $(pres)\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\n            let actorNick;\n\n            if (actorSelect.length) {\n                actorNick = actorSelect.attr('nick');\n            }\n\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                + '>item>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            // we first fire the kicked so we can show the participant\n            // who kicked, before notifying that participant left\n            // we fire kicked for us and for any participant kicked\n            this.eventEmitter.emit(\n                XMPPEvents.KICKED,\n                isSelfPresence,\n                actorNick,\n                Strophe.getResourceFromJid(from),\n                reason,\n                isReplaceParticipant);\n        }\n\n        if (isSelfPresence) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                this.onParticipantLeft(jid, member.isFocus);\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        } else {\n            const reasonSelect = $(pres).find('>status');\n            let reason;\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            delete this.members[from];\n            this.onParticipantLeft(from, false, reason);\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            const settingsErrorMsg = $(msg).find('>settings-error>text').text();\n\n            if (settingsErrorMsg.length) {\n                this.eventEmitter.emit(XMPPEvents.SETTINGS_ERROR_RECEIVED, settingsErrorMsg);\n\n                return true;\n            }\n            const errorMsg = $(msg).find('>error>text').text();\n\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\n\n            return true;\n        }\n\n        const txt = $(msg).find('>body').text();\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid) {\n            let invite;\n\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\n                this.discoRoomInfo();\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\n                        && invite.length) {\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\n                let password;\n\n                if (passwordSelect && passwordSelect.length) {\n                    password = passwordSelect.text();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                    from, invite.attr('from'), txt, password);\n            }\n        }\n\n        const jsonMessage = $(msg).find('>json-message').text();\n\n        if (jsonMessage) {\n            const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n            // We emit this event if the message is a valid json, and is not\n            // delivered after a delay, i.e. stamp is undefined.\n            // e.g. - subtitles should not be displayed if delayed.\n            if (parsedJson && stamp === undefined) {\n                this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                    from, parsedJson);\n\n                return;\n            }\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n        } else if ($(pres)\n            .find(\n                '>error[type=\"auth\"]'\n                + '>registration-required['\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\n\n            // let's extract the lobby jid from the custom field\n            const lobbyRoomNode = $(pres).find('>error[type=\"auth\"]>lobbyroom');\n            let lobbyRoomJid;\n\n            if (lobbyRoomNode.length) {\n                lobbyRoomJid = lobbyRoomNode.text();\n            } else {\n                // let's fallback to old location of lobbyroom node, TODO: to be removed in the future once\n                // everything is updated\n                const lobbyRoomOldNode = $(pres).find('>lobbyroom');\n\n                if (lobbyRoomOldNode.length) {\n                    lobbyRoomJid = lobbyRoomOldNode.text();\n                }\n            }\n\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param affiliation\n     */\n    setAffiliation(jid, affiliation) {\n        const grantIQ = $iq({\n            to: this.roomjid,\n            type: 'set'\n        })\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n        .c('item', {\n            affiliation,\n            jid: Strophe.getBareJidFromJid(jid)\n        })\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\n        .up().up().up();\n\n        this.connection.sendIQ(\n            grantIQ,\n            result => logger.log('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\n            error => logger.log('Set affiliation of participant error: ', error));\n    }\n\n    /**\n     *\n     * @param jid\n     * @param reason\n     */\n    kick(jid, reason = 'You have been kicked.') {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t(reason).up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field',\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                        .c('value')\n                        .t(key === null || key.length === 0 ? '0' : '1')\n                        .up()\n                        .up();\n\n                    // if members only enabled\n                    if (this.membersOnlyEnabled) {\n                        formsubmit\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                            .c('value')\n                            .t('true')\n                            .up()\n                            .up();\n                    }\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    this.connection.sendIQ(\n                        formsubmit,\n                        () => {\n\n                            // we set the password in chat room so we can use it\n                            // later when dialing out\n                            this.password = key;\n                            onSuccess();\n                        },\n                        onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Turns off or on the members only config for the main room.\n     *\n     * @param {boolean} enabled - Whether to turn it on or off.\n     * @param onSuccess - optional callback.\n     * @param onError - optional callback.\n     */\n    setMembersOnly(enabled, onSuccess, onError) {\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\n            // first grant membership to all that are in the room\n            // currently there is a bug in prosody where it handles only the first item\n            // that's why we will send iq per member\n            Object.values(this.members).forEach(m => {\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\n                    this.xmpp.connection.sendIQ(\n                        $iq({\n                            to: this.roomjid,\n                            type: 'set' })\n                        .c('query', {\n                            xmlns: 'http://jabber.org/protocol/muc#admin' })\n                        .c('item', {\n                            'affiliation': 'member',\n                            'jid': Strophe.getBareJidFromJid(m.jid)\n                        }).up().up());\n                }\n            });\n        }\n\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\n\n        this.xmpp.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\n                    const formToSubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n                    formToSubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formToSubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formToSubmit\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                        .c('value')\n                        .t(enabled ? 'true' : 'false')\n                        .up()\n                        .up();\n\n                    // if room is locked from other participant or we are locking it\n                    if (this.locked) {\n                        formToSubmit\n                            .c('field',\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                            .c('value')\n                            .t('1')\n                            .up()\n                            .up();\n                    }\n\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\n                } else {\n                    errorCallback(new Error('Setting members only room not supported!'));\n                }\n            },\n            errorCallback);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * This method is used by jibri.\n     *\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replce was\n     * performed as the value was already there.\n     * @deprecated Use 'addOrReplaceInPresence' instead. TODO: remove it from here and jibri.\n     */\n    addToPresence(key, values) {\n        return this.addOrReplaceInPresence(key, values);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replace was\n     * performed as the value was already there.\n     */\n    addOrReplaceInPresence(key, values) {\n        values.tagName = key;\n\n        const matchingNodes = this.presMap.nodes.filter(node => key === node.tagName);\n\n        // if we have found just one, let's check is it the same\n        if (matchingNodes.length === 1 && isEqual(matchingNodes[0], values)) {\n            return false;\n        }\n\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n        this.presenceUpdateTime = Date.now();\n\n        return true;\n    }\n\n    /**\n     * Retrieves a value from the presence map.\n     *\n     * @param {string} key - The key to find the value for.\n     * @returns {Object?}\n     */\n    getFromPresence(key) {\n        return this.presMap.nodes.find(node => key === node.tagName);\n    }\n\n    /**\n     * Removes a key from the presence map.\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addAudioInfoToPresence(mute) {\n        const audioMutedTagName = 'audiomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(audioMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            audioMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addVideoInfoToPresence(mute) {\n        const videoMutedTagName = 'videomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(videoMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            videoMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given endpoint JID.\n     * @param {string} endpointId the endpoint ID mapped to the participant\n     * which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available or if\n     * the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: true, // muted by default\n            videoType: mediaType === MediaType.VIDEO ? VideoType.CAMERA : undefined // 'camera' by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const codecTypeNode = filterNodeFromPresenceJSON(pres, 'jitsi_participant_codecType');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n            if (codecTypeNode.length > 0) {\n                data.codecType = codecTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        if (mutedNode.length > 0) {\n            data.muted = mutedNode[0].value === 'true';\n        }\n\n        return data;\n    }\n\n    /**\n     * Returns the last presence advertised by a MUC member.\n     * @param {string} mucNick\n     * @returns {*}\n     */\n    getLastPresence(mucNick) {\n        return this.lastPresences[`${this.roomjid}/${mucNick}`];\n    }\n\n    /**\n     * Returns true if the SIP calls are supported and false otherwise\n     */\n    isSIPCallingSupported() {\n        if (this.moderator) {\n            return this.moderator.isSipGatewayEnabled();\n        }\n\n        return false;\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     *\n     * @returns {Lobby}\n     */\n    getLobby() {\n        return this.lobby;\n    }\n\n    /**\n     * @returns {AVModeration}\n     */\n    getAVModeration() {\n        return this.avModeration;\n    }\n\n    /**\n     * @returns {BreakoutRooms}\n     */\n    getBreakoutRooms() {\n        return this.breakoutRooms;\n    }\n\n    /**\n     * @returns {RoomMetadata}\n     */\n    getMetadataHandler() {\n        return this.roomMetadata;\n    }\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Returns the meeting unique ID if any came from backend.\n     *\n     * @returns {string} - The meeting ID.\n     */\n    getMeetingId() {\n        return this.meetingId;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     * @param mediaType\n     */\n    muteParticipant(jid, mute, mediaType) {\n        logger.info('set mute', mute, jid);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: `http://jitsi.org/jitmeet/${mediaType}`,\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.VIDEO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Clean any listeners or resources, executed on leaving.\n     */\n    clean() {\n        this._removeConnListeners.forEach(remove => remove());\n        this._removeConnListeners = [];\n\n        this.joined = false;\n        this.inProgressEmitted = false;\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave(reason) {\n        this.avModeration.dispose();\n        this.breakoutRooms.dispose();\n        this.roomMetadata.dispose();\n\n        const promises = [];\n\n        this.lobby?.lobbyRoom && promises.push(this.lobby.leave());\n\n        promises.push(new Promise((resolve, reject) => {\n            let timeout = -1;\n\n            const onMucLeft = (doReject = false) => {\n                this.eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // The timeout expired. Make sure we clean the EMUC state.\n                    this.connection.emuc.doLeave(this.roomjid);\n                    reject(new Error('The timeout for the confirmation about leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            };\n\n            timeout = setTimeout(() => onMucLeft(true), 5000);\n\n            this.clean();\n            this.eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n            this.doLeave(reason);\n        }));\n\n        return Promise.allSettled(promises);\n    }\n\n    /**\n     * Ends the conference for all participants.\n     */\n    end() {\n        if (this.breakoutRooms.isBreakoutRoom()) {\n            logger.warn('Cannot end conference: this is a breakout room.');\n\n            return;\n        }\n\n        // Send the end conference message.\n        const msg = $msg({ to: this.xmpp.endConferenceComponentAddress });\n\n        msg.c('end_conference').up();\n\n        this.xmpp.connection.send(msg);\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n        this.connection.addHandler(this.onMuteVideo.bind(this),\n            'http://jitsi.org/jitmeet/video', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.isRoomCreated(roomJid)) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *  Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomJid) {\n        return roomJid in this.rooms;\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMuteVideo(iq);\n\n        return true;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $build } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\n\n/**\n * Creates a \"source\" XML element for the source described in compact JSON format in [sourceCompactJson].\n * @param {*} owner the endpoint ID of the owner of the source.\n * @param {*} sourceCompactJson the compact JSON representation of the source.\n * @returns the created \"source\" XML element.\n */\nfunction _createSourceExtension(owner, sourceCompactJson) {\n    const node = $build('source', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        ssrc: sourceCompactJson.s,\n        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceCompactJson.n : undefined\n    });\n\n    if (sourceCompactJson.m) {\n        node.c('parameter', {\n            name: 'msid',\n            value: sourceCompactJson.m\n        }).up();\n    }\n    node.c('ssrc-info', {\n        xmlns: 'http://jitsi.org/jitmeet',\n        owner\n    }).up();\n\n    return node.node;\n}\n\n/**\n * Creates an \"ssrc-group\" XML element for the SSRC group described in compact JSON format in [ssrcGroupCompactJson].\n * @param {*} ssrcGroupCompactJson the compact JSON representation of the SSRC group.\n * @returns the created \"ssrc-group\" element.\n */\nfunction _createSsrcGroupExtension(ssrcGroupCompactJson) {\n    const node = $build('ssrc-group', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        semantics: _getSemantics(ssrcGroupCompactJson[0])\n    });\n\n    for (let i = 1; i < ssrcGroupCompactJson.length; i++) {\n        node.c('source', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n            ssrc: ssrcGroupCompactJson[i]\n        }).up();\n    }\n\n    return node.node;\n}\n\n/**\n * Finds in a Jingle IQ the RTP description element with the given media type. If one does not exists, create it (as\n *  well as the required  \"content\" parent element) and adds it to the IQ.\n * @param {*} iq\n * @param {*} mediaType The media type, \"audio\" or \"video\".\n * @returns the RTP description element with the given media type.\n */\nfunction _getOrCreateRtpDescription(iq, mediaType) {\n    const jingle = $(iq).find('jingle')[0];\n    let content = $(jingle).find(`content[name=\"${mediaType}\"]`);\n    let description;\n\n    if (content.length) {\n        content = content[0];\n    } else {\n        // I'm not suree if \"creator\" and \"senders\" are required.\n        content = $build('content', {\n            name: mediaType\n        }).node;\n        jingle.appendChild(content);\n    }\n\n    description = $(content).find('description');\n\n    if (description.length) {\n        description = description[0];\n    } else {\n        description = $build('description', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n            media: mediaType\n        }).node;\n        content.appendChild(description);\n    }\n\n    return description;\n}\n\n/**\n * Converts the short string representing SSRC group semantics in compact JSON format to the standard representation\n * (i.e. convert \"f\" to \"FID\" and \"s\" to \"SIM\").\n * @param {*} str the compact JSON format representation of an SSRC group's semantics.\n * @returns the SSRC group semantics corresponding to [str].\n */\nfunction _getSemantics(str) {\n    if (str === 'f') {\n        return 'FID';\n    } else if (str === 's') {\n        return 'SIM';\n    }\n\n    return null;\n}\n\n/**\n * Reads a JSON-encoded message (from a \"json-message\" element) and extracts source descriptions. Adds the extracted\n * source descriptions to the given Jingle IQ in the standard Jingle format.\n *\n * Encoding sources in this compact JSON format instead of standard Jingle was introduced in order to reduce the\n * network traffic and load on the XMPP server. The format is described in Jicofo [TODO: insert link].\n *\n * @param {*} iq the IQ to which source descriptions will be added.\n * @param {*} jsonMessageXml The XML node for the \"json-message\" element.\n * @returns {Map<string, Array<string>} The audio and video ssrcs extracted from the JSON-encoded message with remote\n * endpoint id as the key.\n */\nexport function expandSourcesFromJson(iq, jsonMessageXml) {\n    let json;\n\n    try {\n        json = JSON.parse(jsonMessageXml.textContent);\n    } catch (error) {\n        logger.error(`json-message XML contained invalid JSON, ignoring: ${jsonMessageXml.textContent}`);\n\n        return null;\n    }\n\n    if (!json?.sources) {\n        // It might be a message of a different type, no need to log.\n        return null;\n    }\n\n    // This is where we'll add \"source\" and \"ssrc-group\" elements. Create them elements if they don't exist.\n    const audioRtpDescription = _getOrCreateRtpDescription(iq, MediaType.AUDIO);\n    const videoRtpDescription = _getOrCreateRtpDescription(iq, MediaType.VIDEO);\n    const ssrcMap = new Map();\n\n    for (const owner in json.sources) {\n        if (json.sources.hasOwnProperty(owner)) {\n            const ssrcs = [];\n            const ownerSources = json.sources[owner];\n\n            // The video sources, video ssrc-groups, audio sources and audio ssrc-groups are encoded in that order in\n            // the elements of the array.\n            const videoSources = ownerSources?.length && ownerSources[0];\n            const videoSsrcGroups = ownerSources?.length > 1 && ownerSources[1];\n            const audioSources = ownerSources?.length > 2 && ownerSources[2];\n            const audioSsrcGroups = ownerSources?.length > 3 && ownerSources[3];\n\n            if (videoSources?.length) {\n                for (let i = 0; i < videoSources.length; i++) {\n                    videoRtpDescription.appendChild(_createSourceExtension(owner, videoSources[i]));\n                    ssrcs.push(videoSources[i]?.s);\n                }\n            }\n\n            if (videoSsrcGroups?.length) {\n                for (let i = 0; i < videoSsrcGroups.length; i++) {\n                    videoRtpDescription.appendChild(_createSsrcGroupExtension(videoSsrcGroups[i]));\n                }\n            }\n            if (audioSources?.length) {\n                for (let i = 0; i < audioSources.length; i++) {\n                    audioRtpDescription.appendChild(_createSourceExtension(owner, audioSources[i]));\n                    ssrcs.push(audioSources[i]?.s);\n                }\n            }\n\n            if (audioSsrcGroups?.length) {\n                for (let i = 0; i < audioSsrcGroups.length; i++) {\n                    audioRtpDescription.appendChild(_createSsrcGroupExtension(audioSsrcGroups[i]));\n                }\n            }\n            ssrcMap.set(owner, ssrcs);\n        }\n    }\n\n    return ssrcMap;\n}\n","/**\n * Enumeration of the media direction types.\n */\nexport enum MediaDirection {\n    /**\n     * Media is send and receive is suspended.\n     */\n    INACTIVE = 'inactive',\n\n    /**\n     * Media is only received from remote peer.\n     */\n    RECVONLY = 'recvonly',\n\n    /**\n     * Media is only sent to the remote peer.\n     */\n    SENDONLY = 'sendonly',\n\n    /**\n     * Media is sent and received.\n     */\n    SENDRECV = 'sendrecv'\n};\n","\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * The default frame rate for Screen Sharing.\n */\nexport const SS_DEFAULT_FRAME_RATE = 5;\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     */\n    init(options = {}) {\n        this.options = options;\n        this.obtainStream = this._createObtainStreamMethod();\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod() {\n        if (browser.isNWJS()) {\n            return (onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.SCREENSHARING_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isReactNative() && browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMediaRN;\n        } else if (browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n        logger.log('Screen sharing not supported on ', browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Gets the appropriate constraints for audio sharing.\n     *\n     * @returns {Object|boolean}\n     */\n    _getAudioConstraints() {\n        const { audioQuality } = this.options;\n        const audio = audioQuality?.stereo ? {\n            autoGainControl: false,\n            channelCount: 2,\n            echoCancellation: false,\n            noiseSuppression: false\n        } : true;\n\n        return audio;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     * @param {Object} options - Optional parameters.\n     */\n    obtainScreenOnElectron(onSuccess, onFailure, options = {}) {\n        if (window.JitsiMeetScreenObtainer && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingFrameRate, desktopSharingSources } = this.options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources:\n                        options.desktopSharingSources || desktopSharingSources || [ 'screen', 'window' ]\n                },\n                (streamId, streamType, screenShareAudio = false) => {\n                    if (streamId) {\n                        let audioConstraints = false;\n\n                        if (screenShareAudio) {\n                            audioConstraints = {};\n                            const optionalConstraints = this._getAudioConstraints();\n\n                            if (typeof optionalConstraints !== 'boolean') {\n                                audioConstraints = {\n                                    optional: optionalConstraints\n                                };\n                            }\n\n                            // Audio screen sharing for electron only works for screen type devices.\n                            // i.e. when the user shares the whole desktop.\n                            // Note. The documentation specifies that chromeMediaSourceId should not be present\n                            // which, in the case a users has multiple monitors, leads to them being shared all\n                            // at once. However we tested with chromeMediaSourceId present and it seems to be\n                            // working properly.\n                            if (streamType === 'screen') {\n                                audioConstraints.mandatory = {\n                                    chromeMediaSource: 'desktop'\n                                };\n                            }\n                        }\n\n                        const constraints = {\n                            audio: audioConstraints,\n                            video: {\n                                mandatory: {\n                                    chromeMediaSource: 'desktop',\n                                    chromeMediaSourceId: streamId,\n                                    minFrameRate: desktopSharingFrameRate?.min ?? SS_DEFAULT_FRAME_RATE,\n                                    maxFrameRate: desktopSharingFrameRate?.max ?? SS_DEFAULT_FRAME_RATE,\n                                    maxWidth: window.screen.width,\n                                    maxHeight: window.screen.height\n                                }\n                            }\n                        };\n\n                        // We have to use the old API on Electron to get a desktop stream.\n                        navigator.mediaDevices.getUserMedia(constraints)\n                            .then(stream => onSuccess({\n                                stream,\n                                sourceId: streamId,\n                                sourceType: streamType\n                            }), onFailure);\n                    } else {\n                        // As noted in Chrome Desktop Capture API:\n                        // If user didn't select any source (i.e. canceled the prompt)\n                        // then the callback is called with an empty streamId.\n                        onFailure(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n                    }\n                },\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(callback, errorCallback) {\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        const { desktopSharingFrameRate } = this.options;\n        const setScreenSharingResolutionConstraints = browser.isChromiumBased()\n            && this.options?.testing?.setScreenSharingResolutionConstraints;\n        let video = {};\n\n        if (typeof desktopSharingFrameRate === 'object') {\n            video.frameRate = desktopSharingFrameRate;\n        }\n\n        // Capturing the screenshare at very high resolutions restricts the framerate. Therefore, skip this hack when\n        // the capture framerate is > 5 fps.\n        if (setScreenSharingResolutionConstraints && !(desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE)) {\n            // Set bogus resolution constraints to work around\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1056311\n            video.height = 99999;\n            video.width = 99999;\n        }\n\n        const audio = this._getAudioConstraints();\n\n        // At the time of this writing 'min' constraint for fps is not supported by getDisplayMedia.\n        video.frameRate && delete video.frameRate.min;\n\n        if (Object.keys(video).length === 0) {\n            video = true;\n        }\n\n        const constraints = {\n            video,\n            audio,\n            cursor: 'always'\n        };\n\n        logger.info('Using getDisplayMedia for screen sharing', constraints);\n\n        getDisplayMedia(constraints)\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id\n                });\n            })\n            .catch(error => {\n                const errorDetails = {\n                    errorName: error && error.name,\n                    errorMsg: error && error.message,\n                    errorStack: error && error.stack\n                };\n\n                logger.error('getDisplayMedia error', constraints, errorDetails);\n\n                if (errorDetails.errorMsg && errorDetails.errorMsg.indexOf('denied by system') !== -1) {\n                    // On Chrome this is the only thing different between error returned when user cancels\n                    // and when no permission was given on the OS level.\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.PERMISSION_DENIED));\n\n                    return;\n                }\n\n                errorCallback(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMediaRN(callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        navigator.mediaDevices.getDisplayMedia({ video: true })\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id });\n            })\n            .catch(() => {\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Sets the max frame rate to be used for a desktop track capture.\n     *\n     * @param {number} maxFps capture frame rate to be used for desktop tracks.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        logger.info(`Setting the desktop capture rate to ${maxFps}`);\n\n        this.options.desktopSharingFrameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: maxFps\n        };\n    }\n};\n\nexport default ScreenObtainer;\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport RandomUtil from '../util/RandomUtil';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n\n    /**\n     * Finds the MSID attribute in the given array of SSRC attribute lines and returns the value.\n     *\n     * @param {string[]} ssrcLines - an array of lines similar to 'a:213123 msid:stream-id track-id'.\n     * @returns {undefined|string}\n     */\n    parseMSIDAttribute(ssrcLines) {\n        const msidLine = ssrcLines.find(line => line.indexOf(' msid:') > 0);\n\n        if (!msidLine) {\n            return undefined;\n        }\n\n        const v = msidLine.substring(msidLine.indexOf(' msid:') + 6 /* the length of ' msid:' */);\n\n        return SDPUtil.filterSpecialChars(v);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    parseSCTPPort(line) {\n        return line.substring(12);\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n\n    /**\n     * Gets the source name out of the name attribute \"a=ssrc:254321 name:name1\".\n     *\n     * @param {string[]} ssrcLines\n     * @returns {string | undefined}\n     */\n    parseSourceNameLine(ssrcLines) {\n        const sourceNameLine = ssrcLines.find(ssrcSdpLine => ssrcSdpLine.indexOf(' name:') > 0);\n\n        // Everything past the \"name:\" part\n        return sourceNameLine?.substring(sourceNameLine.indexOf(' name:') + 6);\n    },\n\n    /**\n     * Parse the \"videoType\" attribute encoded in a set of SSRC attributes (e.g.\n     * \"a=ssrc:1234 videoType:desktop\")\n     *\n     * @param {string[]} ssrcLines\n     * @returns {string | undefined}\n     */\n    parseVideoTypeLine(ssrcLines) {\n        const s = ' videoType:';\n        const videoTypeLine = ssrcLines.find(ssrcSdpLine => ssrcSdpLine.indexOf(s) > 0);\n\n        return videoTypeLine?.substring(videoTypeLine.indexOf(s) + s.length);\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.warn(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.warn(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.warn('did not find typ in the right place');\n            logger.warn(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribute is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by moving it to the beginning\n     * of the payload types list (modifies the given mline in place). All instances\n     * of the codec are moved up.\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferCodec(mline, codecName) {\n        if (!mline || !codecName) {\n            return;\n        }\n\n        const matchingPayloadTypes = mline.rtp\n            .filter(rtp => rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase())\n            .map(rtp => rtp.payload);\n\n        if (matchingPayloadTypes) {\n            // Call toString() on payloads to get around an issue within SDPTransform that sets\n            // payloads as a number, instead of a string, when there is only one payload.\n            const payloadTypes\n                = mline.payloads\n                .toString()\n                .split(' ')\n                .map(p => parseInt(p, 10));\n\n            for (const pt of matchingPayloadTypes.reverse()) {\n                const payloadIndex = payloadTypes.indexOf(pt);\n\n                payloadTypes.splice(payloadIndex, 1);\n                payloadTypes.unshift(pt);\n            }\n            mline.payloads = payloadTypes.join(' ');\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     * @param {boolean} highProfile determines if only the high profile H264 codec needs to be\n     * stripped from the sdp when the passed codecName is H264.\n     */\n    stripCodec(mLine, codecName, highProfile = false) {\n        if (!mLine || !codecName) {\n            return;\n        }\n\n        const h264Pts = [];\n        let removePts = [];\n        const stripH264HighCodec = codecName.toLowerCase() === CodecMimeType.H264 && highProfile;\n\n        for (const rtp of mLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                if (stripH264HighCodec) {\n                    h264Pts.push(rtp.payload);\n                } else {\n                    removePts.push(rtp.payload);\n                }\n            }\n        }\n\n        // high profile H264 codecs have 64 as the first two bytes of the profile-level-id.\n        if (stripH264HighCodec) {\n            removePts = mLine.fmtp\n                .filter(item => h264Pts.indexOf(item.payload) > -1 && item.config.includes('profile-level-id=64'))\n                .map(item => item.payload);\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = mLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = mLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other codecs, disable the stream.\n                mLine.port = 0;\n                mLine.direction = MediaDirection.INACTIVE;\n                mLine.payloads = '*';\n            } else {\n                mLine.payloads = keepPts.join(' ');\n            }\n\n            mLine.rtp = mLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            mLine.fmtp = mLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (mLine.rtcpFb) {\n                mLine.rtcpFb = mLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","import $ from 'jquery';\nimport clonedeep from 'lodash.clonedeep';\nimport transform from 'sdp-transform';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Adds a new m-line to the description so that a new local source can then be attached to the transceiver that gets\n * added after a reneogtiation cycle.\n *\n * @param {MediaType} mediaType media type of the new source that is being added.\n */\nSDP.prototype.addMlineForNewLocalSource = function(mediaType) {\n    const mid = this.media.length;\n    const sdp = transform.parse(this.raw);\n    const mline = clonedeep(sdp.media.find(m => m.type === mediaType));\n\n    // Edit media direction, mid and remove the existing ssrc lines in the m-line.\n    mline.mid = mid;\n    mline.direction = MediaDirection.RECVONLY;\n\n    // Remove the ssrcs and source groups.\n    mline.msid = undefined;\n    mline.ssrcs = undefined;\n    mline.ssrcGroups = undefined;\n\n    sdp.media = sdp.media.concat(mline);\n\n    // We regenerate the BUNDLE group (since we added a new m-line)\n    sdp.groups.forEach(group => {\n        if (group.type === 'BUNDLE') {\n            const mids = group.mids.split(' ');\n\n            mids.push(mid);\n            group.mids = mids.join(' ');\n        }\n    });\n    this.raw = transform.write(sdp);\n};\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const mediaSSRCs = {};\n\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    // https://xmpp.org/extensions/xep-0338.html\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\n        const parts = line.split(' ');\n        const semantics = parts.shift().substr(8);\n\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n            semantics });\n        for (let j = 0; j < parts.length; j++) {\n            elem.c('content', { name: parts[j] }).up();\n        }\n        elem.up();\n    });\n\n    for (let i = 0; i < this.media.length; i++) {\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        let ssrc;\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (mline.media === 'audio' || mline.media === 'video') {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (let j = 0; j < mline.fmt.length; j++) {\n                const rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (let k = 0; k < fmtpParameters.length; k++) {\n                        elem.c('parameter', fmtpParameters[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    const sourceName = SDPUtil.parseSourceNameLine(ssrcParameters);\n                    const videoType = SDPUtil.parseVideoTypeLine(ssrcParameters);\n\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\n                        videoType,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    const msid = SDPUtil.parseMSIDAttribute(ssrcParameters);\n\n                    // eslint-disable-next-line max-depth\n                    if (msid) {\n                        elem.c('parameter');\n                        elem.attrs({ name: 'msid' });\n                        elem.attrs({ value: msid });\n                        elem.up();\n                    }\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid:');\n\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast:');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:');\n\n            for (let j = 0; j < extmapLines.length; j++) {\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\n\n                elem.c('rtp-hdrext', {\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                    uri: extmap.uri,\n                    id: extmap.value\n                });\n\n                // eslint-disable-next-line max-depth\n                if (extmap.hasOwnProperty('direction')) {\n\n                    // eslint-disable-next-line max-depth\n                    switch (extmap.direction) {\n                    case MediaDirection.SENDONLY:\n                        elem.attrs({ senders: 'responder' });\n                        break;\n                    case MediaDirection.RECVONLY:\n                        elem.attrs({ senders: 'initiator' });\n                        break;\n                    case MediaDirection.SENDRECV:\n                        elem.attrs({ senders: 'both' });\n                        break;\n                    case MediaDirection.INACTIVE:\n                        elem.attrs({ senders: 'none' });\n                        break;\n                    }\n                }\n\n                // TODO: handle params\n                elem.up();\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, `a=${MediaDirection.SENDRECV}`, this.session)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.SENDONLY}`, this.session)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.RECVONLY}`, this.session)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.INACTIVE}`, this.session)) {\n            elem.attrs({ senders: 'none' });\n        }\n\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\n        // The port is automatically set to 0 when bundle-only is used.\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpport\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctp-port:', this.session);\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\n\n    if (sctpport) {\n        const sctpAttrs = SDPUtil.parseSCTPPort(sctpport);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs, /* SCTP port */\n            protocol: 'webrtc-datachannel' /* protocol */\n        });\n\n        // The parser currently requires streams to be present\n        elem.attrs({ streams: 0 });\n        elem.up();\n    } else if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        } else {\n            elem.attrs({ streams: 0 });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        const fingerprint = SDPUtil.parseFingerprint(line);\n\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(fingerprint.fingerprint);\n        delete fingerprint.fingerprint;\n\n        const setupLine\n            = SDPUtil.findLine(\n                this.media[mediaindex],\n                'a=setup:',\n                this.session);\n\n        if (setupLine) {\n            fingerprint.setup = setupLine.substr(8);\n        }\n        elem.attrs(fingerprint);\n        elem.up(); // end of fingerprint\n    });\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\n\n    if (iceParameters) {\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(iceParameters);\n\n        // XEP-0176\n        const candidateLines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        candidateLines.forEach(line => { // add any a=candidate lines\n            const candidate = SDPUtil.candidateToJingle(line);\n\n            if (this.failICE) {\n                candidate.ip = '1.1.1.1';\n            }\n            const protocol\n                = candidate && typeof candidate.protocol === 'string'\n                    ? candidate.protocol.toLowerCase()\n                    : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            }\n            elem.c('candidate', candidate).up();\n        });\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const feedback = SDPUtil.parseRTCPFB(line);\n\n        if (feedback.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: feedback.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: feedback.type\n            });\n            if (feedback.params.length > 0) {\n                elem.attrs({ 'subtype': feedback.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let sdp = '';\n    const feedbackElementTrrInt\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (feedbackElementTrrInt.length) {\n        sdp += 'a=rtcp-fb:* trr-int ';\n        if (feedbackElementTrrInt.attr('value')) {\n            sdp += feedbackElementTrrInt.attr('value');\n        } else {\n            sdp += '0';\n        }\n        sdp += '\\r\\n';\n    }\n\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    feedbackElements.each((_, fb) => {\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\n        if (fb.hasAttribute('subtype')) {\n            sdp += ` ${fb.getAttribute('subtype')}`;\n        }\n        sdp += '\\r\\n';\n    });\n\n    return sdp;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const sessionId = Date.now();\n\n    // Use a unique session id for every TPC.\n    this.raw = 'v=0\\r\\n'\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                this.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each((_, content) => {\n        const m = this.jingle2media($(content));\n\n        this.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('>description');\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    let sdp = '';\n    const sctp = transport.find(\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    const media = { media: desc.attr('media') };\n\n    media.port = '9';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        media.port = '0';\n    }\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\n        media.proto = sctp.length ? 'UDP/DTLS/SCTP' : 'UDP/TLS/RTP/SAVPF';\n    } else {\n        media.proto = 'UDP/TLS/RTP/SAVPF';\n    }\n    if (sctp.length) {\n        sdp += `m=application ${media.port} UDP/DTLS/SCTP webrtc-datachannel\\r\\n`;\n        sdp += `a=sctp-port:${sctp.attr('number')}\\r\\n`;\n        sdp += 'a=max-message-size:262144\\r\\n';\n    } else {\n        media.fmt\n            = desc\n                .find('>payload-type')\n                .map((_, payloadType) => payloadType.getAttribute('id'))\n                .get();\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\n    }\n\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n\n    // XEP-0176 ICE parameters\n    if (transport.length) {\n        if (transport.attr('ufrag')) {\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\n        }\n        if (transport.attr('pwd')) {\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\n        }\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\n            sdp += ` ${$(fingerprint).text()}`;\n            sdp += '\\r\\n';\n            if (fingerprint.hasAttribute('setup')) {\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\n            }\n        });\n    }\n\n    // XEP-0176 ICE candidates\n    transport.find('>candidate')\n        .each((_, candidate) => {\n            let protocol = candidate.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (this.failICE) {\n                candidate.setAttribute('ip', '1.1.1.1');\n            }\n\n            sdp += SDPUtil.candidateFromJingle(candidate);\n        });\n\n    switch (content.attr('senders')) {\n    case 'initiator':\n        sdp += `a=${MediaDirection.SENDONLY}\\r\\n`;\n        break;\n    case 'responder':\n        sdp += `a=${MediaDirection.RECVONLY}\\r\\n`;\n        break;\n    case 'none':\n        sdp += `a=${MediaDirection.INACTIVE}\\r\\n`;\n        break;\n    case 'both':\n        sdp += `a=${MediaDirection.SENDRECV}\\r\\n`;\n        break;\n    }\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('>rtcp-mux').length) {\n        sdp += 'a=rtcp-mux\\r\\n';\n    }\n\n    desc.find('>payload-type').each((_, payloadType) => {\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\n        if ($(payloadType).find('>parameter').length) {\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\n            sdp\n                += $(payloadType)\n                    .find('>parameter')\n                    .map((__, parameter) => {\n                        const name = parameter.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + parameter.getAttribute('value'));\n                    })\n                    .get()\n                    .join(';');\n            sdp += '\\r\\n';\n        }\n\n        // xep-0293\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\n    });\n\n    // xep-0293\n    sdp += this.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    desc\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\n        .each((_, hdrExt) => {\n            sdp\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\n                    hdrExt.getAttribute('uri')}\\r\\n`;\n        });\n\n    // XEP-0339 handle ssrc-group attributes\n    desc\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, ssrcGroup) => {\n            const semantics = ssrcGroup.getAttribute('semantics');\n            const ssrcs\n                = $(ssrcGroup)\n                    .find('>source')\n                    .map((__, source) => source.getAttribute('ssrc'))\n                    .get();\n\n            if (ssrcs.length) {\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n        });\n\n    // XEP-0339 handle source attributes\n    let userSources = '';\n    let nonUserSources = '';\n\n    desc\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, source) => {\n            const ssrc = source.getAttribute('ssrc');\n            let isUserSource = true;\n            let sourceStr = '';\n\n            $(source)\n                .find('>parameter')\n                .each((__, parameter) => {\n                    const name = parameter.getAttribute('name');\n                    let value = parameter.getAttribute('value');\n\n                    value = SDPUtil.filterSpecialChars(value);\n                    sourceStr += `a=ssrc:${ssrc} ${name}`;\n\n                    if (value && value.length) {\n                        sourceStr += `:${value}`;\n                    }\n\n                    sourceStr += '\\r\\n';\n\n                    if (value?.includes('mixedmslabel')) {\n                        isUserSource = false;\n                    }\n                });\n\n            if (isUserSource) {\n                userSources += sourceStr;\n            } else {\n                nonUserSources += sourceStr;\n            }\n        });\n\n    // The sdp-interop package is relying the mixedmslabel m line to be the first one in order to set the direction\n    // to sendrecv.\n    sdp += nonUserSources + userSources;\n\n    return sdp;\n};\n","import FeatureFlags from '../flags/FeatureFlags';\n\nimport SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n            const ssrcLines = mediaSsrc.lines;\n            const sourceName = SDPUtil.parseSourceNameLine(ssrcLines);\n            const videoType = SDPUtil.parseVideoTypeLine(ssrcLines);\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({\n                name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\n                videoType,\n                ssrc: mediaSsrc.ssrc\n            });\n\n            // Only MSID attribute is sent\n            const msid = SDPUtil.parseMSIDAttribute(ssrcLines);\n\n            if (msid) {\n                modify.c('parameter');\n                modify.attrs({ name: 'msid' });\n                modify.attrs({ value: msid });\n                modify.up();\n            }\n\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","/**\n * Creates a continuation function with some arguments already applied.\n *\n * Useful as a shorthand when combined with other control flow functions. Any\n * arguments passed to the returned function are added to the arguments\n * originally passed to apply.\n *\n * @name apply\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} fn - The function you want to eventually apply all\n * arguments to. Invokes with (arguments...).\n * @param {...*} arguments... - Any number of arguments to automatically apply\n * when the continuation is called.\n * @returns {Function} the partially-applied function\n * @example\n *\n * // using apply\n * async.parallel([\n *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n *     async.apply(fs.writeFile, 'testfile2', 'test2')\n * ]);\n *\n *\n * // the same process without using apply\n * async.parallel([\n *     function(callback) {\n *         fs.writeFile('testfile1', 'test1', callback);\n *     },\n *     function(callback) {\n *         fs.writeFile('testfile2', 'test2', callback);\n *     }\n * ]);\n *\n * // It's possible to pass any number of additional arguments when calling the\n * // continuation:\n *\n * node> var fn = async.apply(sys.puts, 'one');\n * node> fn('two', 'three');\n * one\n * two\n * three\n */\nfunction apply(fn, ...args) {\n    return (...callArgs) => fn(...args,...callArgs);\n}\n\nfunction initialParams (fn) {\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        return fn.call(this, args, callback);\n    };\n}\n\n/* istanbul ignore file */\n\nvar hasQueueMicrotask = typeof queueMicrotask === 'function' && queueMicrotask;\nvar hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\nvar hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\nfunction fallback(fn) {\n    setTimeout(fn, 0);\n}\n\nfunction wrap(defer) {\n    return (fn, ...args) => defer(() => fn(...args));\n}\n\nvar _defer;\n\nif (hasQueueMicrotask) {\n    _defer = queueMicrotask;\n} else if (hasSetImmediate) {\n    _defer = setImmediate;\n} else if (hasNextTick) {\n    _defer = process.nextTick;\n} else {\n    _defer = fallback;\n}\n\nvar setImmediate$1 = wrap(_defer);\n\n/**\n * Take a sync function and make it async, passing its return value to a\n * callback. This is useful for plugging sync functions into a waterfall,\n * series, or other async functions. Any arguments passed to the generated\n * function will be passed to the wrapped function (except for the final\n * callback argument). Errors thrown will be passed to the callback.\n *\n * If the function passed to `asyncify` returns a Promise, that promises's\n * resolved/rejected state will be used to call the callback, rather than simply\n * the synchronous return value.\n *\n * This also means you can asyncify ES2017 `async` functions.\n *\n * @name asyncify\n * @static\n * @memberOf module:Utils\n * @method\n * @alias wrapSync\n * @category Util\n * @param {Function} func - The synchronous function, or Promise-returning\n * function to convert to an {@link AsyncFunction}.\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n * invoked with `(args..., callback)`.\n * @example\n *\n * // passing a regular synchronous function\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(JSON.parse),\n *     function (data, next) {\n *         // data is the result of parsing the text.\n *         // If there was a parsing error, it would have been caught.\n *     }\n * ], callback);\n *\n * // passing a function returning a promise\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(function (contents) {\n *         return db.model.create(contents);\n *     }),\n *     function (model, next) {\n *         // `model` is the instantiated model object.\n *         // If there was an error, this function would be skipped.\n *     }\n * ], callback);\n *\n * // es2017 example, though `asyncify` is not needed if your JS environment\n * // supports async functions out of the box\n * var q = async.queue(async.asyncify(async function(file) {\n *     var intermediateStep = await processFile(file);\n *     return await somePromise(intermediateStep)\n * }));\n *\n * q.push(files);\n */\nfunction asyncify(func) {\n    if (isAsync(func)) {\n        return function (...args/*, callback*/) {\n            const callback = args.pop();\n            const promise = func.apply(this, args);\n            return handlePromise(promise, callback)\n        }\n    }\n\n    return initialParams(function (args, callback) {\n        var result;\n        try {\n            result = func.apply(this, args);\n        } catch (e) {\n            return callback(e);\n        }\n        // if result is Promise object\n        if (result && typeof result.then === 'function') {\n            return handlePromise(result, callback)\n        } else {\n            callback(null, result);\n        }\n    });\n}\n\nfunction handlePromise(promise, callback) {\n    return promise.then(value => {\n        invokeCallback(callback, null, value);\n    }, err => {\n        invokeCallback(callback, err && err.message ? err : new Error(err));\n    });\n}\n\nfunction invokeCallback(callback, error, value) {\n    try {\n        callback(error, value);\n    } catch (err) {\n        setImmediate$1(e => { throw e }, err);\n    }\n}\n\nfunction isAsync(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncFunction';\n}\n\nfunction isAsyncGenerator(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncGenerator';\n}\n\nfunction isAsyncIterable(obj) {\n    return typeof obj[Symbol.asyncIterator] === 'function';\n}\n\nfunction wrapAsync(asyncFn) {\n    if (typeof asyncFn !== 'function') throw new Error('expected a function')\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n}\n\n// conditionally promisify a function.\n// only return a promise if a callback is omitted\nfunction awaitify (asyncFn, arity = asyncFn.length) {\n    if (!arity) throw new Error('arity is undefined')\n    function awaitable (...args) {\n        if (typeof args[arity - 1] === 'function') {\n            return asyncFn.apply(this, args)\n        }\n\n        return new Promise((resolve, reject) => {\n            args[arity - 1] = (err, ...cbArgs) => {\n                if (err) return reject(err)\n                resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);\n            };\n            asyncFn.apply(this, args);\n        })\n    }\n\n    return awaitable\n}\n\nfunction applyEach (eachfn) {\n    return function applyEach(fns, ...callArgs) {\n        const go = awaitify(function (callback) {\n            var that = this;\n            return eachfn(fns, (fn, cb) => {\n                wrapAsync(fn).apply(that, callArgs.concat(cb));\n            }, callback);\n        });\n        return go;\n    };\n}\n\nfunction _asyncMap(eachfn, arr, iteratee, callback) {\n    arr = arr || [];\n    var results = [];\n    var counter = 0;\n    var _iteratee = wrapAsync(iteratee);\n\n    return eachfn(arr, (value, _, iterCb) => {\n        var index = counter++;\n        _iteratee(value, (err, v) => {\n            results[index] = v;\n            iterCb(err);\n        });\n    }, err => {\n        callback(err, results);\n    });\n}\n\nfunction isArrayLike(value) {\n    return value &&\n        typeof value.length === 'number' &&\n        value.length >= 0 &&\n        value.length % 1 === 0;\n}\n\n// A temporary value used to identify if the loop should be broken.\n// See #1064, #1293\nconst breakLoop = {};\n\nfunction once(fn) {\n    function wrapper (...args) {\n        if (fn === null) return;\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    }\n    Object.assign(wrapper, fn);\n    return wrapper\n}\n\nfunction getIterator (coll) {\n    return coll[Symbol.iterator] && coll[Symbol.iterator]();\n}\n\nfunction createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n        return ++i < len ? {value: coll[i], key: i} : null;\n    }\n}\n\nfunction createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n        var item = iterator.next();\n        if (item.done)\n            return null;\n        i++;\n        return {value: item.value, key: i};\n    }\n}\n\nfunction createObjectIterator(obj) {\n    var okeys = obj ? Object.keys(obj) : [];\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n        var key = okeys[++i];\n        if (key === '__proto__') {\n            return next();\n        }\n        return i < len ? {value: obj[key], key} : null;\n    };\n}\n\nfunction createIterator(coll) {\n    if (isArrayLike(coll)) {\n        return createArrayIterator(coll);\n    }\n\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n}\n\nfunction onlyOnce(fn) {\n    return function (...args) {\n        if (fn === null) throw new Error(\"Callback was already called.\");\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    };\n}\n\n// for async generators\nfunction asyncEachOfLimit(generator, limit, iteratee, callback) {\n    let done = false;\n    let canceled = false;\n    let awaiting = false;\n    let running = 0;\n    let idx = 0;\n\n    function replenish() {\n        //console.log('replenish')\n        if (running >= limit || awaiting || done) return\n        //console.log('replenish awaiting')\n        awaiting = true;\n        generator.next().then(({value, done: iterDone}) => {\n            //console.log('got value', value)\n            if (canceled || done) return\n            awaiting = false;\n            if (iterDone) {\n                done = true;\n                if (running <= 0) {\n                    //console.log('done nextCb')\n                    callback(null);\n                }\n                return;\n            }\n            running++;\n            iteratee(value, idx, iterateeCallback);\n            idx++;\n            replenish();\n        }).catch(handleError);\n    }\n\n    function iterateeCallback(err, result) {\n        //console.log('iterateeCallback')\n        running -= 1;\n        if (canceled) return\n        if (err) return handleError(err)\n\n        if (err === false) {\n            done = true;\n            canceled = true;\n            return\n        }\n\n        if (result === breakLoop || (done && running <= 0)) {\n            done = true;\n            //console.log('done iterCb')\n            return callback(null);\n        }\n        replenish();\n    }\n\n    function handleError(err) {\n        if (canceled) return\n        awaiting = false;\n        done = true;\n        callback(err);\n    }\n\n    replenish();\n}\n\nvar eachOfLimit = (limit) => {\n    return (obj, iteratee, callback) => {\n        callback = once(callback);\n        if (limit <= 0) {\n            throw new RangeError('concurrency limit cannot be less than 1')\n        }\n        if (!obj) {\n            return callback(null);\n        }\n        if (isAsyncGenerator(obj)) {\n            return asyncEachOfLimit(obj, limit, iteratee, callback)\n        }\n        if (isAsyncIterable(obj)) {\n            return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback)\n        }\n        var nextElem = createIterator(obj);\n        var done = false;\n        var canceled = false;\n        var running = 0;\n        var looping = false;\n\n        function iterateeCallback(err, value) {\n            if (canceled) return\n            running -= 1;\n            if (err) {\n                done = true;\n                callback(err);\n            }\n            else if (err === false) {\n                done = true;\n                canceled = true;\n            }\n            else if (value === breakLoop || (done && running <= 0)) {\n                done = true;\n                return callback(null);\n            }\n            else if (!looping) {\n                replenish();\n            }\n        }\n\n        function replenish () {\n            looping = true;\n            while (running < limit && !done) {\n                var elem = nextElem();\n                if (elem === null) {\n                    done = true;\n                    if (running <= 0) {\n                        callback(null);\n                    }\n                    return;\n                }\n                running += 1;\n                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n            }\n            looping = false;\n        }\n\n        replenish();\n    };\n};\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOfLimit$2 = awaitify(eachOfLimit$1, 4);\n\n// eachOf implementation optimized for array-likes\nfunction eachOfArrayLike(coll, iteratee, callback) {\n    callback = once(callback);\n    var index = 0,\n        completed = 0,\n        {length} = coll,\n        canceled = false;\n    if (length === 0) {\n        callback(null);\n    }\n\n    function iteratorCallback(err, value) {\n        if (err === false) {\n            canceled = true;\n        }\n        if (canceled === true) return\n        if (err) {\n            callback(err);\n        } else if ((++completed === length) || value === breakLoop) {\n            callback(null);\n        }\n    }\n\n    for (; index < length; index++) {\n        iteratee(coll[index], index, onlyOnce(iteratorCallback));\n    }\n}\n\n// a generic version of eachOf which can handle array, object, and iterator cases.\nfunction eachOfGeneric (coll, iteratee, callback) {\n    return eachOfLimit$2(coll, Infinity, iteratee, callback);\n}\n\n/**\n * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n * to the iteratee.\n *\n * @name eachOf\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEachOf\n * @category Collection\n * @see [async.each]{@link module:Collections.each}\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each\n * item in `coll`.\n * The `key` is the item's key, or index in the case of an array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // dev.json is a file containing a valid json object config for dev environment\n * // dev.json is a file containing a valid json object config for test environment\n * // prod.json is a file containing a valid json object config for prod environment\n * // invalid.json is a file with a malformed json object\n *\n * let configs = {}; //global variable\n * let validConfigFileMap = {dev: 'dev.json', test: 'test.json', prod: 'prod.json'};\n * let invalidConfigFileMap = {dev: 'dev.json', test: 'test.json', invalid: 'invalid.json'};\n *\n * // asynchronous function that reads a json file and parses the contents as json object\n * function parseFile(file, key, callback) {\n *     fs.readFile(file, \"utf8\", function(err, data) {\n *         if (err) return calback(err);\n *         try {\n *             configs[key] = JSON.parse(data);\n *         } catch (e) {\n *             return callback(e);\n *         }\n *         callback();\n *     });\n * }\n *\n * // Using callbacks\n * async.forEachOf(validConfigFileMap, parseFile, function (err) {\n *     if (err) {\n *         console.error(err);\n *     } else {\n *         console.log(configs);\n *         // configs is now a map of JSON data, e.g.\n *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n *     }\n * });\n *\n * //Error handing\n * async.forEachOf(invalidConfigFileMap, parseFile, function (err) {\n *     if (err) {\n *         console.error(err);\n *         // JSON parse error exception\n *     } else {\n *         console.log(configs);\n *     }\n * });\n *\n * // Using Promises\n * async.forEachOf(validConfigFileMap, parseFile)\n * .then( () => {\n *     console.log(configs);\n *     // configs is now a map of JSON data, e.g.\n *     // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n * }).catch( err => {\n *     console.error(err);\n * });\n *\n * //Error handing\n * async.forEachOf(invalidConfigFileMap, parseFile)\n * .then( () => {\n *     console.log(configs);\n * }).catch( err => {\n *     console.error(err);\n *     // JSON parse error exception\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.forEachOf(validConfigFileMap, parseFile);\n *         console.log(configs);\n *         // configs is now a map of JSON data, e.g.\n *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * //Error handing\n * async () => {\n *     try {\n *         let result = await async.forEachOf(invalidConfigFileMap, parseFile);\n *         console.log(configs);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // JSON parse error exception\n *     }\n * }\n *\n */\nfunction eachOf(coll, iteratee, callback) {\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n    return eachOfImplementation(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOf$1 = awaitify(eachOf, 3);\n\n/**\n * Produces a new collection of values by mapping each value in `coll` through\n * the `iteratee` function. The `iteratee` is called with an item from `coll`\n * and a callback for when it has finished processing. Each of these callbacks\n * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n * `iteratee` passes an error to its callback, the main `callback` (for the\n * `map` function) is immediately called with the error.\n *\n * Note, that since this function applies the `iteratee` to each item in\n * parallel, there is no guarantee that the `iteratee` functions will complete\n * in order. However, the results array will be in the same order as the\n * original `coll`.\n *\n * If `map` is passed an Object, the results will be an Array.  The results\n * will roughly be in the order of the original Objects' keys (but this can\n * vary across JavaScript engines).\n *\n * @name map\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an Array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n * // file4.txt does not exist\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n *\n * // asynchronous function that returns the file size in bytes\n * function getFileSizeInBytes(file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.map(fileList, getFileSizeInBytes, function(err, results) {\n *     if (err) {\n *         console.log(err);\n *     } else {\n *         console.log(results);\n *         // results is now an array of the file size in bytes for each file, e.g.\n *         // [ 1000, 2000, 3000]\n *     }\n * });\n *\n * // Error Handling\n * async.map(withMissingFileList, getFileSizeInBytes, function(err, results) {\n *     if (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     } else {\n *         console.log(results);\n *     }\n * });\n *\n * // Using Promises\n * async.map(fileList, getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n *     // results is now an array of the file size in bytes for each file, e.g.\n *     // [ 1000, 2000, 3000]\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.map(withMissingFileList, getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.map(fileList, getFileSizeInBytes);\n *         console.log(results);\n *         // results is now an array of the file size in bytes for each file, e.g.\n *         // [ 1000, 2000, 3000]\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let results = await async.map(withMissingFileList, getFileSizeInBytes);\n *         console.log(results);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction map (coll, iteratee, callback) {\n    return _asyncMap(eachOf$1, coll, iteratee, callback)\n}\nvar map$1 = awaitify(map, 3);\n\n/**\n * Applies the provided arguments to each function in the array, calling\n * `callback` after all functions have completed. If you only provide the first\n * argument, `fns`, then it will return a function which lets you pass in the\n * arguments as if it were a single function call. If more arguments are\n * provided, `callback` is required while `args` is still optional. The results\n * for each of the applied async functions are passed to the final callback\n * as an array.\n *\n * @name applyEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s\n * to all call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - Returns a function that takes no args other than\n * an optional callback, that is the result of applying the `args` to each\n * of the functions.\n * @example\n *\n * const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')\n *\n * appliedFn((err, results) => {\n *     // results[0] is the results for `enableSearch`\n *     // results[1] is the results for `updateSchema`\n * });\n *\n * // partial application example:\n * async.each(\n *     buckets,\n *     async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),\n *     callback\n * );\n */\nvar applyEach$1 = applyEach(map$1);\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n *\n * @name eachOfSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfSeries(coll, iteratee, callback) {\n    return eachOfLimit$2(coll, 1, iteratee, callback)\n}\nvar eachOfSeries$1 = awaitify(eachOfSeries, 3);\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n *\n * @name mapSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapSeries (coll, iteratee, callback) {\n    return _asyncMap(eachOfSeries$1, coll, iteratee, callback)\n}\nvar mapSeries$1 = awaitify(mapSeries, 3);\n\n/**\n * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n *\n * @name applyEachSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all\n * call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - A function, that when called, is the result of\n * appling the `args` to the list of functions.  It takes no args, other than\n * a callback.\n */\nvar applyEachSeries = applyEach(mapSeries$1);\n\nconst PROMISE_SYMBOL = Symbol('promiseCallback');\n\nfunction promiseCallback () {\n    let resolve, reject;\n    function callback (err, ...args) {\n        if (err) return reject(err)\n        resolve(args.length > 1 ? args : args[0]);\n    }\n\n    callback[PROMISE_SYMBOL] = new Promise((res, rej) => {\n        resolve = res,\n        reject = rej;\n    });\n\n    return callback\n}\n\n/**\n * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n * their requirements. Each function can optionally depend on other functions\n * being completed first, and each function is run as soon as its requirements\n * are satisfied.\n *\n * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n * will stop. Further tasks will not execute (so any other functions depending\n * on it will not run), and the main `callback` is immediately called with the\n * error.\n *\n * {@link AsyncFunction}s also receive an object containing the results of functions which\n * have completed so far as the first argument, if they have dependencies. If a\n * task function has no dependencies, it will only be passed a callback.\n *\n * @name auto\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Object} tasks - An object. Each of its properties is either a\n * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n * in the array. The object's key of a property serves as the name of the task\n * defined by that property, i.e. can be used when specifying requirements for\n * other tasks. The function receives one or two arguments:\n * * a `results` object, containing the results of the previously executed\n *   functions, only passed if the task has any dependencies,\n * * a `callback(err, result)` function, which must be called when finished,\n *   passing an `error` (which can be `null`) and the result of the function's\n *   execution.\n * @param {number} [concurrency=Infinity] - An optional `integer` for\n * determining the maximum number of tasks that can be run in parallel. By\n * default, as many as possible.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback. Results are always returned; however, if an\n * error occurs, no further `tasks` will be performed, and the results object\n * will only contain partial results. Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n * @example\n *\n * //Using Callbacks\n * async.auto({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         // once the file is written let's email a link to it...\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }, function(err, results) {\n *     if (err) {\n *         console.log('err = ', err);\n *     }\n *     console.log('results = ', results);\n *     // results = {\n *     //     get_data: ['data', 'converted to array']\n *     //     make_folder; 'folder',\n *     //     write_file: 'filename'\n *     //     email_link: { file: 'filename', email: 'user@example.com' }\n *     // }\n * });\n *\n * //Using Promises\n * async.auto({\n *     get_data: function(callback) {\n *         console.log('in get_data');\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         console.log('in make_folder');\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         // once the file is written let's email a link to it...\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }).then(results => {\n *     console.log('results = ', results);\n *     // results = {\n *     //     get_data: ['data', 'converted to array']\n *     //     make_folder; 'folder',\n *     //     write_file: 'filename'\n *     //     email_link: { file: 'filename', email: 'user@example.com' }\n *     // }\n * }).catch(err => {\n *     console.log('err = ', err);\n * });\n *\n * //Using async/await\n * async () => {\n *     try {\n *         let results = await async.auto({\n *             get_data: function(callback) {\n *                 // async code to get some data\n *                 callback(null, 'data', 'converted to array');\n *             },\n *             make_folder: function(callback) {\n *                 // async code to create a directory to store a file in\n *                 // this is run at the same time as getting the data\n *                 callback(null, 'folder');\n *             },\n *             write_file: ['get_data', 'make_folder', function(results, callback) {\n *                 // once there is some data and the directory exists,\n *                 // write the data to a file in the directory\n *                 callback(null, 'filename');\n *             }],\n *             email_link: ['write_file', function(results, callback) {\n *                 // once the file is written let's email a link to it...\n *                 callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *             }]\n *         });\n *         console.log('results = ', results);\n *         // results = {\n *         //     get_data: ['data', 'converted to array']\n *         //     make_folder; 'folder',\n *         //     write_file: 'filename'\n *         //     email_link: { file: 'filename', email: 'user@example.com' }\n *         // }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction auto(tasks, concurrency, callback) {\n    if (typeof concurrency !== 'number') {\n        // concurrency is optional, shift the args.\n        callback = concurrency;\n        concurrency = null;\n    }\n    callback = once(callback || promiseCallback());\n    var numTasks = Object.keys(tasks).length;\n    if (!numTasks) {\n        return callback(null);\n    }\n    if (!concurrency) {\n        concurrency = numTasks;\n    }\n\n    var results = {};\n    var runningTasks = 0;\n    var canceled = false;\n    var hasError = false;\n\n    var listeners = Object.create(null);\n\n    var readyTasks = [];\n\n    // for cycle detection:\n    var readyToCheck = []; // tasks that have been identified as reachable\n    // without the possibility of returning to an ancestor task\n    var uncheckedDependencies = {};\n\n    Object.keys(tasks).forEach(key => {\n        var task = tasks[key];\n        if (!Array.isArray(task)) {\n            // no dependencies\n            enqueueTask(key, [task]);\n            readyToCheck.push(key);\n            return;\n        }\n\n        var dependencies = task.slice(0, task.length - 1);\n        var remainingDependencies = dependencies.length;\n        if (remainingDependencies === 0) {\n            enqueueTask(key, task);\n            readyToCheck.push(key);\n            return;\n        }\n        uncheckedDependencies[key] = remainingDependencies;\n\n        dependencies.forEach(dependencyName => {\n            if (!tasks[dependencyName]) {\n                throw new Error('async.auto task `' + key +\n                    '` has a non-existent dependency `' +\n                    dependencyName + '` in ' +\n                    dependencies.join(', '));\n            }\n            addListener(dependencyName, () => {\n                remainingDependencies--;\n                if (remainingDependencies === 0) {\n                    enqueueTask(key, task);\n                }\n            });\n        });\n    });\n\n    checkForDeadlocks();\n    processQueue();\n\n    function enqueueTask(key, task) {\n        readyTasks.push(() => runTask(key, task));\n    }\n\n    function processQueue() {\n        if (canceled) return\n        if (readyTasks.length === 0 && runningTasks === 0) {\n            return callback(null, results);\n        }\n        while(readyTasks.length && runningTasks < concurrency) {\n            var run = readyTasks.shift();\n            run();\n        }\n\n    }\n\n    function addListener(taskName, fn) {\n        var taskListeners = listeners[taskName];\n        if (!taskListeners) {\n            taskListeners = listeners[taskName] = [];\n        }\n\n        taskListeners.push(fn);\n    }\n\n    function taskComplete(taskName) {\n        var taskListeners = listeners[taskName] || [];\n        taskListeners.forEach(fn => fn());\n        processQueue();\n    }\n\n\n    function runTask(key, task) {\n        if (hasError) return;\n\n        var taskCallback = onlyOnce((err, ...result) => {\n            runningTasks--;\n            if (err === false) {\n                canceled = true;\n                return\n            }\n            if (result.length < 2) {\n                [result] = result;\n            }\n            if (err) {\n                var safeResults = {};\n                Object.keys(results).forEach(rkey => {\n                    safeResults[rkey] = results[rkey];\n                });\n                safeResults[key] = result;\n                hasError = true;\n                listeners = Object.create(null);\n                if (canceled) return\n                callback(err, safeResults);\n            } else {\n                results[key] = result;\n                taskComplete(key);\n            }\n        });\n\n        runningTasks++;\n        var taskFn = wrapAsync(task[task.length - 1]);\n        if (task.length > 1) {\n            taskFn(results, taskCallback);\n        } else {\n            taskFn(taskCallback);\n        }\n    }\n\n    function checkForDeadlocks() {\n        // Kahn's algorithm\n        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n        var currentTask;\n        var counter = 0;\n        while (readyToCheck.length) {\n            currentTask = readyToCheck.pop();\n            counter++;\n            getDependents(currentTask).forEach(dependent => {\n                if (--uncheckedDependencies[dependent] === 0) {\n                    readyToCheck.push(dependent);\n                }\n            });\n        }\n\n        if (counter !== numTasks) {\n            throw new Error(\n                'async.auto cannot execute tasks due to a recursive dependency'\n            );\n        }\n    }\n\n    function getDependents(taskName) {\n        var result = [];\n        Object.keys(tasks).forEach(key => {\n            const task = tasks[key];\n            if (Array.isArray(task) && task.indexOf(taskName) >= 0) {\n                result.push(key);\n            }\n        });\n        return result;\n    }\n\n    return callback[PROMISE_SYMBOL]\n}\n\nvar FN_ARGS = /^(?:async\\s+)?(?:function)?\\s*\\w*\\s*\\(\\s*([^)]+)\\s*\\)(?:\\s*{)/;\nvar ARROW_FN_ARGS = /^(?:async\\s+)?\\(?\\s*([^)=]+)\\s*\\)?(?:\\s*=>)/;\nvar FN_ARG_SPLIT = /,/;\nvar FN_ARG = /(=.+)?(\\s*)$/;\n\nfunction stripComments(string) {\n    let stripped = '';\n    let index = 0;\n    let endBlockComment = string.indexOf('*/');\n    while (index < string.length) {\n        if (string[index] === '/' && string[index+1] === '/') {\n            // inline comment\n            let endIndex = string.indexOf('\\n', index);\n            index = (endIndex === -1) ? string.length : endIndex;\n        } else if ((endBlockComment !== -1) && (string[index] === '/') && (string[index+1] === '*')) {\n            // block comment\n            let endIndex = string.indexOf('*/', index);\n            if (endIndex !== -1) {\n                index = endIndex + 2;\n                endBlockComment = string.indexOf('*/', index);\n            } else {\n                stripped += string[index];\n                index++;\n            }\n        } else {\n            stripped += string[index];\n            index++;\n        }\n    }\n    return stripped;\n}\n\nfunction parseParams(func) {\n    const src = stripComments(func.toString());\n    let match = src.match(FN_ARGS);\n    if (!match) {\n        match = src.match(ARROW_FN_ARGS);\n    }\n    if (!match) throw new Error('could not parse args in autoInject\\nSource:\\n' + src)\n    let [, args] = match;\n    return args\n        .replace(/\\s/g, '')\n        .split(FN_ARG_SPLIT)\n        .map((arg) => arg.replace(FN_ARG, '').trim());\n}\n\n/**\n * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n * tasks are specified as parameters to the function, after the usual callback\n * parameter, with the parameter names matching the names of the tasks it\n * depends on. This can provide even more readable task graphs which can be\n * easier to maintain.\n *\n * If a final callback is specified, the task results are similarly injected,\n * specified as named parameters after the initial error parameter.\n *\n * The autoInject function is purely syntactic sugar and its semantics are\n * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n *\n * @name autoInject\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.auto]{@link module:ControlFlow.auto}\n * @category Control Flow\n * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n * the form 'func([dependencies...], callback). The object's key of a property\n * serves as the name of the task defined by that property, i.e. can be used\n * when specifying requirements for other tasks.\n * * The `callback` parameter is a `callback(err, result)` which must be called\n *   when finished, passing an `error` (which can be `null`) and the result of\n *   the function's execution. The remaining parameters name other tasks on\n *   which the task is dependent, and the results from those tasks are the\n *   arguments of those parameters.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback, and a `results` object with any completed\n * task results, similar to `auto`.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * //  The example from `auto` can be rewritten as follows:\n * async.autoInject({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: function(get_data, make_folder, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     },\n *     email_link: function(write_file, callback) {\n *         // once the file is written let's email a link to it...\n *         // write_file contains the filename returned by write_file.\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n *\n * // If you are using a JS minifier that mangles parameter names, `autoInject`\n * // will not work with plain functions, since the parameter names will be\n * // collapsed to a single letter identifier.  To work around this, you can\n * // explicitly specify the names of the parameters your task function needs\n * // in an array, similar to Angular.js dependency injection.\n *\n * // This still has an advantage over plain `auto`, since the results a task\n * // depends on are still spread into arguments.\n * async.autoInject({\n *     //...\n *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(write_file, callback) {\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }]\n *     //...\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n */\nfunction autoInject(tasks, callback) {\n    var newTasks = {};\n\n    Object.keys(tasks).forEach(key => {\n        var taskFn = tasks[key];\n        var params;\n        var fnIsAsync = isAsync(taskFn);\n        var hasNoDeps =\n            (!fnIsAsync && taskFn.length === 1) ||\n            (fnIsAsync && taskFn.length === 0);\n\n        if (Array.isArray(taskFn)) {\n            params = [...taskFn];\n            taskFn = params.pop();\n\n            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n        } else if (hasNoDeps) {\n            // no dependencies, use the function as-is\n            newTasks[key] = taskFn;\n        } else {\n            params = parseParams(taskFn);\n            if ((taskFn.length === 0 && !fnIsAsync) && params.length === 0) {\n                throw new Error(\"autoInject task functions require explicit parameters.\");\n            }\n\n            // remove callback param\n            if (!fnIsAsync) params.pop();\n\n            newTasks[key] = params.concat(newTask);\n        }\n\n        function newTask(results, taskCb) {\n            var newArgs = params.map(name => results[name]);\n            newArgs.push(taskCb);\n            wrapAsync(taskFn)(...newArgs);\n        }\n    });\n\n    return auto(newTasks, callback);\n}\n\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nclass DLL {\n    constructor() {\n        this.head = this.tail = null;\n        this.length = 0;\n    }\n\n    removeLink(node) {\n        if (node.prev) node.prev.next = node.next;\n        else this.head = node.next;\n        if (node.next) node.next.prev = node.prev;\n        else this.tail = node.prev;\n\n        node.prev = node.next = null;\n        this.length -= 1;\n        return node;\n    }\n\n    empty () {\n        while(this.head) this.shift();\n        return this;\n    }\n\n    insertAfter(node, newNode) {\n        newNode.prev = node;\n        newNode.next = node.next;\n        if (node.next) node.next.prev = newNode;\n        else this.tail = newNode;\n        node.next = newNode;\n        this.length += 1;\n    }\n\n    insertBefore(node, newNode) {\n        newNode.prev = node.prev;\n        newNode.next = node;\n        if (node.prev) node.prev.next = newNode;\n        else this.head = newNode;\n        node.prev = newNode;\n        this.length += 1;\n    }\n\n    unshift(node) {\n        if (this.head) this.insertBefore(this.head, node);\n        else setInitial(this, node);\n    }\n\n    push(node) {\n        if (this.tail) this.insertAfter(this.tail, node);\n        else setInitial(this, node);\n    }\n\n    shift() {\n        return this.head && this.removeLink(this.head);\n    }\n\n    pop() {\n        return this.tail && this.removeLink(this.tail);\n    }\n\n    toArray() {\n        return [...this]\n    }\n\n    *[Symbol.iterator] () {\n        var cur = this.head;\n        while (cur) {\n            yield cur.data;\n            cur = cur.next;\n        }\n    }\n\n    remove (testFn) {\n        var curr = this.head;\n        while(curr) {\n            var {next} = curr;\n            if (testFn(curr)) {\n                this.removeLink(curr);\n            }\n            curr = next;\n        }\n        return this;\n    }\n}\n\nfunction setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n}\n\nfunction queue(worker, concurrency, payload) {\n    if (concurrency == null) {\n        concurrency = 1;\n    }\n    else if(concurrency === 0) {\n        throw new RangeError('Concurrency must not be zero');\n    }\n\n    var _worker = wrapAsync(worker);\n    var numRunning = 0;\n    var workersList = [];\n    const events = {\n        error: [],\n        drain: [],\n        saturated: [],\n        unsaturated: [],\n        empty: []\n    };\n\n    function on (event, handler) {\n        events[event].push(handler);\n    }\n\n    function once (event, handler) {\n        const handleAndRemove = (...args) => {\n            off(event, handleAndRemove);\n            handler(...args);\n        };\n        events[event].push(handleAndRemove);\n    }\n\n    function off (event, handler) {\n        if (!event) return Object.keys(events).forEach(ev => events[ev] = [])\n        if (!handler) return events[event] = []\n        events[event] = events[event].filter(ev => ev !== handler);\n    }\n\n    function trigger (event, ...args) {\n        events[event].forEach(handler => handler(...args));\n    }\n\n    var processingScheduled = false;\n    function _insert(data, insertAtFront, rejectOnError, callback) {\n        if (callback != null && typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n\n        var res, rej;\n        function promiseCallback (err, ...args) {\n            // we don't care about the error, let the global error handler\n            // deal with it\n            if (err) return rejectOnError ? rej(err) : res()\n            if (args.length <= 1) return res(args[0])\n            res(args);\n        }\n\n        var item = {\n            data,\n            callback: rejectOnError ?\n                promiseCallback :\n                (callback || promiseCallback)\n        };\n\n        if (insertAtFront) {\n            q._tasks.unshift(item);\n        } else {\n            q._tasks.push(item);\n        }\n\n        if (!processingScheduled) {\n            processingScheduled = true;\n            setImmediate$1(() => {\n                processingScheduled = false;\n                q.process();\n            });\n        }\n\n        if (rejectOnError || !callback) {\n            return new Promise((resolve, reject) => {\n                res = resolve;\n                rej = reject;\n            })\n        }\n    }\n\n    function _createCB(tasks) {\n        return function (err, ...args) {\n            numRunning -= 1;\n\n            for (var i = 0, l = tasks.length; i < l; i++) {\n                var task = tasks[i];\n\n                var index = workersList.indexOf(task);\n                if (index === 0) {\n                    workersList.shift();\n                } else if (index > 0) {\n                    workersList.splice(index, 1);\n                }\n\n                task.callback(err, ...args);\n\n                if (err != null) {\n                    trigger('error', err, task.data);\n                }\n            }\n\n            if (numRunning <= (q.concurrency - q.buffer) ) {\n                trigger('unsaturated');\n            }\n\n            if (q.idle()) {\n                trigger('drain');\n            }\n            q.process();\n        };\n    }\n\n    function _maybeDrain(data) {\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            setImmediate$1(() => trigger('drain'));\n            return true\n        }\n        return false\n    }\n\n    const eventMethod = (name) => (handler) => {\n        if (!handler) {\n            return new Promise((resolve, reject) => {\n                once(name, (err, data) => {\n                    if (err) return reject(err)\n                    resolve(data);\n                });\n            })\n        }\n        off(name);\n        on(name, handler);\n\n    };\n\n    var isProcessing = false;\n    var q = {\n        _tasks: new DLL(),\n        *[Symbol.iterator] () {\n            yield* q._tasks[Symbol.iterator]();\n        },\n        concurrency,\n        payload,\n        buffer: concurrency / 4,\n        started: false,\n        paused: false,\n        push (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, false, callback))\n            }\n            return _insert(data, false, false, callback);\n        },\n        pushAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, true, callback))\n            }\n            return _insert(data, false, true, callback);\n        },\n        kill () {\n            off();\n            q._tasks.empty();\n        },\n        unshift (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, false, callback))\n            }\n            return _insert(data, true, false, callback);\n        },\n        unshiftAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, true, callback))\n            }\n            return _insert(data, true, true, callback);\n        },\n        remove (testFn) {\n            q._tasks.remove(testFn);\n        },\n        process () {\n            // Avoid trying to start too many processing operations. This can occur\n            // when callbacks resolve synchronously (#1267).\n            if (isProcessing) {\n                return;\n            }\n            isProcessing = true;\n            while(!q.paused && numRunning < q.concurrency && q._tasks.length){\n                var tasks = [], data = [];\n                var l = q._tasks.length;\n                if (q.payload) l = Math.min(l, q.payload);\n                for (var i = 0; i < l; i++) {\n                    var node = q._tasks.shift();\n                    tasks.push(node);\n                    workersList.push(node);\n                    data.push(node.data);\n                }\n\n                numRunning += 1;\n\n                if (q._tasks.length === 0) {\n                    trigger('empty');\n                }\n\n                if (numRunning === q.concurrency) {\n                    trigger('saturated');\n                }\n\n                var cb = onlyOnce(_createCB(tasks));\n                _worker(data, cb);\n            }\n            isProcessing = false;\n        },\n        length () {\n            return q._tasks.length;\n        },\n        running () {\n            return numRunning;\n        },\n        workersList () {\n            return workersList;\n        },\n        idle() {\n            return q._tasks.length + numRunning === 0;\n        },\n        pause () {\n            q.paused = true;\n        },\n        resume () {\n            if (q.paused === false) { return; }\n            q.paused = false;\n            setImmediate$1(q.process);\n        }\n    };\n    // define these as fixed properties, so people get useful errors when updating\n    Object.defineProperties(q, {\n        saturated: {\n            writable: false,\n            value: eventMethod('saturated')\n        },\n        unsaturated: {\n            writable: false,\n            value: eventMethod('unsaturated')\n        },\n        empty: {\n            writable: false,\n            value: eventMethod('empty')\n        },\n        drain: {\n            writable: false,\n            value: eventMethod('drain')\n        },\n        error: {\n            writable: false,\n            value: eventMethod('error')\n        },\n    });\n    return q;\n}\n\n/**\n * Creates a `cargo` object with the specified payload. Tasks added to the\n * cargo will be processed altogether (up to the `payload` limit). If the\n * `worker` is in progress, the task is queued until it becomes available. Once\n * the `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, cargo passes an array of tasks to a single worker, repeating\n * when the worker is finished.\n *\n * @name cargo\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.QueueObject} A cargo object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargo and inner queue.\n * @example\n *\n * // create a cargo object with payload 2\n * var cargo = async.cargo(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2);\n *\n * // add some items\n * cargo.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargo.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * await cargo.push({name: 'baz'});\n * console.log('finished processing baz');\n */\nfunction cargo(worker, payload) {\n    return queue(worker, 1, payload);\n}\n\n/**\n * Creates a `cargoQueue` object with the specified payload. Tasks added to the\n * cargoQueue will be processed together (up to the `payload` limit) in `concurrency` parallel workers.\n * If the all `workers` are in progress, the task is queued until one becomes available. Once\n * a `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,\n * the cargoQueue passes an array of tasks to multiple parallel workers.\n *\n * @name cargoQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @see [async.cargo]{@link module:ControlFLow.cargo}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.QueueObject} A cargoQueue object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargoQueue and inner queue.\n * @example\n *\n * // create a cargoQueue object with payload 2 and concurrency 2\n * var cargoQueue = async.cargoQueue(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2, 2);\n *\n * // add some items\n * cargoQueue.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargoQueue.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * cargoQueue.push({name: 'baz'}, function(err) {\n *     console.log('finished processing baz');\n * });\n * cargoQueue.push({name: 'boo'}, function(err) {\n *     console.log('finished processing boo');\n * });\n */\nfunction cargo$1(worker, concurrency, payload) {\n    return queue(worker, concurrency, payload);\n}\n\n/**\n * Reduces `coll` into a single value using an async `iteratee` to return each\n * successive step. `memo` is the initial state of the reduction. This function\n * only operates in series.\n *\n * For performance reasons, it may make sense to split a call to this function\n * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n * results. This function is for situations where each step in the reduction\n * needs to be async; if you can get the data before reducing it, then it's\n * probably a good idea to do so.\n *\n * @name reduce\n * @static\n * @memberOf module:Collections\n * @method\n * @alias inject\n * @alias foldl\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee completes with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n * // file4.txt does not exist\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n * const withMissingFileList = ['file1.txt','file2.txt','file3.txt', 'file4.txt'];\n *\n * // asynchronous function that computes the file size in bytes\n * // file size is added to the memoized value, then returned\n * function getFileSizeInBytes(memo, file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, memo + stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.reduce(fileList, 0, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // 6000\n *         // which is the sum of the file sizes of the three files\n *     }\n * });\n *\n * // Error Handling\n * async.reduce(withMissingFileList, 0, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     } else {\n *         console.log(result);\n *     }\n * });\n *\n * // Using Promises\n * async.reduce(fileList, 0, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n *     // 6000\n *     // which is the sum of the file sizes of the three files\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.reduce(withMissingFileList, 0, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.reduce(fileList, 0, getFileSizeInBytes);\n *         console.log(result);\n *         // 6000\n *         // which is the sum of the file sizes of the three files\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let result = await async.reduce(withMissingFileList, 0, getFileSizeInBytes);\n *         console.log(result);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction reduce(coll, memo, iteratee, callback) {\n    callback = once(callback);\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfSeries$1(coll, (x, i, iterCb) => {\n        _iteratee(memo, x, (err, v) => {\n            memo = v;\n            iterCb(err);\n        });\n    }, err => callback(err, memo));\n}\nvar reduce$1 = awaitify(reduce, 4);\n\n/**\n * Version of the compose function that is more natural to read. Each function\n * consumes the return value of the previous function. It is the equivalent of\n * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name seq\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.compose]{@link module:ControlFlow.compose}\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} a function that composes the `functions` in order\n * @example\n *\n * // Requires lodash (or underscore), express3 and dresende's orm2.\n * // Part of an app, that fetches cats of the logged user.\n * // This example uses `seq` function to avoid overnesting and error\n * // handling clutter.\n * app.get('/cats', function(request, response) {\n *     var User = request.models.User;\n *     async.seq(\n *         User.get.bind(User),  // 'User.get' has signature (id, callback(err, data))\n *         function(user, fn) {\n *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n *         }\n *     )(req.session.user_id, function (err, cats) {\n *         if (err) {\n *             console.error(err);\n *             response.json({ status: 'error', message: err.message });\n *         } else {\n *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n *         }\n *     });\n * });\n */\nfunction seq(...functions) {\n    var _functions = functions.map(wrapAsync);\n    return function (...args) {\n        var that = this;\n\n        var cb = args[args.length - 1];\n        if (typeof cb == 'function') {\n            args.pop();\n        } else {\n            cb = promiseCallback();\n        }\n\n        reduce$1(_functions, args, (newargs, fn, iterCb) => {\n            fn.apply(that, newargs.concat((err, ...nextargs) => {\n                iterCb(err, nextargs);\n            }));\n        },\n        (err, results) => cb(err, ...results));\n\n        return cb[PROMISE_SYMBOL]\n    };\n}\n\n/**\n * Creates a function which is a composition of the passed asynchronous\n * functions. Each function consumes the return value of the function that\n * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n *\n * If the last argument to the composed function is not a function, a promise\n * is returned when you call it.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name compose\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} an asynchronous function that is the composed\n * asynchronous `functions`\n * @example\n *\n * function add1(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n + 1);\n *     }, 10);\n * }\n *\n * function mul3(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n * 3);\n *     }, 10);\n * }\n *\n * var add1mul3 = async.compose(mul3, add1);\n * add1mul3(4, function (err, result) {\n *     // result now equals 15\n * });\n */\nfunction compose(...args) {\n    return seq(...args.reverse());\n}\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n *\n * @name mapLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapLimit (coll, limit, iteratee, callback) {\n    return _asyncMap(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar mapLimit$1 = awaitify(mapLimit, 4);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n *\n * @name concatLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapLimit\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, ...args) => {\n            if (err) return iterCb(err);\n            return iterCb(err, args);\n        });\n    }, (err, mapResults) => {\n        var result = [];\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                result = result.concat(...mapResults[i]);\n            }\n        }\n\n        return callback(err, result);\n    });\n}\nvar concatLimit$1 = awaitify(concatLimit, 4);\n\n/**\n * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n * the concatenated list. The `iteratee`s are called in parallel, and the\n * results are concatenated as they return. The results array will be returned in\n * the original order of `coll` passed to the `iteratee` function.\n *\n * @name concat\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @alias flatMap\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * let directoryList = ['dir1','dir2','dir3'];\n * let withMissingDirectoryList = ['dir1','dir2','dir3', 'dir4'];\n *\n * // Using callbacks\n * async.concat(directoryList, fs.readdir, function(err, results) {\n *    if (err) {\n *        console.log(err);\n *    } else {\n *        console.log(results);\n *        // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n *    }\n * });\n *\n * // Error Handling\n * async.concat(withMissingDirectoryList, fs.readdir, function(err, results) {\n *    if (err) {\n *        console.log(err);\n *        // [ Error: ENOENT: no such file or directory ]\n *        // since dir4 does not exist\n *    } else {\n *        console.log(results);\n *    }\n * });\n *\n * // Using Promises\n * async.concat(directoryList, fs.readdir)\n * .then(results => {\n *     console.log(results);\n *     // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n * }).catch(err => {\n *      console.log(err);\n * });\n *\n * // Error Handling\n * async.concat(withMissingDirectoryList, fs.readdir)\n * .then(results => {\n *     console.log(results);\n * }).catch(err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4 does not exist\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.concat(directoryList, fs.readdir);\n *         console.log(results);\n *         // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n *     } catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let results = await async.concat(withMissingDirectoryList, fs.readdir);\n *         console.log(results);\n *     } catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *         // since dir4 does not exist\n *     }\n * }\n *\n */\nfunction concat(coll, iteratee, callback) {\n    return concatLimit$1(coll, Infinity, iteratee, callback)\n}\nvar concat$1 = awaitify(concat, 3);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n *\n * @name concatSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapSeries\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n * The iteratee should complete with an array an array of results.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatSeries(coll, iteratee, callback) {\n    return concatLimit$1(coll, 1, iteratee, callback)\n}\nvar concatSeries$1 = awaitify(concatSeries, 3);\n\n/**\n * Returns a function that when called, calls-back with the values provided.\n * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n * [`auto`]{@link module:ControlFlow.auto}.\n *\n * @name constant\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {...*} arguments... - Any number of arguments to automatically invoke\n * callback with.\n * @returns {AsyncFunction} Returns a function that when invoked, automatically\n * invokes the callback with the previous given arguments.\n * @example\n *\n * async.waterfall([\n *     async.constant(42),\n *     function (value, next) {\n *         // value === 42\n *     },\n *     //...\n * ], callback);\n *\n * async.waterfall([\n *     async.constant(filename, \"utf8\"),\n *     fs.readFile,\n *     function (fileData, next) {\n *         //...\n *     }\n *     //...\n * ], callback);\n *\n * async.auto({\n *     hostname: async.constant(\"https://server.net/\"),\n *     port: findFreePort,\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n *         startServer(options, cb);\n *     }],\n *     //...\n * }, callback);\n */\nfunction constant(...args) {\n    return function (...ignoredArgs/*, callback*/) {\n        var callback = ignoredArgs.pop();\n        return callback(null, ...args);\n    };\n}\n\nfunction _createTester(check, getResult) {\n    return (eachfn, arr, _iteratee, cb) => {\n        var testPassed = false;\n        var testResult;\n        const iteratee = wrapAsync(_iteratee);\n        eachfn(arr, (value, _, callback) => {\n            iteratee(value, (err, result) => {\n                if (err || err === false) return callback(err);\n\n                if (check(result) && !testResult) {\n                    testPassed = true;\n                    testResult = getResult(true, value);\n                    return callback(null, breakLoop);\n                }\n                callback();\n            });\n        }, err => {\n            if (err) return cb(err);\n            cb(null, testPassed ? testResult : getResult(false));\n        });\n    };\n}\n\n/**\n * Returns the first value in `coll` that passes an async truth test. The\n * `iteratee` is applied in parallel, meaning the first iteratee to return\n * `true` will fire the detect `callback` with that result. That means the\n * result might not be the first item in the original `coll` (in terms of order)\n * that passes the test.\n\n * If order within the original `coll` is important, then look at\n * [`detectSeries`]{@link module:Collections.detectSeries}.\n *\n * @name detect\n * @static\n * @memberOf module:Collections\n * @method\n * @alias find\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists,\n *    function(err, result) {\n *        console.log(result);\n *        // dir1/file1.txt\n *        // result now equals the first file in the list that exists\n *    }\n *);\n *\n * // Using Promises\n * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists)\n * .then(result => {\n *     console.log(result);\n *     // dir1/file1.txt\n *     // result now equals the first file in the list that exists\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists);\n *         console.log(result);\n *         // dir1/file1.txt\n *         // result now equals the file in the list that exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction detect(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback)\n}\nvar detect$1 = awaitify(detect, 3);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name detectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findLimit\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns a Promise if no callback is passed\n */\nfunction detectLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar detectLimit$1 = awaitify(detectLimit, 4);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n *\n * @name detectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findSeries\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns a Promise if no callback is passed\n */\nfunction detectSeries(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(1), coll, iteratee, callback)\n}\n\nvar detectSeries$1 = awaitify(detectSeries, 3);\n\nfunction consoleFunc(name) {\n    return (fn, ...args) => wrapAsync(fn)(...args, (err, ...resultArgs) => {\n        /* istanbul ignore else */\n        if (typeof console === 'object') {\n            /* istanbul ignore else */\n            if (err) {\n                /* istanbul ignore else */\n                if (console.error) {\n                    console.error(err);\n                }\n            } else if (console[name]) { /* istanbul ignore else */\n                resultArgs.forEach(x => console[name](x));\n            }\n        }\n    })\n}\n\n/**\n * Logs the result of an [`async` function]{@link AsyncFunction} to the\n * `console` using `console.dir` to display the properties of the resulting object.\n * Only works in Node.js or in browsers that support `console.dir` and\n * `console.error` (such as FF and Chrome).\n * If multiple arguments are returned from the async function,\n * `console.dir` is called on each argument in order.\n *\n * @name dir\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, {hello: name});\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.dir(hello, 'world');\n * {hello: 'world'}\n */\nvar dir = consoleFunc('dir');\n\n/**\n * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n * the order of operations, the arguments `test` and `iteratee` are switched.\n *\n * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n *\n * @name doWhilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - A function which is called each time `test`\n * passes. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped.\n * `callback` will be passed an error and any arguments passed to the final\n * `iteratee`'s callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doWhilst(iteratee, test, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results;\n\n    function next(err, ...args) {\n        if (err) return callback(err);\n        if (err === false) return;\n        results = args;\n        _test(...args, check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return check(null, true);\n}\n\nvar doWhilst$1 = awaitify(doWhilst, 3);\n\n/**\n * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n * argument ordering differs from `until`.\n *\n * @name doUntil\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doUntil(iteratee, test, callback) {\n    const _test = wrapAsync(test);\n    return doWhilst$1(iteratee, (...args) => {\n        const cb = args.pop();\n        _test(...args, (err, truth) => cb (err, !truth));\n    }, callback);\n}\n\nfunction _withoutIndex(iteratee) {\n    return (value, index, callback) => iteratee(value, callback);\n}\n\n/**\n * Applies the function `iteratee` to each item in `coll`, in parallel.\n * The `iteratee` is called with an item from the list, and a callback for when\n * it has finished. If the `iteratee` passes an error to its `callback`, the\n * main `callback` (for the `each` function) is immediately called with the\n * error.\n *\n * Note, that since this function applies `iteratee` to each item in parallel,\n * there is no guarantee that the iteratee functions will complete in order.\n *\n * @name each\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEach\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to\n * each item in `coll`. Invoked with (item, callback).\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOf`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const fileList = [ 'dir1/file2.txt', 'dir2/file3.txt', 'dir/file5.txt'];\n * const withMissingFileList = ['dir1/file1.txt', 'dir4/file2.txt'];\n *\n * // asynchronous function that deletes a file\n * const deleteFile = function(file, callback) {\n *     fs.unlink(file, callback);\n * };\n *\n * // Using callbacks\n * async.each(fileList, deleteFile, function(err) {\n *     if( err ) {\n *         console.log(err);\n *     } else {\n *         console.log('All files have been deleted successfully');\n *     }\n * });\n *\n * // Error Handling\n * async.each(withMissingFileList, deleteFile, function(err){\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4/file2.txt does not exist\n *     // dir1/file1.txt could have been deleted\n * });\n *\n * // Using Promises\n * async.each(fileList, deleteFile)\n * .then( () => {\n *     console.log('All files have been deleted successfully');\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.each(fileList, deleteFile)\n * .then( () => {\n *     console.log('All files have been deleted successfully');\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4/file2.txt does not exist\n *     // dir1/file1.txt could have been deleted\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         await async.each(files, deleteFile);\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         await async.each(withMissingFileList, deleteFile);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *         // since dir4/file2.txt does not exist\n *         // dir1/file1.txt could have been deleted\n *     }\n * }\n *\n */\nfunction eachLimit(coll, iteratee, callback) {\n    return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\n\nvar each = awaitify(eachLimit, 3);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n *\n * @name eachLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfLimit`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\nvar eachLimit$2 = awaitify(eachLimit$1, 4);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n *\n * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item\n * in series and therefore the iteratee functions will complete in order.\n\n * @name eachSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfSeries`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachSeries(coll, iteratee, callback) {\n    return eachLimit$2(coll, 1, iteratee, callback)\n}\nvar eachSeries$1 = awaitify(eachSeries, 3);\n\n/**\n * Wrap an async function and ensure it calls its callback on a later tick of\n * the event loop.  If the function already calls its callback on a next tick,\n * no extra deferral is added. This is useful for preventing stack overflows\n * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n * contained. ES2017 `async` functions are returned as-is -- they are immune\n * to Zalgo's corrupting influences, as they always resolve on a later tick.\n *\n * @name ensureAsync\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - an async function, one that expects a node-style\n * callback as its last argument.\n * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n * signature as the function passed in.\n * @example\n *\n * function sometimesAsync(arg, callback) {\n *     if (cache[arg]) {\n *         return callback(null, cache[arg]); // this would be synchronous!!\n *     } else {\n *         doSomeIO(arg, callback); // this IO would be asynchronous\n *     }\n * }\n *\n * // this has a risk of stack overflows if many results are cached in a row\n * async.mapSeries(args, sometimesAsync, done);\n *\n * // this will defer sometimesAsync's callback if necessary,\n * // preventing stack overflows\n * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n */\nfunction ensureAsync(fn) {\n    if (isAsync(fn)) return fn;\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        var sync = true;\n        args.push((...innerArgs) => {\n            if (sync) {\n                setImmediate$1(() => callback(...innerArgs));\n            } else {\n                callback(...innerArgs);\n            }\n        });\n        fn.apply(this, args);\n        sync = false;\n    };\n}\n\n/**\n * Returns `true` if every element in `coll` satisfies an async test. If any\n * iteratee call returns `false`, the main `callback` is immediately called.\n *\n * @name every\n * @static\n * @memberOf module:Collections\n * @method\n * @alias all\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file5.txt'];\n * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.every(fileList, fileExists, function(err, result) {\n *     console.log(result);\n *     // true\n *     // result is true since every file exists\n * });\n *\n * async.every(withMissingFileList, fileExists, function(err, result) {\n *     console.log(result);\n *     // false\n *     // result is false since NOT every file exists\n * });\n *\n * // Using Promises\n * async.every(fileList, fileExists)\n * .then( result => {\n *     console.log(result);\n *     // true\n *     // result is true since every file exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * async.every(withMissingFileList, fileExists)\n * .then( result => {\n *     console.log(result);\n *     // false\n *     // result is false since NOT every file exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.every(fileList, fileExists);\n *         console.log(result);\n *         // true\n *         // result is true since every file exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * async () => {\n *     try {\n *         let result = await async.every(withMissingFileList, fileExists);\n *         console.log(result);\n *         // false\n *         // result is false since NOT every file exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction every(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOf$1, coll, iteratee, callback)\n}\nvar every$1 = awaitify(every, 3);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n *\n * @name everyLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everyLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar everyLimit$1 = awaitify(everyLimit, 4);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n *\n * @name everySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in series.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everySeries(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar everySeries$1 = awaitify(everySeries, 3);\n\nfunction filterArray(eachfn, arr, iteratee, callback) {\n    var truthValues = new Array(arr.length);\n    eachfn(arr, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            truthValues[index] = !!v;\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        var results = [];\n        for (var i = 0; i < arr.length; i++) {\n            if (truthValues[i]) results.push(arr[i]);\n        }\n        callback(null, results);\n    });\n}\n\nfunction filterGeneric(eachfn, coll, iteratee, callback) {\n    var results = [];\n    eachfn(coll, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            if (err) return iterCb(err);\n            if (v) {\n                results.push({index, value: x});\n            }\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        callback(null, results\n            .sort((a, b) => a.index - b.index)\n            .map(v => v.value));\n    });\n}\n\nfunction _filter(eachfn, coll, iteratee, callback) {\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n    return filter(eachfn, coll, wrapAsync(iteratee), callback);\n}\n\n/**\n * Returns a new array of all the values in `coll` which pass an async truth\n * test. This operation is performed in parallel, but the results array will be\n * in the same order as the original.\n *\n * @name filter\n * @static\n * @memberOf module:Collections\n * @method\n * @alias select\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n *\n * const files = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.filter(files, fileExists, function(err, results) {\n *    if(err) {\n *        console.log(err);\n *    } else {\n *        console.log(results);\n *        // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n *        // results is now an array of the existing files\n *    }\n * });\n *\n * // Using Promises\n * async.filter(files, fileExists)\n * .then(results => {\n *     console.log(results);\n *     // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n *     // results is now an array of the existing files\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.filter(files, fileExists);\n *         console.log(results);\n *         // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n *         // results is now an array of the existing files\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction filter (coll, iteratee, callback) {\n    return _filter(eachOf$1, coll, iteratee, callback)\n}\nvar filter$1 = awaitify(filter, 3);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name filterLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterLimit (coll, limit, iteratee, callback) {\n    return _filter(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar filterLimit$1 = awaitify(filterLimit, 4);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n *\n * @name filterSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results)\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterSeries (coll, iteratee, callback) {\n    return _filter(eachOfSeries$1, coll, iteratee, callback)\n}\nvar filterSeries$1 = awaitify(filterSeries, 3);\n\n/**\n * Calls the asynchronous function `fn` with a callback parameter that allows it\n * to call itself again, in series, indefinitely.\n\n * If an error is passed to the callback then `errback` is called with the\n * error, and execution stops, otherwise it will never be called.\n *\n * @name forever\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} fn - an async function to call repeatedly.\n * Invoked with (next).\n * @param {Function} [errback] - when `fn` passes an error to it's callback,\n * this function will be called, and execution stops. Invoked with (err).\n * @returns {Promise} a promise that rejects if an error occurs and an errback\n * is not passed\n * @example\n *\n * async.forever(\n *     function(next) {\n *         // next is suitable for passing to things that need a callback(err [, whatever]);\n *         // it will result in this function being called again.\n *     },\n *     function(err) {\n *         // if next is called with a value in its first parameter, it will appear\n *         // in here as 'err', and execution will stop.\n *     }\n * );\n */\nfunction forever(fn, errback) {\n    var done = onlyOnce(errback);\n    var task = wrapAsync(ensureAsync(fn));\n\n    function next(err) {\n        if (err) return done(err);\n        if (err === false) return;\n        task(next);\n    }\n    return next();\n}\nvar forever$1 = awaitify(forever, 2);\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n *\n * @name groupByLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupByLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, key) => {\n            if (err) return iterCb(err);\n            return iterCb(err, {key, val});\n        });\n    }, (err, mapResults) => {\n        var result = {};\n        // from MDN, handle object having an `hasOwnProperty` prop\n        var {hasOwnProperty} = Object.prototype;\n\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                var {key} = mapResults[i];\n                var {val} = mapResults[i];\n\n                if (hasOwnProperty.call(result, key)) {\n                    result[key].push(val);\n                } else {\n                    result[key] = [val];\n                }\n            }\n        }\n\n        return callback(err, result);\n    });\n}\n\nvar groupByLimit$1 = awaitify(groupByLimit, 4);\n\n/**\n * Returns a new object, where each value corresponds to an array of items, from\n * `coll`, that returned the corresponding key. That is, the keys of the object\n * correspond to the values passed to the `iteratee` callback.\n *\n * Note: Since this function applies the `iteratee` to each item in parallel,\n * there is no guarantee that the `iteratee` functions will complete in order.\n * However, the values for each key in the `result` will be in the same order as\n * the original `coll`. For Objects, the values will roughly be in the order of\n * the original Objects' keys (but this can vary across JavaScript engines).\n *\n * @name groupBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const files = ['dir1/file1.txt','dir2','dir4']\n *\n * // asynchronous function that detects file type as none, file, or directory\n * function detectFile(file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(null, 'none');\n *         }\n *         callback(null, stat.isDirectory() ? 'directory' : 'file');\n *     });\n * }\n *\n * //Using callbacks\n * async.groupBy(files, detectFile, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *\t       console.log(result);\n *         // {\n *         //     file: [ 'dir1/file1.txt' ],\n *         //     none: [ 'dir4' ],\n *         //     directory: [ 'dir2']\n *         // }\n *         // result is object containing the files grouped by type\n *     }\n * });\n *\n * // Using Promises\n * async.groupBy(files, detectFile)\n * .then( result => {\n *     console.log(result);\n *     // {\n *     //     file: [ 'dir1/file1.txt' ],\n *     //     none: [ 'dir4' ],\n *     //     directory: [ 'dir2']\n *     // }\n *     // result is object containing the files grouped by type\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.groupBy(files, detectFile);\n *         console.log(result);\n *         // {\n *         //     file: [ 'dir1/file1.txt' ],\n *         //     none: [ 'dir4' ],\n *         //     directory: [ 'dir2']\n *         // }\n *         // result is object containing the files grouped by type\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction groupBy (coll, iteratee, callback) {\n    return groupByLimit$1(coll, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n *\n * @name groupBySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whose\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupBySeries (coll, iteratee, callback) {\n    return groupByLimit$1(coll, 1, iteratee, callback)\n}\n\n/**\n * Logs the result of an `async` function to the `console`. Only works in\n * Node.js or in browsers that support `console.log` and `console.error` (such\n * as FF and Chrome). If multiple arguments are returned from the async\n * function, `console.log` is called on each argument in order.\n *\n * @name log\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, 'hello ' + name);\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.log(hello, 'world');\n * 'hello world'\n */\nvar log = consoleFunc('log');\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name mapValuesLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesLimit(obj, limit, iteratee, callback) {\n    callback = once(callback);\n    var newObj = {};\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfLimit(limit)(obj, (val, key, next) => {\n        _iteratee(val, key, (err, result) => {\n            if (err) return next(err);\n            newObj[key] = result;\n            next(err);\n        });\n    }, err => callback(err, newObj));\n}\n\nvar mapValuesLimit$1 = awaitify(mapValuesLimit, 4);\n\n/**\n * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n *\n * Produces a new Object by mapping each value of `obj` through the `iteratee`\n * function. The `iteratee` is called each `value` and `key` from `obj` and a\n * callback for when it has finished processing. Each of these callbacks takes\n * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n * passes an error to its callback, the main `callback` (for the `mapValues`\n * function) is immediately called with the error.\n *\n * Note, the order of the keys in the result is not guaranteed.  The keys will\n * be roughly in the order they complete, (but this is very engine-specific)\n *\n * @name mapValues\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n * // file4.txt does not exist\n *\n * const fileMap = {\n *     f1: 'file1.txt',\n *     f2: 'file2.txt',\n *     f3: 'file3.txt'\n * };\n *\n * const withMissingFileMap = {\n *     f1: 'file1.txt',\n *     f2: 'file2.txt',\n *     f3: 'file4.txt'\n * };\n *\n * // asynchronous function that returns the file size in bytes\n * function getFileSizeInBytes(file, key, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.mapValues(fileMap, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // result is now a map of file size in bytes for each file, e.g.\n *         // {\n *         //     f1: 1000,\n *         //     f2: 2000,\n *         //     f3: 3000\n *         // }\n *     }\n * });\n *\n * // Error handling\n * async.mapValues(withMissingFileMap, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     } else {\n *         console.log(result);\n *     }\n * });\n *\n * // Using Promises\n * async.mapValues(fileMap, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n *     // result is now a map of file size in bytes for each file, e.g.\n *     // {\n *     //     f1: 1000,\n *     //     f2: 2000,\n *     //     f3: 3000\n *     // }\n * }).catch (err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.mapValues(withMissingFileMap, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n * }).catch (err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.mapValues(fileMap, getFileSizeInBytes);\n *         console.log(result);\n *         // result is now a map of file size in bytes for each file, e.g.\n *         // {\n *         //     f1: 1000,\n *         //     f2: 2000,\n *         //     f3: 3000\n *         // }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let result = await async.mapValues(withMissingFileMap, getFileSizeInBytes);\n *         console.log(result);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction mapValues(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n *\n * @name mapValuesSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesSeries(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, 1, iteratee, callback)\n}\n\n/**\n * Caches the results of an async function. When creating a hash to store\n * function results against, the callback is omitted from the hash and an\n * optional hash function can be used.\n *\n * **Note: if the async function errs, the result will not be cached and\n * subsequent calls will call the wrapped function.**\n *\n * If no hash function is specified, the first argument is used as a hash key,\n * which may work reasonably if it is a string or a data type that converts to a\n * distinct string. Note that objects and arrays will not behave reasonably.\n * Neither will cases where the other arguments are significant. In such cases,\n * specify your own hash function.\n *\n * The cache of results is exposed as the `memo` property of the function\n * returned by `memoize`.\n *\n * @name memoize\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n * @param {Function} hasher - An optional function for generating a custom hash\n * for storing results. It has all the arguments applied to it apart from the\n * callback, and must be synchronous.\n * @returns {AsyncFunction} a memoized version of `fn`\n * @example\n *\n * var slow_fn = function(name, callback) {\n *     // do something\n *     callback(null, result);\n * };\n * var fn = async.memoize(slow_fn);\n *\n * // fn can now be used as if it were slow_fn\n * fn('some name', function() {\n *     // callback\n * });\n */\nfunction memoize(fn, hasher = v => v) {\n    var memo = Object.create(null);\n    var queues = Object.create(null);\n    var _fn = wrapAsync(fn);\n    var memoized = initialParams((args, callback) => {\n        var key = hasher(...args);\n        if (key in memo) {\n            setImmediate$1(() => callback(null, ...memo[key]));\n        } else if (key in queues) {\n            queues[key].push(callback);\n        } else {\n            queues[key] = [callback];\n            _fn(...args, (err, ...resultArgs) => {\n                // #1465 don't memoize if an error occurred\n                if (!err) {\n                    memo[key] = resultArgs;\n                }\n                var q = queues[key];\n                delete queues[key];\n                for (var i = 0, l = q.length; i < l; i++) {\n                    q[i](err, ...resultArgs);\n                }\n            });\n        }\n    });\n    memoized.memo = memo;\n    memoized.unmemoized = fn;\n    return memoized;\n}\n\n/* istanbul ignore file */\n\n/**\n * Calls `callback` on a later loop around the event loop. In Node.js this just\n * calls `process.nextTick`.  In the browser it will use `setImmediate` if\n * available, otherwise `setTimeout(callback, 0)`, which means other higher\n * priority events may precede the execution of `callback`.\n *\n * This is used internally for browser-compatibility purposes.\n *\n * @name nextTick\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.setImmediate]{@link module:Utils.setImmediate}\n * @category Util\n * @param {Function} callback - The function to call on a later loop around\n * the event loop. Invoked with (args...).\n * @param {...*} args... - any number of additional arguments to pass to the\n * callback on the next tick.\n * @example\n *\n * var call_order = [];\n * async.nextTick(function() {\n *     call_order.push('two');\n *     // call_order now equals ['one','two']\n * });\n * call_order.push('one');\n *\n * async.setImmediate(function (a, b, c) {\n *     // a, b, and c equal 1, 2, and 3\n * }, 1, 2, 3);\n */\nvar _defer$1;\n\nif (hasNextTick) {\n    _defer$1 = process.nextTick;\n} else if (hasSetImmediate) {\n    _defer$1 = setImmediate;\n} else {\n    _defer$1 = fallback;\n}\n\nvar nextTick = wrap(_defer$1);\n\nvar _parallel = awaitify((eachfn, tasks, callback) => {\n    var results = isArrayLike(tasks) ? [] : {};\n\n    eachfn(tasks, (task, key, taskCb) => {\n        wrapAsync(task)((err, ...result) => {\n            if (result.length < 2) {\n                [result] = result;\n            }\n            results[key] = result;\n            taskCb(err);\n        });\n    }, err => callback(err, results));\n}, 3);\n\n/**\n * Run the `tasks` collection of functions in parallel, without waiting until\n * the previous function has completed. If any of the functions pass an error to\n * its callback, the main `callback` is immediately called with the value of the\n * error. Once the `tasks` have completed, the results are passed to the final\n * `callback` as an array.\n *\n * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n * parallel execution of code.  If your tasks do not use any timers or perform\n * any I/O, they will actually be executed in series.  Any synchronous setup\n * sections for each task will happen one after the other.  JavaScript remains\n * single-threaded.\n *\n * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n * execution of other tasks when a task fails.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n * results from {@link async.parallel}.\n *\n * @name parallel\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n *\n * //Using Callbacks\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ], function(err, results) {\n *     console.log(results);\n *     // results is equal to ['one','two'] even though\n *     // the second function had a shorter timeout.\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * });\n *\n * //Using Promises\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ]).then(results => {\n *     console.log(results);\n *     // results is equal to ['one','two'] even though\n *     // the second function had a shorter timeout.\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }).then(results => {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * //Using async/await\n * async () => {\n *     try {\n *         let results = await async.parallel([\n *             function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 'one');\n *                 }, 200);\n *             },\n *             function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 'two');\n *                 }, 100);\n *             }\n *         ]);\n *         console.log(results);\n *         // results is equal to ['one','two'] even though\n *         // the second function had a shorter timeout.\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // an example using an object instead of an array\n * async () => {\n *     try {\n *         let results = await async.parallel({\n *             one: function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 1);\n *                 }, 200);\n *             },\n *            two: function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 2);\n *                 }, 100);\n *            }\n *         });\n *         console.log(results);\n *         // results is equal to: { one: 1, two: 2 }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction parallel(tasks, callback) {\n    return _parallel(eachOf$1, tasks, callback);\n}\n\n/**\n * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name parallelLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.parallel]{@link module:ControlFlow.parallel}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n */\nfunction parallelLimit(tasks, limit, callback) {\n    return _parallel(eachOfLimit(limit), tasks, callback);\n}\n\n/**\n * A queue of tasks for the worker function to complete.\n * @typedef {Iterable} QueueObject\n * @memberOf module:ControlFlow\n * @property {Function} length - a function returning the number of items\n * waiting to be processed. Invoke with `queue.length()`.\n * @property {boolean} started - a boolean indicating whether or not any\n * items have been pushed and processed by the queue.\n * @property {Function} running - a function returning the number of items\n * currently being processed. Invoke with `queue.running()`.\n * @property {Function} workersList - a function returning the array of items\n * currently being processed. Invoke with `queue.workersList()`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n * @property {number} concurrency - an integer for determining how many `worker`\n * functions should be run in parallel. This property can be changed after a\n * `queue` is created to alter the concurrency on-the-fly.\n * @property {number} payload - an integer that specifies how many items are\n * passed to the worker function at a time. only applies if this is a\n * [cargo]{@link module:ControlFlow.cargo} object\n * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`\n * once the `worker` has finished processing the task. Instead of a single task,\n * a `tasks` array can be submitted. The respective callback is used for every\n * task in the list. Invoke with `queue.push(task, [callback])`,\n * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.\n * Invoke with `queue.unshift(task, [callback])`.\n * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns\n * a promise that rejects if an error occurs.\n * @property {AsyncFunction} unshiftAsync - the same as `q.unshift`, except this returns\n * a promise that rejects if an error occurs.\n * @property {Function} remove - remove items from the queue that match a test\n * function.  The test function will be passed an object with a `data` property,\n * and a `priority` property, if this is a\n * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n * `function ({data, priority}) {}` and returns a Boolean.\n * @property {Function} saturated - a function that sets a callback that is\n * called when the number of running workers hits the `concurrency` limit, and\n * further tasks will be queued.  If the callback is omitted, `q.saturated()`\n * returns a promise for the next occurrence.\n * @property {Function} unsaturated - a function that sets a callback that is\n * called when the number of running workers is less than the `concurrency` &\n * `buffer` limits, and further tasks will not be queued. If the callback is\n * omitted, `q.unsaturated()` returns a promise for the next occurrence.\n * @property {number} buffer - A minimum threshold buffer in order to say that\n * the `queue` is `unsaturated`.\n * @property {Function} empty - a function that sets a callback that is called\n * when the last item from the `queue` is given to a `worker`. If the callback\n * is omitted, `q.empty()` returns a promise for the next occurrence.\n * @property {Function} drain - a function that sets a callback that is called\n * when the last item from the `queue` has returned from the `worker`. If the\n * callback is omitted, `q.drain()` returns a promise for the next occurrence.\n * @property {Function} error - a function that sets a callback that is called\n * when a task errors. Has the signature `function(error, task)`. If the\n * callback is omitted, `error()` returns a promise that rejects on the next\n * error.\n * @property {boolean} paused - a boolean for determining whether the queue is\n * in a paused state.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke with `queue.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. No more tasks\n * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n *\n * @example\n * const q = async.queue(worker, 2)\n * q.push(item1)\n * q.push(item2)\n * q.push(item3)\n * // queues are iterable, spread into an array to inspect\n * const items = [...q] // [item1, item2, item3]\n * // or use for of\n * for (let item of q) {\n *     console.log(item)\n * }\n *\n * q.drain(() => {\n *     console.log('all done')\n * })\n * // or\n * await q.drain()\n */\n\n/**\n * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n * `queue` are processed in parallel (up to the `concurrency` limit). If all\n * `worker`s are in progress, the task is queued until one becomes available.\n * Once a `worker` completes a `task`, that `task`'s callback is called.\n *\n * @name queue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`. Invoked with (task, callback).\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be\n * attached as certain properties to listen for specific events during the\n * lifecycle of the queue.\n * @example\n *\n * // create a queue object with concurrency 2\n * var q = async.queue(function(task, callback) {\n *     console.log('hello ' + task.name);\n *     callback();\n * }, 2);\n *\n * // assign a callback\n * q.drain(function() {\n *     console.log('all items have been processed');\n * });\n * // or await the end\n * await q.drain()\n *\n * // assign an error callback\n * q.error(function(err, task) {\n *     console.error('task experienced an error');\n * });\n *\n * // add some items to the queue\n * q.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * // callback is optional\n * q.push({name: 'bar'});\n *\n * // add some items to the queue (batch-wise)\n * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n *     console.log('finished processing item');\n * });\n *\n * // add some items to the front of the queue\n * q.unshift({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n */\nfunction queue$1 (worker, concurrency) {\n    var _worker = wrapAsync(worker);\n    return queue((items, cb) => {\n        _worker(items[0], cb);\n    }, concurrency, 1);\n}\n\n// Binary min-heap implementation used for priority queue.\n// Implementation is stable, i.e. push time is considered for equal priorities\nclass Heap {\n    constructor() {\n        this.heap = [];\n        this.pushCount = Number.MIN_SAFE_INTEGER;\n    }\n\n    get length() {\n        return this.heap.length;\n    }\n\n    empty () {\n        this.heap = [];\n        return this;\n    }\n\n    percUp(index) {\n        let p;\n\n        while (index > 0 && smaller(this.heap[index], this.heap[p=parent(index)])) {\n            let t = this.heap[index];\n            this.heap[index] = this.heap[p];\n            this.heap[p] = t;\n\n            index = p;\n        }\n    }\n\n    percDown(index) {\n        let l;\n\n        while ((l=leftChi(index)) < this.heap.length) {\n            if (l+1 < this.heap.length && smaller(this.heap[l+1], this.heap[l])) {\n                l = l+1;\n            }\n\n            if (smaller(this.heap[index], this.heap[l])) {\n                break;\n            }\n\n            let t = this.heap[index];\n            this.heap[index] = this.heap[l];\n            this.heap[l] = t;\n\n            index = l;\n        }\n    }\n\n    push(node) {\n        node.pushCount = ++this.pushCount;\n        this.heap.push(node);\n        this.percUp(this.heap.length-1);\n    }\n\n    unshift(node) {\n        return this.heap.push(node);\n    }\n\n    shift() {\n        let [top] = this.heap;\n\n        this.heap[0] = this.heap[this.heap.length-1];\n        this.heap.pop();\n        this.percDown(0);\n\n        return top;\n    }\n\n    toArray() {\n        return [...this];\n    }\n\n    *[Symbol.iterator] () {\n        for (let i = 0; i < this.heap.length; i++) {\n            yield this.heap[i].data;\n        }\n    }\n\n    remove (testFn) {\n        let j = 0;\n        for (let i = 0; i < this.heap.length; i++) {\n            if (!testFn(this.heap[i])) {\n                this.heap[j] = this.heap[i];\n                j++;\n            }\n        }\n\n        this.heap.splice(j);\n\n        for (let i = parent(this.heap.length-1); i >= 0; i--) {\n            this.percDown(i);\n        }\n\n        return this;\n    }\n}\n\nfunction leftChi(i) {\n    return (i<<1)+1;\n}\n\nfunction parent(i) {\n    return ((i+1)>>1)-1;\n}\n\nfunction smaller(x, y) {\n    if (x.priority !== y.priority) {\n        return x.priority < y.priority;\n    }\n    else {\n        return x.pushCount < y.pushCount;\n    }\n}\n\n/**\n * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n * completed in ascending priority order.\n *\n * @name priorityQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`.\n * Invoked with (task, callback).\n * @param {number} concurrency - An `integer` for determining how many `worker`\n * functions should be run in parallel.  If omitted, the concurrency defaults to\n * `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\n * differences between `queue` and `priorityQueue` objects:\n * * `push(task, priority, [callback])` - `priority` should be a number. If an\n *   array of `tasks` is given, all tasks will be assigned the same priority.\n * * The `unshift` method was removed.\n */\nfunction priorityQueue(worker, concurrency) {\n    // Start with a normal queue\n    var q = queue$1(worker, concurrency);\n    var processingScheduled = false;\n\n    q._tasks = new Heap();\n\n    // Override push to accept second parameter representing priority\n    q.push = function(data, priority = 0, callback = () => {}) {\n        if (typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            return setImmediate$1(() => q.drain());\n        }\n\n        for (var i = 0, l = data.length; i < l; i++) {\n            var item = {\n                data: data[i],\n                priority,\n                callback\n            };\n\n            q._tasks.push(item);\n        }\n\n        if (!processingScheduled) {\n            processingScheduled = true;\n            setImmediate$1(() => {\n                processingScheduled = false;\n                q.process();\n            });\n        }\n    };\n\n    // Remove unshift function\n    delete q.unshift;\n\n    return q;\n}\n\n/**\n * Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any of the `tasks` complete or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n * to run. Each function can complete with an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns undefined\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });\n */\nfunction race(tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n    for (var i = 0, l = tasks.length; i < l; i++) {\n        wrapAsync(tasks[i])(callback);\n    }\n}\n\nvar race$1 = awaitify(race, 2);\n\n/**\n * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n *\n * @name reduceRight\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reduce]{@link module:Collections.reduce}\n * @alias foldr\n * @category Collection\n * @param {Array} array - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee completes with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction reduceRight (array, memo, iteratee, callback) {\n    var reversed = [...array].reverse();\n    return reduce$1(reversed, memo, iteratee, callback);\n}\n\n/**\n * Wraps the async function in another function that always completes with a\n * result object, even when it errors.\n *\n * The result object has either the property `error` or `value`.\n *\n * @name reflect\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function you want to wrap\n * @returns {Function} - A function that always passes null to it's callback as\n * the error. The second argument to the callback will be an `object` with\n * either an `error` or a `value` property.\n * @example\n *\n * async.parallel([\n *     async.reflect(function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff but error ...\n *         callback('bad stuff happened');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     })\n * ],\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = 'bad stuff happened'\n *     // results[2].value = 'two'\n * });\n */\nfunction reflect(fn) {\n    var _fn = wrapAsync(fn);\n    return initialParams(function reflectOn(args, reflectCallback) {\n        args.push((error, ...cbArgs) => {\n            let retVal = {};\n            if (error) {\n                retVal.error = error;\n            }\n            if (cbArgs.length > 0){\n                var value = cbArgs;\n                if (cbArgs.length <= 1) {\n                    [value] = cbArgs;\n                }\n                retVal.value = value;\n            }\n            reflectCallback(null, retVal);\n        });\n\n        return _fn.apply(this, args);\n    });\n}\n\n/**\n * A helper function that wraps an array or an object of functions with `reflect`.\n *\n * @name reflectAll\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.reflect]{@link module:Utils.reflect}\n * @category Util\n * @param {Array|Object|Iterable} tasks - The collection of\n * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n * @returns {Array} Returns an array of async functions, each wrapped in\n * `async.reflect`\n * @example\n *\n * let tasks = [\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         // do some more stuff but error ...\n *         callback(new Error('bad stuff happened'));\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ];\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = Error('bad stuff happened')\n *     // results[2].value = 'two'\n * });\n *\n * // an example using an object instead of an array\n * let tasks = {\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         callback('two');\n *     },\n *     three: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'three');\n *         }, 100);\n *     }\n * };\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results.one.value = 'one'\n *     // results.two.error = 'two'\n *     // results.three.value = 'three'\n * });\n */\nfunction reflectAll(tasks) {\n    var results;\n    if (Array.isArray(tasks)) {\n        results = tasks.map(reflect);\n    } else {\n        results = {};\n        Object.keys(tasks).forEach(key => {\n            results[key] = reflect.call(this, tasks[key]);\n        });\n    }\n    return results;\n}\n\nfunction reject(eachfn, arr, _iteratee, callback) {\n    const iteratee = wrapAsync(_iteratee);\n    return _filter(eachfn, arr, (value, cb) => {\n        iteratee(value, (err, v) => {\n            cb(err, !v);\n        });\n    }, callback);\n}\n\n/**\n * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n *\n * @name reject\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n *\n * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.reject(fileList, fileExists, function(err, results) {\n *    // [ 'dir3/file6.txt' ]\n *    // results now equals an array of the non-existing files\n * });\n *\n * // Using Promises\n * async.reject(fileList, fileExists)\n * .then( results => {\n *     console.log(results);\n *     // [ 'dir3/file6.txt' ]\n *     // results now equals an array of the non-existing files\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.reject(fileList, fileExists);\n *         console.log(results);\n *         // [ 'dir3/file6.txt' ]\n *         // results now equals an array of the non-existing files\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction reject$1 (coll, iteratee, callback) {\n    return reject(eachOf$1, coll, iteratee, callback)\n}\nvar reject$2 = awaitify(reject$1, 3);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name rejectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectLimit (coll, limit, iteratee, callback) {\n    return reject(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar rejectLimit$1 = awaitify(rejectLimit, 4);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n *\n * @name rejectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectSeries (coll, iteratee, callback) {\n    return reject(eachOfSeries$1, coll, iteratee, callback)\n}\nvar rejectSeries$1 = awaitify(rejectSeries, 3);\n\nfunction constant$1(value) {\n    return function () {\n        return value;\n    }\n}\n\n/**\n * Attempts to get a successful response from `task` no more than `times` times\n * before returning an error. If the task is successful, the `callback` will be\n * passed the result of the successful task. If all attempts fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name retry\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @see [async.retryable]{@link module:ControlFlow.retryable}\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n * object with `times` and `interval` or a number.\n * * `times` - The number of attempts to make before giving up.  The default\n *   is `5`.\n * * `interval` - The time to wait between retries, in milliseconds.  The\n *   default is `0`. The interval may also be specified as a function of the\n *   retry count (see example).\n * * `errorFilter` - An optional synchronous function that is invoked on\n *   erroneous result. If it returns `true` the retry attempts will continue;\n *   if the function returns `false` the retry flow is aborted with the current\n *   attempt's error and result being returned to the final callback.\n *   Invoked with (err).\n * * If `opts` is a number, the number specifies the number of times to retry,\n *   with the default interval of `0`.\n * @param {AsyncFunction} task - An async function to retry.\n * Invoked with (callback).\n * @param {Function} [callback] - An optional callback which is called when the\n * task has succeeded, or after the final failed attempt. It receives the `err`\n * and `result` arguments of the last attempt at completing the `task`. Invoked\n * with (err, results).\n * @returns {Promise} a promise if no callback provided\n *\n * @example\n *\n * // The `retry` function can be used as a stand-alone control flow by passing\n * // a callback, as shown below:\n *\n * // try calling apiMethod 3 times\n * async.retry(3, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 3 times, waiting 200 ms between each retry\n * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 10 times with exponential backoff\n * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n * async.retry({\n *   times: 10,\n *   interval: function(retryCount) {\n *     return 50 * Math.pow(2, retryCount);\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod the default 5 times no delay between each retry\n * async.retry(apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod only when error condition satisfies, all other\n * // errors will abort the retry control flow and return to final callback\n * async.retry({\n *   errorFilter: function(err) {\n *     return err.message === 'Temporary error'; // only retry on a specific error\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // to retry individual methods that are not as reliable within other\n * // control flow functions, use the `retryable` wrapper:\n * async.auto({\n *     users: api.getUsers.bind(api),\n *     payments: async.retryable(3, api.getPayments.bind(api))\n * }, function(err, results) {\n *     // do something with the results\n * });\n *\n */\nconst DEFAULT_TIMES = 5;\nconst DEFAULT_INTERVAL = 0;\n\nfunction retry(opts, task, callback) {\n    var options = {\n        times: DEFAULT_TIMES,\n        intervalFunc: constant$1(DEFAULT_INTERVAL)\n    };\n\n    if (arguments.length < 3 && typeof opts === 'function') {\n        callback = task || promiseCallback();\n        task = opts;\n    } else {\n        parseTimes(options, opts);\n        callback = callback || promiseCallback();\n    }\n\n    if (typeof task !== 'function') {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n\n    var _task = wrapAsync(task);\n\n    var attempt = 1;\n    function retryAttempt() {\n        _task((err, ...args) => {\n            if (err === false) return\n            if (err && attempt++ < options.times &&\n                (typeof options.errorFilter != 'function' ||\n                    options.errorFilter(err))) {\n                setTimeout(retryAttempt, options.intervalFunc(attempt - 1));\n            } else {\n                callback(err, ...args);\n            }\n        });\n    }\n\n    retryAttempt();\n    return callback[PROMISE_SYMBOL]\n}\n\nfunction parseTimes(acc, t) {\n    if (typeof t === 'object') {\n        acc.times = +t.times || DEFAULT_TIMES;\n\n        acc.intervalFunc = typeof t.interval === 'function' ?\n            t.interval :\n            constant$1(+t.interval || DEFAULT_INTERVAL);\n\n        acc.errorFilter = t.errorFilter;\n    } else if (typeof t === 'number' || typeof t === 'string') {\n        acc.times = +t || DEFAULT_TIMES;\n    } else {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n}\n\n/**\n * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n * wraps a task and makes it retryable, rather than immediately calling it\n * with retries.\n *\n * @name retryable\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`, except for a `opts.arity` that\n * is the arity of the `task` function, defaulting to `task.length`\n * @param {AsyncFunction} task - the asynchronous function to wrap.\n * This function will be passed any arguments passed to the returned wrapper.\n * Invoked with (...args, callback).\n * @returns {AsyncFunction} The wrapped function, which when invoked, will\n * retry on an error, based on the parameters specified in `opts`.\n * This function will accept the same parameters as `task`.\n * @example\n *\n * async.auto({\n *     dep1: async.retryable(3, getFromFlakyService),\n *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n *         maybeProcessData(results.dep1, cb);\n *     })]\n * }, callback);\n */\nfunction retryable (opts, task) {\n    if (!task) {\n        task = opts;\n        opts = null;\n    }\n    let arity = (opts && opts.arity) || task.length;\n    if (isAsync(task)) {\n        arity += 1;\n    }\n    var _task = wrapAsync(task);\n    return initialParams((args, callback) => {\n        if (args.length < arity - 1 || callback == null) {\n            args.push(callback);\n            callback = promiseCallback();\n        }\n        function taskFn(cb) {\n            _task(...args, cb);\n        }\n\n        if (opts) retry(opts, taskFn, callback);\n        else retry(taskFn, callback);\n\n        return callback[PROMISE_SYMBOL]\n    });\n}\n\n/**\n * Run the functions in the `tasks` collection in series, each one running once\n * the previous function has completed. If any functions in the series pass an\n * error to its callback, no more functions are run, and `callback` is\n * immediately called with the value of the error. Otherwise, `callback`\n * receives an array of results when `tasks` have completed.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function, and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n *  results from {@link async.series}.\n *\n * **Note** that while many implementations preserve the order of object\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n * explicitly states that\n *\n * > The mechanics and order of enumerating the properties is not specified.\n *\n * So if you rely on the order in which your series of functions are executed,\n * and want this to work on all platforms, consider using an array.\n *\n * @name series\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\n * [async functions]{@link AsyncFunction} to run in series.\n * Each function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This function gets a results array (or object)\n * containing all the result arguments passed to the `task` callbacks. Invoked\n * with (err, result).\n * @return {Promise} a promise, if no callback is passed\n * @example\n *\n * //Using Callbacks\n * async.series([\n *     function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ], function(err, results) {\n *     console.log(results);\n *     // results is equal to ['one','two']\n * });\n *\n * // an example using objects instead of arrays\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * });\n *\n * //Using Promises\n * async.series([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ]).then(results => {\n *     console.log(results);\n *     // results is equal to ['one','two']\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // an example using an object instead of an array\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }).then(results => {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * //Using async/await\n * async () => {\n *     try {\n *         let results = await async.series([\n *             function(callback) {\n *                 setTimeout(function() {\n *                     // do some async task\n *                     callback(null, 'one');\n *                 }, 200);\n *             },\n *             function(callback) {\n *                 setTimeout(function() {\n *                     // then do another async task\n *                     callback(null, 'two');\n *                 }, 100);\n *             }\n *         ]);\n *         console.log(results);\n *         // results is equal to ['one','two']\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // an example using an object instead of an array\n * async () => {\n *     try {\n *         let results = await async.parallel({\n *             one: function(callback) {\n *                 setTimeout(function() {\n *                     // do some async task\n *                     callback(null, 1);\n *                 }, 200);\n *             },\n *            two: function(callback) {\n *                 setTimeout(function() {\n *                     // then do another async task\n *                     callback(null, 2);\n *                 }, 100);\n *            }\n *         });\n *         console.log(results);\n *         // results is equal to: { one: 1, two: 2 }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction series(tasks, callback) {\n    return _parallel(eachOfSeries$1, tasks, callback);\n}\n\n/**\n * Returns `true` if at least one element in the `coll` satisfies an async test.\n * If any iteratee call returns `true`, the main `callback` is immediately\n * called.\n *\n * @name some\n * @static\n * @memberOf module:Collections\n * @method\n * @alias any\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists,\n *    function(err, result) {\n *        console.log(result);\n *        // true\n *        // result is true since some file in the list exists\n *    }\n *);\n *\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists,\n *    function(err, result) {\n *        console.log(result);\n *        // false\n *        // result is false since none of the files exists\n *    }\n *);\n *\n * // Using Promises\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists)\n * .then( result => {\n *     console.log(result);\n *     // true\n *     // result is true since some file in the list exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists)\n * .then( result => {\n *     console.log(result);\n *     // false\n *     // result is false since none of the files exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists);\n *         console.log(result);\n *         // true\n *         // result is true since some file in the list exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * async () => {\n *     try {\n *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists);\n *         console.log(result);\n *         // false\n *         // result is false since none of the files exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction some(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOf$1, coll, iteratee, callback)\n}\nvar some$1 = awaitify(some, 3);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n *\n * @name someLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anyLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someLimit(coll, limit, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar someLimit$1 = awaitify(someLimit, 4);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n *\n * @name someSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anySeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in series.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someSeries(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar someSeries$1 = awaitify(someSeries, 3);\n\n/**\n * Sorts a list by the results of running each `coll` value through an async\n * `iteratee`.\n *\n * @name sortBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a value to use as the sort criteria as\n * its `result`.\n * Invoked with (item, callback).\n * @param {Function} callback - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is the items\n * from the original `coll` sorted by the values returned by the `iteratee`\n * calls. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback passed\n * @example\n *\n * // bigfile.txt is a file that is 251100 bytes in size\n * // mediumfile.txt is a file that is 11000 bytes in size\n * // smallfile.txt is a file that is 121 bytes in size\n *\n * // asynchronous function that returns the file size in bytes\n * function getFileSizeInBytes(file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes,\n *     function(err, results) {\n *         if (err) {\n *             console.log(err);\n *         } else {\n *             console.log(results);\n *             // results is now the original array of files sorted by\n *             // file size (ascending by default), e.g.\n *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n *         }\n *     }\n * );\n *\n * // By modifying the callback parameter the\n * // sorting order can be influenced:\n *\n * // ascending order\n * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], function(file, callback) {\n *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n *         if (getFileSizeErr) return callback(getFileSizeErr);\n *         callback(null, fileSize);\n *     });\n * }, function(err, results) {\n *         if (err) {\n *             console.log(err);\n *         } else {\n *             console.log(results);\n *             // results is now the original array of files sorted by\n *             // file size (ascending by default), e.g.\n *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n *         }\n *     }\n * );\n *\n * // descending order\n * async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], function(file, callback) {\n *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n *         if (getFileSizeErr) {\n *             return callback(getFileSizeErr);\n *         }\n *         callback(null, fileSize * -1);\n *     });\n * }, function(err, results) {\n *         if (err) {\n *             console.log(err);\n *         } else {\n *             console.log(results);\n *             // results is now the original array of files sorted by\n *             // file size (ascending by default), e.g.\n *             // [ 'bigfile.txt', 'mediumfile.txt', 'smallfile.txt']\n *         }\n *     }\n * );\n *\n * // Error handling\n * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes,\n *     function(err, results) {\n *         if (err) {\n *             console.log(err);\n *             // [ Error: ENOENT: no such file or directory ]\n *         } else {\n *             console.log(results);\n *         }\n *     }\n * );\n *\n * // Using Promises\n * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n *     // results is now the original array of files sorted by\n *     // file size (ascending by default), e.g.\n *     // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error handling\n * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * (async () => {\n *     try {\n *         let results = await async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n *         console.log(results);\n *         // results is now the original array of files sorted by\n *         // file size (ascending by default), e.g.\n *         // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * })();\n *\n * // Error handling\n * async () => {\n *     try {\n *         let results = await async.sortBy(['missingfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n *         console.log(results);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction sortBy (coll, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return map$1(coll, (x, iterCb) => {\n        _iteratee(x, (err, criteria) => {\n            if (err) return iterCb(err);\n            iterCb(err, {value: x, criteria});\n        });\n    }, (err, results) => {\n        if (err) return callback(err);\n        callback(null, results.sort(comparator).map(v => v.value));\n    });\n\n    function comparator(left, right) {\n        var a = left.criteria, b = right.criteria;\n        return a < b ? -1 : a > b ? 1 : 0;\n    }\n}\nvar sortBy$1 = awaitify(sortBy, 3);\n\n/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n * @example\n *\n * function myFunction(foo, callback) {\n *     doAsyncTask(foo, function(err, data) {\n *         // handle errors\n *         if (err) return callback(err);\n *\n *         // do some stuff ...\n *\n *         // return processed data\n *         return callback(null, data);\n *     });\n * }\n *\n * var wrapped = async.timeout(myFunction, 1000);\n *\n * // call `wrapped` as you would `myFunction`\n * wrapped({ bar: 'bar' }, function(err, data) {\n *     // if `myFunction` takes < 1000 ms to execute, `err`\n *     // and `data` will have their expected values\n *\n *     // else `err` will be an Error with the code 'ETIMEDOUT'\n * });\n */\nfunction timeout(asyncFn, milliseconds, info) {\n    var fn = wrapAsync(asyncFn);\n\n    return initialParams((args, callback) => {\n        var timedOut = false;\n        var timer;\n\n        function timeoutCallback() {\n            var name = asyncFn.name || 'anonymous';\n            var error  = new Error('Callback function \"' + name + '\" timed out.');\n            error.code = 'ETIMEDOUT';\n            if (info) {\n                error.info = info;\n            }\n            timedOut = true;\n            callback(error);\n        }\n\n        args.push((...cbArgs) => {\n            if (!timedOut) {\n                callback(...cbArgs);\n                clearTimeout(timer);\n            }\n        });\n\n        // setup timer and call original function\n        timer = setTimeout(timeoutCallback, milliseconds);\n        fn(...args);\n    });\n}\n\nfunction range(size) {\n    var result = Array(size);\n    while (size--) {\n        result[size] = size;\n    }\n    return result;\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name timesLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} count - The number of times to run the function.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesLimit(count, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(range(count), limit, _iteratee, callback);\n}\n\n/**\n * Calls the `iteratee` function `n` times, and accumulates results in the same\n * manner you would use with [map]{@link module:Collections.map}.\n *\n * @name times\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n * @example\n *\n * // Pretend this is some complicated async factory\n * var createUser = function(id, callback) {\n *     callback(null, {\n *         id: 'user' + id\n *     });\n * };\n *\n * // generate 5 users\n * async.times(5, function(n, next) {\n *     createUser(n, function(err, user) {\n *         next(err, user);\n *     });\n * }, function(err, users) {\n *     // we should now have 5 users\n * });\n */\nfunction times (n, iteratee, callback) {\n    return timesLimit(n, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n *\n * @name timesSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesSeries (n, iteratee, callback) {\n    return timesLimit(n, 1, iteratee, callback)\n}\n\n/**\n * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n * element in parallel, each step potentially mutating an `accumulator` value.\n * The type of the accumulator defaults to the type of collection passed in.\n *\n * @name transform\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n * it will default to an empty Object or Array, depending on the type of `coll`\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * collection that potentially modifies the accumulator.\n * Invoked with (accumulator, item, key, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the transformed accumulator.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n *\n * // helper function that returns human-readable size format from bytes\n * function formatBytes(bytes, decimals = 2) {\n *   // implementation not included for brevity\n *   return humanReadbleFilesize;\n * }\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n *\n * // asynchronous function that returns the file size, transformed to human-readable format\n * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n * function transformFileSize(acc, value, key, callback) {\n *     fs.stat(value, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         acc[key] = formatBytes(stat.size);\n *         callback(null);\n *     });\n * }\n *\n * // Using callbacks\n * async.transform(fileList, transformFileSize, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n *     }\n * });\n *\n * // Using Promises\n * async.transform(fileList, transformFileSize)\n * .then(result => {\n *     console.log(result);\n *     // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * (async () => {\n *     try {\n *         let result = await async.transform(fileList, transformFileSize);\n *         console.log(result);\n *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * })();\n *\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n *\n * // helper function that returns human-readable size format from bytes\n * function formatBytes(bytes, decimals = 2) {\n *   // implementation not included for brevity\n *   return humanReadbleFilesize;\n * }\n *\n * const fileMap = { f1: 'file1.txt', f2: 'file2.txt', f3: 'file3.txt' };\n *\n * // asynchronous function that returns the file size, transformed to human-readable format\n * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n * function transformFileSize(acc, value, key, callback) {\n *     fs.stat(value, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         acc[key] = formatBytes(stat.size);\n *         callback(null);\n *     });\n * }\n *\n * // Using callbacks\n * async.transform(fileMap, transformFileSize, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n *     }\n * });\n *\n * // Using Promises\n * async.transform(fileMap, transformFileSize)\n * .then(result => {\n *     console.log(result);\n *     // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.transform(fileMap, transformFileSize);\n *         console.log(result);\n *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction transform (coll, accumulator, iteratee, callback) {\n    if (arguments.length <= 3 && typeof accumulator === 'function') {\n        callback = iteratee;\n        iteratee = accumulator;\n        accumulator = Array.isArray(coll) ? [] : {};\n    }\n    callback = once(callback || promiseCallback());\n    var _iteratee = wrapAsync(iteratee);\n\n    eachOf$1(coll, (v, k, cb) => {\n        _iteratee(accumulator, v, k, cb);\n    }, err => callback(err, accumulator));\n    return callback[PROMISE_SYMBOL]\n}\n\n/**\n * It runs each task in series but stops whenever any of the functions were\n * successful. If one of the tasks were successful, the `callback` will be\n * passed the result of the successful task. If all tasks fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name tryEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to\n * run, each function is passed a `callback(err, result)` it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {Function} [callback] - An optional callback which is called when one\n * of the tasks has succeeded, or all have failed. It receives the `err` and\n * `result` arguments of the last attempt at completing the `task`. Invoked with\n * (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n * async.tryEach([\n *     function getDataFromFirstWebsite(callback) {\n *         // Try getting the data from the first website\n *         callback(err, data);\n *     },\n *     function getDataFromSecondWebsite(callback) {\n *         // First website failed,\n *         // Try getting the data from the backup website\n *         callback(err, data);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     Now do something with the data.\n * });\n *\n */\nfunction tryEach(tasks, callback) {\n    var error = null;\n    var result;\n    return eachSeries$1(tasks, (task, taskCb) => {\n        wrapAsync(task)((err, ...args) => {\n            if (err === false) return taskCb(err);\n\n            if (args.length < 2) {\n                [result] = args;\n            } else {\n                result = args;\n            }\n            error = err;\n            taskCb(err ? null : {});\n        });\n    }, () => callback(error, result));\n}\n\nvar tryEach$1 = awaitify(tryEach);\n\n/**\n * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n * unmemoized form. Handy for testing.\n *\n * @name unmemoize\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.memoize]{@link module:Utils.memoize}\n * @category Util\n * @param {AsyncFunction} fn - the memoized function\n * @returns {AsyncFunction} a function that calls the original unmemoized function\n */\nfunction unmemoize(fn) {\n    return (...args) => {\n        return (fn.unmemoized || fn)(...args);\n    };\n}\n\n/**\n * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs.\n *\n * @name whilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with ().\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * var count = 0;\n * async.whilst(\n *     function test(cb) { cb(null, count < 5); },\n *     function iter(callback) {\n *         count++;\n *         setTimeout(function() {\n *             callback(null, count);\n *         }, 1000);\n *     },\n *     function (err, n) {\n *         // 5 seconds have passed, n = 5\n *     }\n * );\n */\nfunction whilst(test, iteratee, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results = [];\n\n    function next(err, ...rest) {\n        if (err) return callback(err);\n        results = rest;\n        if (err === false) return;\n        _test(check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return _test(check);\n}\nvar whilst$1 = awaitify(whilst, 3);\n\n/**\n * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs. `callback` will be passed an error and any\n * arguments passed to the final `iteratee`'s callback.\n *\n * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n *\n * @name until\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with (callback).\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n * const results = []\n * let finished = false\n * async.until(function test(cb) {\n *     cb(null, finished)\n * }, function iter(next) {\n *     fetchPage(url, (err, body) => {\n *         if (err) return next(err)\n *         results = results.concat(body.objects)\n *         finished = !!body.next\n *         next(err)\n *     })\n * }, function done (err) {\n *     // all pages have been fetched\n * })\n */\nfunction until(test, iteratee, callback) {\n    const _test = wrapAsync(test);\n    return whilst$1((cb) => _test((err, truth) => cb (err, !truth)), iteratee, callback);\n}\n\n/**\n * Runs the `tasks` array of functions in series, each passing their results to\n * the next in the array. However, if any of the `tasks` pass an error to their\n * own callback, the next function is not executed, and the main `callback` is\n * immediately called with the error.\n *\n * @name waterfall\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n * to run.\n * Each function should complete with any number of `result` values.\n * The `result` values will be passed as arguments, in order, to the next task.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This will be passed the results of the last task's\n * callback. Invoked with (err, [results]).\n * @returns undefined\n * @example\n *\n * async.waterfall([\n *     function(callback) {\n *         callback(null, 'one', 'two');\n *     },\n *     function(arg1, arg2, callback) {\n *         // arg1 now equals 'one' and arg2 now equals 'two'\n *         callback(null, 'three');\n *     },\n *     function(arg1, callback) {\n *         // arg1 now equals 'three'\n *         callback(null, 'done');\n *     }\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n *\n * // Or, with named functions:\n * async.waterfall([\n *     myFirstFunction,\n *     mySecondFunction,\n *     myLastFunction,\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n * function myFirstFunction(callback) {\n *     callback(null, 'one', 'two');\n * }\n * function mySecondFunction(arg1, arg2, callback) {\n *     // arg1 now equals 'one' and arg2 now equals 'two'\n *     callback(null, 'three');\n * }\n * function myLastFunction(arg1, callback) {\n *     // arg1 now equals 'three'\n *     callback(null, 'done');\n * }\n */\nfunction waterfall (tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n\n    function nextTask(args) {\n        var task = wrapAsync(tasks[taskIndex++]);\n        task(...args, onlyOnce(next));\n    }\n\n    function next(err, ...args) {\n        if (err === false) return\n        if (err || taskIndex === tasks.length) {\n            return callback(err, ...args);\n        }\n        nextTask(args);\n    }\n\n    nextTask([]);\n}\n\nvar waterfall$1 = awaitify(waterfall);\n\n/**\n * An \"async function\" in the context of Async is an asynchronous function with\n * a variable number of parameters, with the final parameter being a callback.\n * (`function (arg1, arg2, ..., callback) {}`)\n * The final callback is of the form `callback(err, results...)`, which must be\n * called once the function is completed.  The callback should be called with a\n * Error as its first argument to signal that an error occurred.\n * Otherwise, if no error occurred, it should be called with `null` as the first\n * argument, and any additional `result` arguments that may apply, to signal\n * successful completion.\n * The callback must be called exactly once, ideally on a later tick of the\n * JavaScript event loop.\n *\n * This type of function is also referred to as a \"Node-style async function\",\n * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n * library are themselves CPS/Node-style async functions, or functions that\n * return CPS/Node-style async functions.\n *\n * Wherever we accept a Node-style async function, we also directly accept an\n * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n * In this case, the `async` function will not be passed a final callback\n * argument, and any thrown error will be used as the `err` argument of the\n * implicit callback, and the return value will be used as the `result` value.\n * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n * argument, and a `resolved` value becomes the `result`.)\n *\n * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n * because the `async function` will be compiled to an ordinary function that\n * returns a promise.\n *\n * @typedef {Function} AsyncFunction\n * @static\n */\n\nvar index = {\n    apply,\n    applyEach: applyEach$1,\n    applyEachSeries,\n    asyncify,\n    auto,\n    autoInject,\n    cargo,\n    cargoQueue: cargo$1,\n    compose,\n    concat: concat$1,\n    concatLimit: concatLimit$1,\n    concatSeries: concatSeries$1,\n    constant,\n    detect: detect$1,\n    detectLimit: detectLimit$1,\n    detectSeries: detectSeries$1,\n    dir,\n    doUntil,\n    doWhilst: doWhilst$1,\n    each,\n    eachLimit: eachLimit$2,\n    eachOf: eachOf$1,\n    eachOfLimit: eachOfLimit$2,\n    eachOfSeries: eachOfSeries$1,\n    eachSeries: eachSeries$1,\n    ensureAsync,\n    every: every$1,\n    everyLimit: everyLimit$1,\n    everySeries: everySeries$1,\n    filter: filter$1,\n    filterLimit: filterLimit$1,\n    filterSeries: filterSeries$1,\n    forever: forever$1,\n    groupBy,\n    groupByLimit: groupByLimit$1,\n    groupBySeries,\n    log,\n    map: map$1,\n    mapLimit: mapLimit$1,\n    mapSeries: mapSeries$1,\n    mapValues,\n    mapValuesLimit: mapValuesLimit$1,\n    mapValuesSeries,\n    memoize,\n    nextTick,\n    parallel,\n    parallelLimit,\n    priorityQueue,\n    queue: queue$1,\n    race: race$1,\n    reduce: reduce$1,\n    reduceRight,\n    reflect,\n    reflectAll,\n    reject: reject$2,\n    rejectLimit: rejectLimit$1,\n    rejectSeries: rejectSeries$1,\n    retry,\n    retryable,\n    seq,\n    series,\n    setImmediate: setImmediate$1,\n    some: some$1,\n    someLimit: someLimit$1,\n    someSeries: someSeries$1,\n    sortBy: sortBy$1,\n    timeout,\n    times,\n    timesLimit,\n    timesSeries,\n    transform,\n    tryEach: tryEach$1,\n    unmemoize,\n    until,\n    waterfall: waterfall$1,\n    whilst: whilst$1,\n\n    // aliases\n    all: every$1,\n    allLimit: everyLimit$1,\n    allSeries: everySeries$1,\n    any: some$1,\n    anyLimit: someLimit$1,\n    anySeries: someSeries$1,\n    find: detect$1,\n    findLimit: detectLimit$1,\n    findSeries: detectSeries$1,\n    flatMap: concat$1,\n    flatMapLimit: concatLimit$1,\n    flatMapSeries: concatSeries$1,\n    forEach: each,\n    forEachSeries: eachSeries$1,\n    forEachLimit: eachLimit$2,\n    forEachOf: eachOf$1,\n    forEachOfSeries: eachOfSeries$1,\n    forEachOfLimit: eachOfLimit$2,\n    inject: reduce$1,\n    foldl: reduce$1,\n    foldr: reduceRight,\n    select: filter$1,\n    selectLimit: filterLimit$1,\n    selectSeries: filterSeries$1,\n    wrapSync: asyncify,\n    during: whilst$1,\n    doDuring: doWhilst$1\n};\n\nexport default index;\nexport { apply, applyEach$1 as applyEach, applyEachSeries, asyncify, auto, autoInject, cargo, cargo$1 as cargoQueue, compose, concat$1 as concat, concatLimit$1 as concatLimit, concatSeries$1 as concatSeries, constant, detect$1 as detect, detectLimit$1 as detectLimit, detectSeries$1 as detectSeries, dir, doUntil, doWhilst$1 as doWhilst, each, eachLimit$2 as eachLimit, eachOf$1 as eachOf, eachOfLimit$2 as eachOfLimit, eachOfSeries$1 as eachOfSeries, eachSeries$1 as eachSeries, ensureAsync, every$1 as every, everyLimit$1 as everyLimit, everySeries$1 as everySeries, filter$1 as filter, filterLimit$1 as filterLimit, filterSeries$1 as filterSeries, forever$1 as forever, groupBy, groupByLimit$1 as groupByLimit, groupBySeries, log, map$1 as map, mapLimit$1 as mapLimit, mapSeries$1 as mapSeries, mapValues, mapValuesLimit$1 as mapValuesLimit, mapValuesSeries, memoize, nextTick, parallel, parallelLimit, priorityQueue, queue$1 as queue, race$1 as race, reduce$1 as reduce, reduceRight, reflect, reflectAll, reject$2 as reject, rejectLimit$1 as rejectLimit, rejectSeries$1 as rejectSeries, retry, retryable, seq, series, setImmediate$1 as setImmediate, some$1 as some, someLimit$1 as someLimit, someSeries$1 as someSeries, sortBy$1 as sortBy, timeout, times, timesLimit, timesSeries, transform, tryEach$1 as tryEach, unmemoize, until, waterfall$1 as waterfall, whilst$1 as whilst, every$1 as all, everyLimit$1 as allLimit, everySeries$1 as allSeries, some$1 as any, someLimit$1 as anyLimit, someSeries$1 as anySeries, detect$1 as find, detectLimit$1 as findLimit, detectSeries$1 as findSeries, concat$1 as flatMap, concatLimit$1 as flatMapLimit, concatSeries$1 as flatMapSeries, each as forEach, eachSeries$1 as forEachSeries, eachLimit$2 as forEachLimit, eachOf$1 as forEachOf, eachOfSeries$1 as forEachOfSeries, eachOfLimit$2 as forEachOfLimit, reduce$1 as inject, reduce$1 as foldl, reduceRight as foldr, filter$1 as select, filterLimit$1 as selectLimit, filterSeries$1 as selectSeries, asyncify as wrapSync, whilst$1 as during, doWhilst$1 as doDuring };\n","import { getLogger } from '@jitsi/logger';\nimport { queue } from 'async';\n\nconst logger = getLogger(__filename);\n\n/**\n * A queue for async task execution.\n */\nexport default class AsyncQueue {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._queue = queue(this._processQueueTasks.bind(this), 1);\n        this._stopped = false;\n    }\n\n    /**\n     * Removes any pending tasks from the queue.\n     */\n    clear() {\n        this._queue.kill();\n    }\n\n    /**\n     * Internal task processing implementation which makes things work.\n     */\n    _processQueueTasks(task, finishedCallback) {\n        try {\n            task(finishedCallback);\n        } catch (error) {\n            logger.error(`Task failed: ${error?.stack}`);\n            finishedCallback(error);\n        }\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass the {@code callback} to the push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     *\n     * @param {function} task - The task to be executed. See the description above.\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\n     */\n    push(task, callback) {\n        if (this._stopped) {\n            callback && callback(new Error('The queue has been stopped'));\n\n            return;\n        }\n        this._queue.push(task, callback);\n    }\n\n    /**\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\n     * after the queue has been shutdown then the callback will be called with an error.\n     */\n    shutdown() {\n        this._stopped = true;\n    }\n}\n","export enum JingleSessionState {\n    /**\n     * The pending Jingle session state which means the session as defined in\n     * XEP-0166(before 'session-invite/session-accept' took place).\n     */\n    PENDING = 'pending',\n\n    /**\n     * The active Jingle session state as defined in XEP-0166\n     * (after 'session-invite'/'session-accept').\n     */\n    ACTIVE = 'active',\n\n    /**\n     * The ended Jingle session state as defined in XEP-0166\n     * (after 'session-terminate').\n     */\n    ENDED = 'ended'\n};\n\n// exported for backward compatibility\nexport const PENDING = JingleSessionState.PENDING;\nexport const ACTIVE = JingleSessionState.ACTIVE;\nexport const ENDED = JingleSessionState.ENDED;\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {XmppConnection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to the PeerConnection onCreateAnswer/Offer.\n     * @param {Object} pcConfig The {@code RTCConfiguration} object passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isInitiator) {\n        super();\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.pcConfig = pcConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * The signaling layer.\n         * @type {SignalingLayerImpl | null}\n         * @private\n         */\n        this._signalingLayer = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {SignalingLayerImpl} signalingLayer - The signaling layer instance.\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, signalingLayer, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n\n        // TODO decouple from room\n        this.room = room;\n        this.rtc = rtc;\n        this._signalingLayer = signalingLayer;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\n     * terminated.\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /**\n     * Returns the JID of the initiator of the jingle session.\n     */\n    _getInitiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","enum MediaSessionEvents {\n    /**\n     * Event triggered when the remote party signals video max frame heights for its local sources.\n     */\n    REMOTE_SOURCE_CONSTRAINTS_CHANGED = 'media_session.REMOTE_SOURCE_CONSTRAINTS_CHANGED',\n\n    /**\n     * Event triggered when the remote party signals it's receive video max frame height.\n     */\n    REMOTE_VIDEO_CONSTRAINTS_CHANGED = 'media_session.REMOTE_VIDEO_CONSTRAINTS_CHANGED'\n};\n\nexport default MediaSessionEvents;","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport SDP from '../sdp/SDP';\nimport SDPDiffer from '../sdp/SDPDiffer';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport AsyncQueue from '../util/AsyncQueue';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport { integerHash } from '../util/StringUtils';\n\nimport browser from './../browser';\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport MediaSessionEvents from './MediaSessionEvents';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * The time duration for which the client keeps gathering ICE candidates to be sent out in a single IQ.\n * @type {number} timeout in ms.\n */\nconst ICE_CAND_GATHERING_TIMEOUT = 150;\n\n/**\n * Reads the endpoint ID given a string which represents either the endpoint's full JID, or the endpoint ID itself.\n * @param {String} jidOrEndpointId A string which is either the full JID of a participant, or the ID of an\n * endpoint/participant.\n * @returns The endpoint ID associated with 'jidOrEndpointId'.\n */\nfunction getEndpointId(jidOrEndpointId) {\n    return Strophe.getResourceFromJid(jidOrEndpointId) || jidOrEndpointId;\n}\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * @property {Object} abTesting - A/B testing related options (ask George).\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\n * video test ?(ask George).\n * @property {boolean} disableH264 - Described in the config.js[1].\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\n * on the PeerConnection.\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Parses the video max frame height value out of the 'content-modify' IQ.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Number|null}\n     */\n    static parseMaxFrameHeight(jingleContents) {\n        const maxFrameHeightSel = jingleContents.find('>content[name=\"video\"]>max-frame-height');\n\n        return maxFrameHeightSel.length ? Number(maxFrameHeightSel.text()) : null;\n    }\n\n    /**\n     * Parses the source-name and max frame height value of the 'content-modify' IQ when source-name signaling\n     * is enabled.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Object|null}\n     */\n    static parseSourceMaxFrameHeight(jingleContents) {\n        const receiverConstraints = [];\n        const sourceFrameHeightSel = jingleContents.find('>content[name=\"video\"]>source-frame-height');\n        let maxHeight, sourceName;\n\n        if (sourceFrameHeightSel.length) {\n            sourceFrameHeightSel.each((_, source) => {\n                sourceName = source.getAttribute('sourceName');\n                maxHeight = source.getAttribute('maxHeight');\n                receiverConstraints.push({\n                    maxHeight,\n                    sourceName\n                });\n            });\n\n            return receiverConstraints;\n        }\n\n        return null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param mediaConstraints the media constraints object passed to createOffer/Answer, as defined\n     * by the WebRTC standard\n     * @param pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P indicates whether this instance is meant to be used in a direct, peer to\n     * peer connection or <tt>false</tt> if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, pcConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedOldLocalSdp = undefined;\n\n        /**\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedNewLocalSdp = undefined;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Local preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.localRecvMaxFrameHeight = undefined;\n\n        /**\n         * Receiver constraints (max height) set by the application per remote source. Will be used for p2p connection\n         * in lieu of localRecvMaxFrameHeight when source-name signaling is enabled.\n         *\n         * @type {Map<string, number>}\n         */\n        this._sourceReceiverConstraints = undefined;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * Remote preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.remoteRecvMaxFrameHeight = undefined;\n\n        /**\n         * Remote preference for the receive video max frame heights when source-name signaling is enabled.\n         *\n         * @type {Map<string, number>|undefined}\n         */\n        this.remoteSourceMaxFrameHeights = undefined;\n\n        /**\n         * The queue used to serialize operations done on the peerconnection.\n         *\n         * @type {AsyncQueue}\n         */\n        this.modificationQueue = new AsyncQueue();\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n\n        this._xmppListeners = [];\n        this._xmppListeners.push(\n            connection.addEventListener(\n                XmppConnection.Events.CONN_STATUS_CHANGED,\n                this.onXmppStatusChanged.bind(this))\n        );\n\n        this._removeSenderVideoConstraintsChangeListener = undefined;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance is still operational.\n     * @private\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\n     */\n    _assertNotEnded() {\n        return this.state !== JingleSessionState.ENDED;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n        pcOptions.capScreenshareBitrate = false;\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\n        pcOptions.videoQuality = options.videoQuality;\n        pcOptions.forceTurnRelay = options.forceTurnRelay;\n        pcOptions.audioQuality = options.audioQuality;\n        pcOptions.usesUnifiedPlan = this.usesUnifiedPlan\n            = browser.supportsUnifiedPlan()\n                && (browser.isFirefox()\n                    || browser.isWebKitBased()\n                    || (browser.isChromiumBased()\n\n                        // Provide a way to control the behavior for jvb and p2p connections independently.\n                        && this.isP2P\n                        ? options.p2p?.enableUnifiedOnChrome ?? true\n                        : options.enableUnifiedOnChrome ?? true));\n\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\n\n            if (typeof abtestSuspendVideo !== 'undefined') {\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\n            }\n        } else {\n            // H264 does not support simulcast, so it needs to be disabled.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast\n                    || (options.preferH264 && !options.disableH264)\n                    || (options.videoQuality && options.videoQuality.preferredCodec === CodecMimeType.H264);\n\n            // Disable simulcast for low fps screenshare and enable it for high fps screenshare.\n            // testing.capScreenshareBitrate config.js setting has now been deprecated.\n            pcOptions.capScreenshareBitrate = pcOptions.disableSimulcast\n                || !(typeof options.desktopSharingFrameRate?.max === 'number'\n                    && options.desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE);\n\n            // add the capScreenshareBitrate to the permanent properties so that it's included with every event that we\n            // send to the analytics backend.\n            Statistics.analytics.addPermanentProperties({ capScreenshareBitrate: pcOptions.capScreenshareBitrate });\n        }\n\n        if (options.startSilent) {\n            pcOptions.startSilent = true;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this._signalingLayer,\n                    this.pcConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            this.sendIceCandidate(candidate);\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed') {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            const now = window.performance.now();\n            let isStable = false;\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(`(TIME) ICE ${this.peerconnection.iceConnectionState} ${this.isP2P ? 'P2P' : 'JVB'}:\\t`, now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been restored. This includes the case when\n                // media connection to the bridge has been restored after an ICE failure by using session-terminate.\n                if (this.peerconnection.signalingState === 'stable') {\n                    isStable = true;\n                    const usesTerminateForRestart = !this.options.enableIceRestart\n                        && this.room.supportsRestartByTerminate();\n\n                    if (this.isReconnect || usesTerminateForRestart) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                // Add a workaround for an issue on chrome in Unified plan when the local endpoint is the offerer.\n                // The 'signalingstatechange' event for 'stable' is handled after the 'iceconnectionstatechange' event\n                // for 'completed' is handled by the client. This prevents the client from firing a\n                // CONNECTION_ESTABLISHED event for the p2p session. As a result, the offerer continues to stay on the\n                // jvb connection while the remote peer switches to the p2p connection breaking the media flow between\n                // the endpoints.\n                // TODO - file a chromium bug and add the information here.\n                if (!this.wasConnected\n                    && (this.wasstable\n                        || isStable\n                        || (this.usesUnifiedPlan && this.isInitiator && browser.isChromiumBased()))) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n\n\n        /**\n         * The connection state event is fired whenever the aggregate of underlying\n         * transports change their state.\n         */\n        this.peerconnection.onconnectionstatechange = () => {\n            const icestate = this.peerconnection.iceConnectionState;\n\n            switch (this.peerconnection.connectionState) {\n            case 'failed':\n                // Since version 76 Chrome no longer switches ICE connection\n                // state to failed (see\n                // https://bugs.chromium.org/p/chromium/issues/detail?id=982793\n                // for details) we use this workaround to recover from lost connections\n                if (icestate === 'disconnected') {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ICE_FAILED, this);\n                }\n                break;\n            }\n        };\n\n        /**\n         * The negotiationneeded event is fired whenever we shake the media on the\n         * RTCPeerConnection object.\n         */\n        this.peerconnection.onnegotiationneeded = () => {\n            const state = this.peerconnection.signalingState;\n            const remoteDescription = this.peerconnection.remoteDescription;\n\n            if (this.usesUnifiedPlan\n                && state === 'stable'\n                && remoteDescription\n                && typeof remoteDescription.sdp === 'string') {\n                logger.info(`${this} onnegotiationneeded fired on ${this.peerconnection}`);\n\n                const workFunction = finishedCallback => {\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this._renegotiate()\n                        .then(() => this.peerconnection.configureSenderVideoEncodings())\n                        .then(() => {\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\n                        })\n                        .then(() => finishedCallback(), error => finishedCallback(error));\n                };\n\n                this.modificationQueue.push(\n                    workFunction,\n                    error => {\n                        if (error) {\n                            logger.error(`${this} onnegotiationneeded error`, error);\n                        } else {\n                            logger.debug(`${this} onnegotiationneeded executed - OK`);\n                        }\n                    });\n            }\n        };\n    }\n\n    /**\n     * Remote preference for receive video max frame height.\n     *\n     * @returns {Number|undefined}\n     */\n    getRemoteRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteRecvMaxFrameHeight;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Remote preference for receive video max frame heights when source-name signaling is enabled.\n     *\n     * @returns {Map<string, number>|undefined}\n     */\n    getRemoteSourcesRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteSourceMaxFrameHeights;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\n            const ice = SDPUtil.iceparams(localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, ICE_CAND_GATHERING_TIMEOUT);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log(`${this} sendIceCandidate: last candidate`);\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log(`${this} sendIceCandidates ${JSON.stringify(candidates)}`);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ2(\n            sessionInfo, {\n                /*\n                 * This message will be often sent when there are connectivity\n                 * issues, so make it slightly longer than Prosody's default BOSH\n                 * inactivity timeout of 60 seconds.\n                 */\n                timeout: 65\n            })\n            .catch(this.newJingleErrorHandler(sessionInfo));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn(`${this} Ignored add ICE candidate when in closed state`);\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(`${this} No ICE candidates to add ?`, elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug(`${this} addIceCandidate ok!`),\n                        err => logger.error(`${this} addIceCandidate failed!`, err));\n            }\n\n            finishedCallback();\n            logger.debug(`${this} ICE candidates task finished`);\n        };\n\n        logger.debug(`${this} Queued add (${iceCandidates.length}) ICE candidates task`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs = $(contents).find('>description>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                if (ssrcElement.hasAttribute('name')) {\n                    const sourceName = ssrcElement.getAttribute('name');\n\n                    this._signalingLayer.setTrackSourceName(ssrc, sourceName);\n                }\n            }\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this._signalingLayer.setSSRCOwner(ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner?.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(`${this} Invalid SSRC ${ssrc} value received for ${owner}`);\n                            } else {\n                                this._signalingLayer.setSSRCOwner(ssrc, getEndpointId(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(`${this} Unable to generate recvonly SSRC - no peerconnection`);\n        }\n    }\n\n    /**\n     * Returns the video codec configured as the preferred codec on the peerconnection.\n     */\n    getConfiguredVideoCodec() {\n        return this.peerconnection.getConfiguredVideoCodec();\n    }\n\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send 'session-accept' in result.\n     *\n     * @param jingleOffer jQuery selector pointing to the jingle element of the offer IQ\n     * @param success callback called when we accept incoming session successfully and receive RESULT packet to\n     * 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept the incoming offer. 'error' argument\n     * can be used to log some details about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of the local tracks that will be added, before\n     * the offer/answer cycle executes. We allow the localTracks to optionally be passed in so that the addition of the\n     * local tracks and the processing of the initial offer can all be done atomically. We want to make sure that any\n     * other operations which originate in the XMPP Jingle messages related with this session to be executed with an\n     * assumption that the initial offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(() => {\n                    success();\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT, this);\n\n                    // The first video track is added to the peerconnection and signaled as part of the session-accept.\n                    // Add secondary video tracks (that were already added to conference) to the peerconnection here.\n                    // This will happen when someone shares a secondary source to a two people call, the other user\n                    // leaves and joins the call again, a new peerconnection is created for p2p/jvb connection. At this\n                    // point, there are 2 video tracks which need to be signaled to the remote peer.\n                    const videoTracks = localTracks.filter(track => track.getType() === MediaType.VIDEO);\n\n                    videoTracks.length && videoTracks.splice(0, 1);\n                    if (FeatureFlags.isMultiStreamSupportEnabled() && videoTracks.length) {\n                        this.addTracks(videoTracks);\n                    }\n                },\n                error => {\n                    failure(error);\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT_ERROR, this, error);\n                });\n            },\n            failure,\n            localTracks);\n    }\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks = []) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const track of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n            }\n\n            Promise.all(addTracks)\n                .then(() => this.peerconnection.createOffer(this.mediaConstraints))\n                .then(offerSdp => this.peerconnection.setLocalDescription(offerSdp))\n                .then(() => {\n                    this.peerconnection.processLocalSdpForTransceiverInfo(localTracks);\n\n                    // NOTE that the offer is obtained from the localDescription getter as it needs to go though\n                    // the transformation chain.\n                    this.sendSessionInitiate(this.peerconnection.localDescription.sdp);\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued invite task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} invite error`, error);\n                } else {\n                    logger.debug(`${this} invite executed - OK`);\n                }\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.debug(`${this} Session-initiate: `, init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info(`${this} Got RESULT for \"session-initiate\"`);\n            },\n            error => {\n                logger.error(`${this} \"session-initiate\" error`, error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer as the remote description.\n     *\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n\n        const workFunction = finishedCallback => {\n            const newRemoteSdp = this._processNewJingleOfferIq(jingleAnswer);\n            const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n            const remoteDescription = new RTCSessionDescription({\n                type: 'answer',\n                sdp: newRemoteSdp.raw\n            });\n\n            this.peerconnection.setRemoteDescription(remoteDescription)\n                .then(() => {\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n                        const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendContentModify();\n                        this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                    }\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued setAnswer task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} setAnswer task failed: ${error}`);\n                } else {\n                    logger.debug(`${this} setAnswer task done`);\n                }\n            });\n    }\n\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at converting Strophe Jingle IQ into\n     * remote offer SDP. Once converted, setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     *\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we fail at any point during setRD,\n     * createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of the local tracks that will be added, before\n     * the offer/answer cycle executes (for the local track addition to be an atomic operation together with the\n     * offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks = []) {\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n            const audioTracks = localTracks.filter(track => track.getType() === MediaType.AUDIO);\n            const videoTracks = localTracks.filter(track => track.getType() === MediaType.VIDEO);\n            let tracks = localTracks;\n\n            // Add only 1 video track at a time. Adding 2 or more video tracks to the peerconnection at the same time\n            // makes the browser go into a renegotiation loop by firing 'negotiationneeded' event after every\n            // renegotiation.\n            if (FeatureFlags.isMultiStreamSupportEnabled() && videoTracks.length > 1) {\n                tracks = [ ...audioTracks, videoTracks[0] ];\n            }\n            for (const track of tracks) {\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n            }\n            const newRemoteSdp = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            const bridgeSession = $(jingleOfferAnswerIq)\n                .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]');\n            const bridgeSessionId = bridgeSession.attr('id');\n\n            if (bridgeSessionId !== this._bridgeSessionId) {\n                this._bridgeSessionId = bridgeSessionId;\n            }\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: newRemoteSdp.raw\n            });\n\n            Promise.all(addTracks)\n                .then(() => this._responderRenegotiate(remoteDescription))\n                .then(() => {\n                    this.peerconnection.processLocalSdpForTransceiverInfo(localTracks);\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n\n                        // #1 Sync up video transfer active/inactive only after the initial O/A cycle. We want to\n                        // adjust the video media direction only in the local SDP and the Jingle contents direction\n                        // included in the initial offer/answer is mapped to the remote SDP. Jingle 'content-modify'\n                        // IQ is processed in a way that it will only modify local SDP when remote peer is no longer\n                        // interested in receiving video content. Changing media direction in the remote SDP will mess\n                        // up our SDP translation chain (simulcast, video mute, RTX etc.)\n                        // #2 Sends the max frame height if it was set, before the session-initiate/accept\n                        if (this.isP2P\n                            && (!this._localVideoActive\n                                || this.localRecvMaxFrameHeight\n                                || this._sourceReceiverConstraints)) {\n                            this.sendContentModify();\n                        }\n                    }\n\n                    // Old local SDP will be available when we're setting answer for the first time, but not when offer\n                    // and it's fine since we're generating an answer now it will contain all our SSRCs.\n                    if (oldLocalSdp) {\n                        const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSdp);\n                    }\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued setOfferAnswerCycle task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} setOfferAnswerCycle task failed: ${error}`);\n                    failure(error);\n                } else {\n                    logger.debug(`${this} setOfferAnswerCycle task done`);\n                    success();\n                }\n            });\n    }\n\n    /**\n     * Updates the codecs on the peerconnection and initiates a renegotiation for the\n     * new codec config to take effect.\n     *\n     * @param {CodecMimeType} preferred the preferred codec.\n     * @param {CodecMimeType} disabled the codec that needs to be disabled.\n     */\n    setVideoCodecs(preferred = null, disabled = null) {\n        const current = this.peerconnection.getConfiguredVideoCodec();\n\n        if (this._assertNotEnded() && preferred !== current) {\n            logger.info(`${this} Switching video codec from ${current} to ${preferred}`);\n            this.peerconnection.setVideoCodecs(preferred, disabled);\n\n            // Initiate a renegotiate for the codec setting to take effect.\n            const workFunction = finishedCallback => {\n                this._renegotiate().then(\n                    () => {\n                        logger.debug(`${this} setVideoCodecs task is done`);\n\n                        return finishedCallback();\n                    }, error => {\n                        logger.error(`${this} setVideoCodecs task failed: ${error}`);\n\n                        return finishedCallback(error);\n                    });\n            };\n\n            logger.debug(`${this} Queued setVideoCodecs task`);\n\n            // Queue and execute\n            this.modificationQueue.push(workFunction);\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        if (this.options.enableForcedReload) {\n            const sdp = new SDP(this.peerconnection.localDescription.sdp);\n\n            this.sendTransportAccept(sdp, success, failure);\n            this.room.eventEmitter.emit(XMPPEvents.CONNECTION_RESTARTED, this);\n\n            return;\n        }\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\n        // fingerprint has changed by setting an all zeros key.\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\n\n        newFingerprint.attr('hash', 'sha-1');\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\n\n        // First set an offer with a rejected 'data' section\n        this.setOfferAnswerCycle(\n            jingleOfferElem,\n            () => {\n                // Now set the original offer(with the 'data' section)\n                this.setOfferAnswerCycle(\n                    originalOffer,\n                    () => {\n                        const localSDP\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendTransportAccept(localSDP, success, failure);\n\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.ICE_RESTART_SUCCESS,\n                            this,\n                            originalOffer);\n                    },\n                    failure);\n            },\n            failure\n        );\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        const accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder');\n\n        logger.info(`${this} Sending session-accept`);\n        logger.debug(accept.tree());\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media or to adjust sender's video constraints.\n     * @private\n     */\n    sendContentModify() {\n        const maxFrameHeight = this.localRecvMaxFrameHeight;\n        const senders = this._localVideoActive ? 'both' : 'none';\n\n        let sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: MediaType.VIDEO,\n                    senders\n                });\n\n        if (typeof maxFrameHeight !== 'undefined') {\n            sessionModify = sessionModify\n                .c('max-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                .t(maxFrameHeight);\n            logger.info(`${this} sending content-modify, video senders: ${senders},`\n                + ` max frame height: ${maxFrameHeight}`);\n        }\n\n        if (typeof this._sourceReceiverConstraints !== 'undefined') {\n            this._sourceReceiverConstraints.forEach((maxHeight, sourceName) => {\n                sessionModify\n                    .c('source-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                    .attrs({\n                        sourceName,\n                        maxHeight\n                    });\n\n                sessionModify.up();\n                logger.info(`${this} sending content-modify for source-name: ${sourceName}, maxHeight: ${maxHeight}`);\n            });\n        }\n\n        logger.debug(sessionModify.tree());\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\n     * the remote party.\n     *\n     * @param {Number} maxFrameHeight - the new value to set.\n     * @param {Map<string, number>} sourceReceiverConstraints - The receiver constraints per source.\n     */\n    setReceiverVideoConstraint(maxFrameHeight, sourceReceiverConstraints) {\n        logger.info(`${this} setReceiverVideoConstraint - max frame height: ${maxFrameHeight}`\n            + ` sourceReceiverConstraints: ${sourceReceiverConstraints}`);\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            this._sourceReceiverConstraints = sourceReceiverConstraints;\n        } else {\n            this.localRecvMaxFrameHeight = maxFrameHeight;\n        }\n\n        if (this.isP2P) {\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\n            // be synced after offer/answer.\n            if (this.state === JingleSessionState.ACTIVE) {\n                this.sendContentModify();\n            }\n        }\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        const transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        logger.info(`${this} Sending transport-accept`);\n        logger.debug(transportAccept.tree());\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        const transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        logger.info(`${this} Sending 'transport-reject'`);\n        logger.debug(transportReject.tree());\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the resolution constraint on the local camera track.\n     * @param {number} maxFrameHeight - The user preferred max frame height.\n     * @param {string} sourceName - The source name of the track.\n     * @returns {Promise} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoConstraint(maxFrameHeight, sourceName = null) {\n        if (this._assertNotEnded()) {\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}, sourceName: ${sourceName}`);\n\n            const jitsiLocalTrack = sourceName\n                ? this.rtc.getLocalVideoTracks().find(track => track.getSourceName() === sourceName)\n                : this.rtc.getLocalVideoTrack();\n\n            return this.peerconnection.setSenderVideoConstraints(maxFrameHeight, jitsiLocalTrack);\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            const sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success')\n                    .up();\n\n            if (options && options.reasonDescription) {\n                sessionTerminate\n                    .c('text')\n                    .t(options.reasonDescription)\n                    .up()\n                    .up();\n            } else {\n                sessionTerminate.up();\n            }\n\n            this._bridgeSessionId\n                && sessionTerminate.c(\n                    'bridge-session', {\n                        xmlns: 'http://jitsi.org/protocol/focus',\n                        id: this._bridgeSessionId,\n                        restart: options && options.requestRestart === true\n                    }).up();\n\n            logger.info(`${this} Sending session-terminate`);\n            logger.debug(sessionTerminate.tree());\n\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`${this} Skipped sending session-terminate`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`${this} Session terminated`, reasonCondition, reasonText);\n\n        this._xmppListeners.forEach(removeListener => removeListener());\n        this._xmppListeners = [];\n\n        if (this._removeSenderVideoConstraintsChangeListener) {\n            this._removeSenderVideoConstraintsChangeListener();\n        }\n\n        this.close();\n    }\n\n    /**\n     * Handles XMPP connection state changes.\n     *\n     * @param {XmppConnection.Status} status - The new status.\n     */\n    onXmppStatusChanged(status) {\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\n            logger.info(`${this} Sending SSRC update on reconnect`);\n            this.notifyMySSRCUpdate(\n                this._cachedOldLocalSdp,\n                this._cachedNewLocalSdp);\n        }\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n        const self = this;\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n\n                    // Do not print the warning for unified plan p2p case since ssrcs are never removed from the SDP.\n                    !(self.usesUnifiedPlan && self.isP2P)\n                        && logger.warn(`${self} Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            let midFound = false;\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n                midFound = true;\n            });\n\n            // In p2p unified mode with multi-stream enabled, the new sources will have content name that doesn't exist\n            // in the current remote description. Add a new m-line for this newly signaled source.\n            if (!midFound && this.isP2P && FeatureFlags.isSourceNameSignalingEnabled()) {\n                addSsrcInfo[name] = lines;\n            }\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Handles the deletion of SSRCs associated with a remote user from the remote description when the user leaves.\n     *\n     * @param {string} id Endpoint id of the participant that has left the call.\n     * @returns {void}\n     */\n    removeRemoteStreamsOnLeave(id) {\n        const workFunction = finishCallback => {\n            const removeSsrcInfo = this.peerconnection.getRemoteSourceInfoByParticipant(id);\n\n            if (removeSsrcInfo.length) {\n                const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n                const newRemoteSdp = this._processRemoteRemoveSource(removeSsrcInfo);\n\n                this._renegotiate(newRemoteSdp.raw)\n                    .then(() => {\n                        const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(oldLocalSdp, newLocalSDP);\n                        finishCallback();\n                    })\n                    .catch(err => finishCallback(err));\n            } else {\n                finishCallback();\n            }\n        };\n\n        logger.debug(`${this} Queued removeRemoteStreamsOnLeave task for participant ${id}`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} removeRemoteStreamsOnLeave error:`, error);\n                } else {\n                    logger.info(`${this} removeRemoteStreamsOnLeave done!`);\n                }\n            });\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`${this} Processing ${logPrefix}`);\n\n            const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: newRemoteSdp.raw\n            });\n\n            // Always initiate a sRD->cA->sLD cycle when a remote source is added or removed irrespective of whether\n            // the local endpoint is an initiator or responder. Fixes bugs on Chromium where decoders are not created\n            // when sLD->cO->sRD cycle is initiated for p2p cases when remote sources are received.\n            this._responderRenegotiate(remoteDescription).then(() => {\n                const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                logger.log(`${this} ${logPrefix} - OK`);\n                this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                finishedCallback();\n            }, error => {\n                logger.error(`${this} ${logPrefix} failed:`, error);\n                finishedCallback(error);\n            });\n        };\n\n        logger.debug(`${this} Queued ${logPrefix} task`);\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = this.usesUnifiedPlan\n            ? new SDP(this.peerconnection.peerconnection.remoteDescription.sdp)\n            : new SDP(this.peerconnection.remoteDescription.sdp);\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            if (this.usesUnifiedPlan) {\n                let mid;\n\n                lines.forEach(line => {\n                    mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\n\n                    if (mid > -1) {\n                        remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\n                        if (this.isP2P) {\n                            const mediaType = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0])?.media;\n                            const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, false);\n\n                            [ MediaDirection.SENDRECV, MediaDirection.SENDONLY ].forEach(direction => {\n                                remoteSdp.media[mid] = remoteSdp.media[mid]\n                                    .replace(`a=${direction}`, `a=${desiredDirection}`);\n                            });\n                        } else {\n                            // Jvb connections will have direction set to 'sendonly' for the remote sources.\n                            remoteSdp.media[mid] = remoteSdp.media[mid]\n                                .replace(`a=${MediaDirection.SENDONLY}`, `a=${MediaDirection.INACTIVE}`);\n                        }\n                    }\n                });\n\n                // Reject the m-line so that the browser removes the associated transceiver from the list of available\n                // transceivers. This will prevent the client from trying to re-use these inactive transceivers when\n                // additional video sources are added to the peerconnection.\n                if (mid > -1 && !this.isP2P && FeatureFlags.isMultiStreamSupportEnabled()) {\n                    const { media, port } = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0]);\n\n                    remoteSdp.media[mid] = remoteSdp.media[mid].replace(`m=${media} ${port}`, `m=${media} 0`);\n                }\n            } else {\n                lines.forEach(line => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        let remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        // Add a new m-line in the remote description if the source info for a secondary video source is recceived from\n        // the remote p2p peer when multi-stream support is enabled.\n        if (addSsrcInfo.length > remoteSdp.media.length\n            && FeatureFlags.isSourceNameSignalingEnabled()\n            && this.isP2P\n            && this.usesUnifiedPlan) {\n            remoteSdp.addMlineForNewLocalSource(MediaType.VIDEO);\n            remoteSdp = new SDP(remoteSdp.raw);\n        }\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n\n            // Make sure to change the direction to 'sendrecv/sendonly' only for p2p connections. For jvb connections,\n            // a new m-line is added for the new remote sources.\n            if (this.isP2P && this.usesUnifiedPlan) {\n                const mediaType = SDPUtil.parseMLine(remoteSdp.media[idx].split('\\r\\n')[0])?.media;\n                const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, true);\n\n                [ MediaDirection.RECVONLY, MediaDirection.INACTIVE ].forEach(direction => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx]\n                        .replace(`a=${direction}`, `a=${desiredDirection}`);\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            const error = new Error('Attempted to renegotiate in state closed');\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: setting remote description`);\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug(`${this} Renegotiate: creating answer`);\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug(`${this} Renegotiate: setting local description`);\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: creating offer`);\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug(`${this} Renegotiate: setting local description`);\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(`${this} Renegotiate: setting remote description`);\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Adds a new track to the peerconnection. This method needs to be called only when a secondary JitsiLocalTrack is\n     * being added to the peerconnection for the first time.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Tracks to be added to the peer connection.\n     * @returns {Promise<void>} that resolves when the track is successfully added to the peerconnection, rejected\n     * otherwise.\n     */\n    addTracks(localTracks = null) {\n        if (!FeatureFlags.isMultiStreamSupportEnabled()\n            || !localTracks?.length\n            || localTracks.find(track => track.getType() !== MediaType.VIDEO)) {\n            return Promise.reject(new Error('Multiple tracks of the given media type are not supported'));\n        }\n\n        const replaceTracks = [];\n        const workFunction = finishedCallback => {\n            const oldLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n            const remoteSdp = new SDP(this.peerconnection.peerconnection.remoteDescription.sdp);\n            const recvOnlyTransceiver = this.peerconnection.peerconnection.getTransceivers()\n                    .find(t => t.receiver.track.kind === MediaType.VIDEO\n                        && t.direction === MediaDirection.RECVONLY\n                        && t.currentDirection === MediaDirection.RECVONLY);\n\n            // Add transceivers by adding a new mline in the remote description for each track. Do not create a new\n            // m-line if a recv-only transceiver exists in the p2p case. The new track will be attached to the\n            // existing one in that case.\n            for (const track of localTracks) {\n                if (!this.isP2P || !recvOnlyTransceiver) {\n                    remoteSdp.addMlineForNewLocalSource(track.getType());\n                }\n            }\n\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: remoteSdp.raw\n            });\n\n            // Always initiate a responder renegotiate since the new m-line is added to remote SDP.\n            this._responderRenegotiate(remoteDescription)\n                .then(() => {\n                    // Replace the tracks on the newly generated transceivers.\n                    for (const track of localTracks) {\n                        replaceTracks.push(this.peerconnection.replaceTrack(null, track));\n                    }\n\n                    return Promise.all(replaceTracks);\n                })\n\n                // Trigger a renegotiation here since renegotiations are suppressed at TPC.replaceTrack for screenshare\n                // tracks. This is done here so that presence for screenshare tracks is sent before signaling.\n                .then(() => this._renegotiate())\n                .then(() => {\n                    const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                    // Signal the new sources to the peer.\n                    this.notifyMySSRCUpdate(oldLocalSDP, newLocalSDP);\n                    finishedCallback();\n                })\n                .catch(error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued renegotiation after addTrack`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} renegotiation after addTrack error`, error);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} renegotiation after addTrack executed - OK`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            logger.debug(`${this} replaceTrack worker started. oldTrack = ${oldTrack}, newTrack = ${newTrack}`);\n\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            if (!this.usesUnifiedPlan) {\n                // NOTE the code below assumes that no more than 1 video track\n                // can be added to the peer connection.\n                // Transition from camera to desktop share\n                // or transition from one camera source to another.\n                if (this.peerconnection.options.capScreenshareBitrate\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the old video stream.\n                    // 2. source-add for the new video stream.\n                    this.peerconnection.clearRecvonlySsrc();\n                }\n\n                // Transition from no video to video (unmute).\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the recvonly\n                    // 2. source-add for the new video stream\n                    this.peerconnection.clearRecvonlySsrc();\n\n                // Transition from video to no video\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                    // Clearing current primary SSRC and generating the recvonly\n                    // will result in:\n                    // 1. source-remove for the old video stream\n                    // 2. source-add for the recvonly stream\n                    this.peerconnection.clearRecvonlySsrc();\n                    this.peerconnection.generateRecvonlySsrc();\n                }\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n                .then(shouldRenegotiate => {\n                    let promise = Promise.resolve();\n\n                    logger.debug(`${this} TPC.replaceTrack finished. shouldRenegotiate = ${\n                        shouldRenegotiate}, JingleSessionState = ${this.state}`);\n\n                    if (shouldRenegotiate\n                        && (oldTrack || newTrack)\n                        && this.state === JingleSessionState.ACTIVE) {\n                        promise = this._renegotiate().then(() => {\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\n                        });\n                    }\n\n                    return promise.then(() => {\n                        // Set the source name of the new track.\n                        if (FeatureFlags.isSourceNameSignalingEnabled()\n                            && oldTrack\n                            && newTrack\n                            && oldTrack.isVideoTrack()) {\n                            newTrack.setSourceName(oldTrack.getSourceName());\n                        }\n\n                        if (newTrack?.isVideoTrack()) {\n                            logger.debug(`${this} replaceTrack worker: configuring video stream`);\n\n                            // Configure the video encodings after the track is replaced.\n                            return this.peerconnection.configureSenderVideoEncodings(newTrack);\n                        }\n                    });\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued replaceTrack task. Old track = ${oldTrack}, new track = ${newTrack}`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Replace track error:`, error);\n                        reject(error);\n                    } else {\n                        logger.info(`${this}  Replace track done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(`${this} - some SSRC were added on ${operationName}`, addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(`${this} - some SSRCs were removed on ${operationName}`, removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to the peerconnection associated with this session.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is added back to this session and\n     * renegotiation succeeds (if its warranted). Will be rejected with a <tt>string</tt> that provides some error\n     * details in case something goes wrong.\n     */\n    addTrackToPc(track) {\n        return this._addRemoveTrack(false /* add */, track)\n            .then(() => {\n                // Configure the video encodings after the track is unmuted. If the user joins the call muted and\n                // unmutes it the first time, all the parameters need to be configured.\n                if (track.isVideoTrack()) {\n                    return this.peerconnection.configureSenderVideoEncodings(track);\n                }\n            });\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackFromPc(track) {\n        return this._addRemoveTrack(true /* remove */, track);\n    }\n\n    /**\n     * See {@link addTrackToPc} and {@link removeTrackFromPc}.\n     * @param {boolean} isRemove <tt>true</tt> for \"remove\" operation or <tt>false</tt> for \"add\" operation.\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrack(isRemove, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isRemove ? 'removeTrack' : 'addTrack';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(`Error:  tried ${operationName} track with no active peer connection`);\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const operationPromise\n                = isRemove\n                    ? tpc.removeTrackFromPc(track)\n                    : tpc.addTrackToPc(track);\n\n            operationPromise\n                .then(shouldRenegotiate => {\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\n                        this._renegotiate()\n                            .then(() => {\n                                // The results are ignored, as this check failure is not enough to fail the whole\n                                // operation. It will log an error inside for plan-b.\n                                !this.usesUnifiedPlan && this._verifyNoSSRCChanged(operationName, new SDP(oldLocalSDP));\n                                const newLocalSdp = tpc.localDescription.sdp;\n\n                                // Signal the ssrc if an unmute operation results in a new ssrc being generated.\n                                this.notifyMySSRCUpdate(new SDP(oldLocalSDP), new SDP(newLocalSdp));\n                                finishedCallback();\n                            });\n                    } else {\n                        finishedCallback();\n                    }\n                },\n                finishedCallback /* will be called with an error */);\n        };\n\n        logger.debug(`${this} Queued ${operationName} task`);\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} ${operationName} failed`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} ${operationName} done`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\n     * transfer or <tt>false</tt> to suspend audio media transmission.\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\n     * transfer or <tt>false</tt> to suspend video media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\n     * the operation is done. It will be rejected with an error description as\n     * a string in case anything goes wrong.\n     */\n    setMediaTransferActive(audioActive, videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject(\n                'Can not modify transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`${this} Queued make ${logVideoStr}, ${logAudioStr} task`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            // Because the value is modified on the queue it's impossible to\n            // check it's final value reliably prior to submitting the task.\n            // The rule here is that the last submitted state counts.\n            // Check the values here to avoid unnecessary renegotiation cycle.\n            const audioActiveChanged\n                = this.peerconnection.setAudioTransferActive(audioActive);\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n\n                // Do only for P2P - Jicofo will reply with 'bad-request'\n                // We don't want to send 'content-modify', before the initial\n                // O/A (state === JingleSessionState.ACTIVE), because that will\n                // mess up video media direction in the remote SDP.\n                // 'content-modify' when processed only affects the media\n                // direction in the local SDP. We're doing that, because setting\n                // 'inactive' on video media in remote SDP will mess up our SDP\n                // translation chain (simulcast, RTX, video mute etc.).\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify();\n                }\n            }\n\n            const pcVideoActiveChanged\n                = this.peerconnection.setVideoTransferActive(\n                    this._localVideoActive && this._remoteVideoActive);\n\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\n            // direction\n            if (isSessionActive\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\n                this._renegotiate()\n                    .then(\n                        finishedCallback,\n                        finishedCallback /* will be called with an error */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Make ${logVideoStr}, ${logAudioStr} task failed!`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} Make ${logVideoStr}, ${logAudioStr} task done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. Currently it\n     * only checks the senders attribute of the video content in order to figure\n     * out if the remote peer has video in the inactive state (stored locally\n     * in {@link _remoteVideoActive} - see field description for more info).\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\n     * element of the session modify IQ.\n     * @see {@link _remoteVideoActive}\n     * @see {@link _localVideoActive}\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders = JingleSessionPC.parseVideoSenders(jingleContents);\n        const newMaxFrameHeight = JingleSessionPC.parseMaxFrameHeight(jingleContents);\n        const sourceMaxFrameHeights = JingleSessionPC.parseSourceMaxFrameHeight(jingleContents);\n\n        // frame height is optional in our content-modify protocol\n        if (newMaxFrameHeight) {\n            logger.info(`${this} received remote max frame height: ${newMaxFrameHeight}`);\n            this.remoteRecvMaxFrameHeight = newMaxFrameHeight;\n            this.eventEmitter.emit(MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\n        }\n\n        if (sourceMaxFrameHeights) {\n            this.remoteSourceMaxFrameHeights = sourceMaxFrameHeights;\n            this.eventEmitter.emit(MediaSessionEvents.REMOTE_SOURCE_CONSTRAINTS_CHANGED, this, sourceMaxFrameHeights);\n        }\n\n        if (newVideoSenders === null) {\n            logger.error(`${this} - failed to parse video \"senders\" attribute in \"content-modify\" action`);\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded() && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust the media direction.\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(`${this} queued \"content-modify\" task(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} \"content-modify\" failed`, error);\n                } else {\n                    logger.debug(`${this} \"content-modify\" task(video senders=\"${newVideoSenders}\") done`);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\n     * to apply it for {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\n     * Jingle video content element advertised by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of\n     * the underlying peerconnection and renegotiation is required for\n     * the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(`${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n        }\n\n        return this.peerconnection.setVideoTransferActive(this._localVideoActive && this._remoteVideoActive);\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`${this} Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        if (!this.connection.connected) {\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\n            if (!this._cachedOldLocalSdp) {\n                this._cachedOldLocalSdp = oldSDP;\n            }\n            this._cachedNewLocalSdp = newSDP;\n            logger.warn(`${this} Not sending SSRC update while the signaling is disconnected`);\n\n            return;\n        }\n\n        this._cachedOldLocalSdp = undefined;\n        this._cachedNewLocalSdp = undefined;\n\n        const getSignaledSourceInfo = sdpDiffer => {\n            const newMedia = sdpDiffer.getNewMedia();\n            let ssrcs = [];\n            let mediaType = null;\n\n            // It is assumed that sources are signaled one at a time.\n            Object.keys(newMedia).forEach(mediaIndex => {\n                const signaledSsrcs = Object.keys(newMedia[mediaIndex].ssrcs);\n\n                mediaType = newMedia[mediaIndex].mid;\n                if (signaledSsrcs?.length) {\n                    ssrcs = ssrcs.concat(signaledSsrcs);\n                }\n            });\n\n            return {\n                mediaType,\n                ssrcs\n            };\n        };\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        sdpDiffer.toJingle(remove);\n\n        // context a common object for one run of ssrc update (source-add and source-remove) so we can match them if we\n        // need to\n        const ctx = {};\n        const removedSsrcInfo = getSignaledSourceInfo(sdpDiffer);\n\n        if (removedSsrcInfo.ssrcs.length) {\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-remove for ${removedSsrcInfo.mediaType}`\n                + ` ssrcs=${removedSsrcInfo.ssrcs}`);\n            this.connection.sendIQ(\n                remove,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE, this, ctx);\n                },\n                this.newJingleErrorHandler(remove, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE_ERROR, this, error, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        sdpDiffer.toJingle(add);\n        const addedSsrcInfo = getSignaledSourceInfo(sdpDiffer);\n\n        if (addedSsrcInfo.ssrcs.length) {\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-add for ${addedSsrcInfo.mediaType} ssrcs=${addedSsrcInfo.ssrcs}`);\n            this.connection.sendIQ(\n                add,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD, this, ctx);\n                },\n                this.newJingleErrorHandler(add, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD_ERROR, this, error, addedSsrcInfo.mediaType, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`${this} Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.getConnectionState();\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        if (this.peerconnection) {\n            this.peerconnection.onicecandidate = null;\n            this.peerconnection.oniceconnectionstatechange = null;\n            this.peerconnection.onnegotiationneeded = null;\n            this.peerconnection.onsignalingstatechange = null;\n        }\n\n        logger.debug(`${this} Clearing modificationQueue`);\n\n        // Remove any pending tasks from the queue\n        this.modificationQueue.clear();\n\n        logger.debug(`${this} Queued PC close task`);\n        this.modificationQueue.push(finishCallback => {\n            // do not try to close if already closed.\n            this.peerconnection && this.peerconnection.close();\n            finishCallback();\n            logger.debug(`${this} PC close task done!`);\n        });\n\n        logger.debug(`${this} Shutdown modificationQueue!`);\n\n        // No more tasks can go in after the close task\n        this.modificationQueue.shutdown();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[session=${this.isP2P ? 'P2P' : 'JVB'},initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n\n    /**\n     * If the A/B test for suspend video is disabled according to the room's\n     * configuration, returns undefined. Otherwise returns a boolean which\n     * indicates whether the suspend video option should be enabled or disabled.\n     * @param {JingleSessionPCOptions} options - The config options.\n     */\n    _abtestSuspendVideoEnabled({ abTesting }) {\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\n            return;\n        }\n\n        // We want the two participants in a P2P call to agree on the value of\n        // the \"suspend\" option. We use the JID of the initiator, because it is\n        // both randomly selected and agreed upon by both participants.\n        const jid = this._getInitiatorJid();\n\n        return integerHash(jid) % 2 === 0;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\n\nimport ConnectionPlugin from './ConnectionPlugin';\nimport { expandSourcesFromJson } from './JingleHelperFunctions';\nimport JingleSessionPC from './JingleSessionPC';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Parses the transport XML element and returns the list of ICE candidates formatted as text.\n *\n * @param {*} transport Transport XML element extracted from the IQ.\n * @returns {Array<string>}\n */\nfunction _parseIceCandidates(transport) {\n    const candidates = $(transport).find('>candidate');\n    const parseCandidates = [];\n\n    // Extract the candidate information from the IQ.\n    candidates.each((_, candidate) => {\n        const attributes = candidate.attributes;\n        const candidateAttrs = [];\n\n        for (let i = 0; i < attributes.length; i++) {\n            const attr = attributes[i];\n\n            candidateAttrs.push(`${attr.name}: ${attr.value}`);\n        }\n        parseCandidates.push(candidateAttrs.join(' '));\n    });\n\n    return parseCandidates;\n}\n\n/**\n *\n */\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn(`invalid session id: ${sid}`);\n                logger.debug(iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        const jsonMessages = $(iq).find('jingle>json-message');\n\n        if (jsonMessages?.length) {\n            let audioVideoSsrcs;\n\n            logger.info(`Found a JSON-encoded element in ${action}, translating to standard Jingle.`);\n            for (let i = 0; i < jsonMessages.length; i++) {\n                // Currently there is always a single json-message in the IQ with the source information.\n                audioVideoSsrcs = expandSourcesFromJson(iq, jsonMessages[i]);\n            }\n\n            if (audioVideoSsrcs?.size) {\n                const logMessage = [];\n\n                for (const endpoint of audioVideoSsrcs.keys()) {\n                    logMessage.push(`${endpoint}:[${audioVideoSsrcs.get(endpoint)}]`);\n                }\n                logger.debug(`Received ${action} from ${fromJid} with sources=${logMessage.join(', ')}`);\n            }\n\n            // TODO: is there a way to remove the json-message elements once we've extracted the information?\n            // removeChild doesn't seem to work.\n        }\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            isP2P && logger.debug(`Received ${action} from ${fromJid}`);\n            if (startMuted?.length) {\n                const audioMuted = startMuted.attr(MediaType.AUDIO);\n                const videoMuted = startMuted.attr(MediaType.VIDEO);\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n            const pcConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\n\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\n                    JSON.parse(JSON.stringify(pcConfig)),\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING, sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            const ssrcs = [];\n            const contents = $(iq).find('jingle>content');\n\n            // Extract the SSRCs from the session-accept received from a p2p peer.\n            for (const content of contents) {\n                const ssrc = $(content).find('description').attr('ssrc');\n\n                ssrc && ssrcs.push(ssrc);\n            }\n            logger.debug(`Received ${action} from ${fromJid} with ssrcs=${ssrcs}`);\n            this.eventEmitter.emit(XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            const height = $(iq).find('jingle>content[name=\"video\"]>max-frame-height');\n\n            logger.debug(`Received ${action} from ${fromJid} with a max-frame-height=${height?.text()}`);\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            const candidates = _parseIceCandidates($(iq).find('jingle>content>transport'));\n\n            logger.debug(`Received ${action} from ${fromJid} for candidates=${candidates.join(', ')}`);\n            this.eventEmitter.emit(XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            logger.debug(`Received ${action} from ${fromJid} disconnect reason=${reasonText}`);\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED, sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace': {\n            logger.info('(TIME) Start transport replace:\\t', now);\n            const transport = $(iq).find('jingle>content>transport');\n            const candidates = _parseIceCandidates(transport);\n            const iceUfrag = $(transport).attr('ufrag');\n            const icePwd = $(transport).attr('pwd');\n            const dtlsFingerprint = $(transport).find('>fingerprint')?.text();\n\n            logger.debug(`Received ${action} from ${fromJid} with iceUfrag=${iceUfrag},`\n            + ` icePwd=${icePwd}, DTLS fingerprint=${dtlsFingerprint}, candidates=${candidates.join(', ')}`);\n\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success:\\t', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        }\n        case 'source-add':\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'source-remove':\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        // Or the new implementation https://modules.prosody.im/mod_external_services which will be in prosody 0.12\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.xmpp.options.hosts.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:2' }),\n            v2Res => this.onReceiveStunAndTurnCredentials(v2Res),\n            () => {\n                logger.warn('getting turn credentials with extdisco:2 failed, trying extdisco:1');\n                this.connection.sendIQ(\n                    $iq({ type: 'get',\n                        to: this.xmpp.options.hosts.domain })\n                        .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n                    v1Res => this.onReceiveStunAndTurnCredentials(v1Res),\n                    () => {\n                        logger.warn('getting turn credentials failed');\n                        logger.warn('is mod_turncredentials or similar installed and configured?');\n                    }\n                );\n            });\n    }\n\n    /**\n     * Parses response when querying for services using urn:xmpp:extdisco:1 or urn:xmpp:extdisco:2.\n     * Stores results in jvbIceConfig and p2pIceConfig.\n     * @param res The response iq.\n     * @return {boolean} Whether something was processed from the supplied message.\n     */\n    onReceiveStunAndTurnCredentials(res) {\n        const iceservers = [];\n\n        $(res).find('>services>service').each((idx, el) => {\n            // eslint-disable-next-line no-param-reassign\n            el = $(el);\n            const dict = {};\n            const type = el.attr('type');\n\n            switch (type) {\n            case 'stun':\n                dict.urls = `stun:${el.attr('host')}`;\n                if (el.attr('port')) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                iceservers.push(dict);\n                break;\n            case 'turn':\n            case 'turns': {\n                dict.urls = `${type}:`;\n                dict.username = el.attr('username');\n                dict.urls += el.attr('host');\n                const port = el.attr('port');\n\n                if (port) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                const transport = el.attr('transport');\n\n                if (transport && transport !== 'udp') {\n                    dict.urls += `?transport=${transport}`;\n                }\n\n                dict.credential = el.attr('password')\n                        || dict.credential;\n                iceservers.push(dict);\n                break;\n            }\n            }\n        });\n\n        const options = this.xmpp.options;\n\n        // Shuffle ICEServers for loadbalancing\n        for (let i = iceservers.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = iceservers[i];\n\n            iceservers[i] = iceservers[j];\n            iceservers[j] = temp;\n        }\n\n        let filter;\n\n        if (options.useTurnUdp) {\n            filter = s => s.urls.startsWith('turn');\n        } else {\n            // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\n            filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\n        }\n\n        this.jvbIceConfig.iceServers = iceservers.filter(filter);\n        this.p2pIceConfig.iceServers = iceservers;\n\n        return iceservers.length > 0;\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $iq } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n","/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.BINDREQUIRED:\n            return 'BINDREQUIRED';\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport browser from '../browser';\nimport { E2EEncryption } from '../e2ee/E2EEncryption';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport RandomUtil from '../util/RandomUtil';\n\nimport Caps, { parseDiscoInfo } from './Caps';\nimport XmppConnection from './XmppConnection';\nimport MucConnectionPlugin from './strophe.emuc';\nimport JingleConnectionPlugin from './strophe.jingle';\nimport initStropheLogger from './strophe.logger';\nimport RayoConnectionPlugin from './strophe.rayo';\nimport initStropheUtil from './strophe.util';\n\nconst logger = getLogger(__filename);\n\n/**\n* Regex to extract exact error message on jwt error.\n*/\nconst FAILURE_REGEX = /<failure.*><not-allowed\\/><text>(.*)<\\/text><\\/failure>/gi;\n\n/**\n * Creates XMPP connection.\n *\n * @param {Object} options\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\n * Prosody).\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\n * @param {string} options.shard - The shard where XMPP connection initially landed.\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\n * @param {number} [options.websocketKeepAliveUrl] - See {@link XmppConnection} constructor.\n * @param {Object} [options.xmppPing] - See {@link XmppConnection} constructor.\n * @returns {XmppConnection}\n */\nfunction createConnection({\n    enableWebsocketResume,\n    serviceUrl = '/http-bind',\n    shard,\n    token,\n    websocketKeepAlive,\n    websocketKeepAliveUrl,\n    xmppPing }) {\n\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\n    }\n\n    return new XmppConnection({\n        enableWebsocketResume,\n        serviceUrl,\n        websocketKeepAlive,\n        websocketKeepAliveUrl,\n        xmppPing,\n        shard\n    });\n}\n\n/**\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\n * {@link XmppConnection} wrapper.\n *\n * @returns {void}\n */\nfunction initStropheNativePlugins() {\n    initStropheUtil();\n    initStropheLogger();\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:meet-jit-si-turnrelay.jitsi.net:443' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n * The feature used by jigasi participants.\n * @type {string}\n */\nexport const FEATURE_JIGASI = 'http://jitsi.org/protocol/jigasi';\n\n/**\n * The feature used by the lib to mark support for e2ee. We use the feature by putting it in the presence\n * to avoid additional signaling (disco-info).\n * @type {string}\n */\nexport const FEATURE_E2EE = 'https://jitsi.org/meet/e2ee';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\n     * connection with the server.\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\n     * module try to resume the session in case the Websocket connection breaks.\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {number} [options.websocketKeepAliveUrl] - The websocket keep alive url. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n\n        if (!this.options.deploymentInfo) {\n            this.options.deploymentInfo = {};\n        }\n\n        // Cache of components used for certain features.\n        this._components = [];\n\n        initStropheNativePlugins();\n\n        const xmppPing = options.xmppPing || {};\n\n        // let's ping the main domain (in case a guest one is used for the connection)\n        xmppPing.domain = options.hosts.domain;\n\n        this.connection = createConnection({\n            enableWebsocketResume: options.enableWebsocketResume,\n\n            // FIXME remove deprecated bosh option at some point\n            serviceUrl: options.serviceUrl || options.bosh,\n            token,\n            websocketKeepAlive: options.websocketKeepAlive,\n            websocketKeepAliveUrl: options.websocketKeepAliveUrl,\n            xmppPing,\n            shard: options.deploymentInfo.shard\n        });\n\n        // forwards the shard changed event\n        this.connection.on(XmppConnection.Events.CONN_SHARD_CHANGED, () => {\n            /* eslint-disable camelcase */\n            const details = {\n                shard_changed: true,\n                suspend_time: this.connection.ping.getPingSuspendTime(),\n                time_since_last_success: this.connection.getTimeSinceLastSuccess()\n            };\n            /* eslint-enable camelcase */\n\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.OTHER_ERROR,\n                undefined,\n                undefined,\n                details);\n        });\n\n        this._initStrophePlugins();\n\n        this.caps = new Caps(this.connection, /* clientNode */ 'https://jitsi.org/jitsi-meet');\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        $(window).on(`${this.options.disableBeforeUnloadHandlers ? '' : 'beforeunload '}unload`, ev => {\n            this.disconnect(ev).catch(() => {\n                // ignore errors in order to not brake the unload.\n            });\n        });\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n        this.caps.addFeature('http://jitsi.org/json-encoded-sources');\n\n        if (!(this.options.disableRtx || !browser.supportsRTX())) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n        if (this.options.enableOpusRed === true && browser.supportsAudioRed()) {\n            this.caps.addFeature('http://jitsi.org/opus-red');\n        }\n\n        if (typeof this.options.enableRemb === 'undefined' || this.options.enableRemb) {\n            this.caps.addFeature('http://jitsi.org/remb');\n        }\n\n        // Disable TCC on Firefox because of a known issue where BWE is halved on every renegotiation.\n        if (!browser.isFirefox() && (typeof this.options.enableTcc === 'undefined' || this.options.enableTcc)) {\n            this.caps.addFeature('http://jitsi.org/tcc');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChromiumBased() && this.options.enableLipSync === true) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n\n        if (E2EEncryption.isSupported(this.options)) {\n            this.caps.addFeature(FEATURE_E2EE, false, true);\n        }\n\n        // Advertise source-name signaling when the endpoint supports it.\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            logger.info('Source-name signaling is enabled');\n            this.caps.addFeature('http://jitsi.org/source-name');\n        }\n        if (FeatureFlags.isReceiveMultipleVideoStreamsSupported()) {\n            logger.info('Receiving multiple video streams is enabled');\n            this.caps.addFeature('http://jitsi.org/receive-multiple-video-streams');\n        }\n\n        if (FeatureFlags.isSsrcRewritingSupported()) {\n            logger.info('SSRC rewriting is supported');\n            this.caps.addFeature('http://jitsi.org/ssrc-rewriting');\n        }\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        this._maybeSendDeploymentInfoStat();\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            // once connected or attached we no longer need this handle, drop it if it exist\n            if (this._sysMessageHandler) {\n                this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n                this._sysMessageHandler = null;\n            }\n\n            this.sendDiscoInfo && this.connection.jingle.getStunAndTurnCredentials();\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\n            this._resetState();\n\n            // make sure we will send the info after the features request succeeds or fails\n            this.sendDeploymentInfo = false;\n            this.sendDiscoInfo && this.caps.getFeaturesAndIdentities(this.options.hosts.domain)\n                .then(({ features, identities }) => {\n                    if (!features.has(Strophe.NS.PING)) {\n                        logger.error(`Ping NOT supported by ${\n                            this.options.hosts.domain} - please enable ping in your XMPP server config`);\n                    }\n\n                    this._processDiscoInfoIdentities(\n                        identities, undefined /* when querying we will query for features */);\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n\n                    this._maybeSendDeploymentInfoStat(true);\n                });\n\n            // make sure we don't query again\n            this.sendDiscoInfo = false;\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.ERROR) {\n            this.lastErrorMsg = msg;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\n            const errMsg = msg || this.lastErrorMsg;\n\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            const lastFailedRawMessage = this.getConnection().getLastFailedMessage();\n\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg || this._parseConnectionFailedMessage(lastFailedRawMessage),\n                credentials);\n        }\n    }\n\n    /**\n     * Process received identities.\n     * @param {Set<String>} identities The identities to process.\n     * @param {Set<String>} features The features to process, optional. If missing lobby component will be queried\n     * for more features.\n     * @private\n     */\n    _processDiscoInfoIdentities(identities, features) {\n        // check for speakerstats\n        identities.forEach(identity => {\n            if (identity.type === 'av_moderation') {\n                this.avModerationComponentAddress = identity.name;\n                this._components.push(this.avModerationComponentAddress);\n            }\n\n            if (identity.type === 'end_conference') {\n                this.endConferenceComponentAddress = identity.name;\n                this._components.push(this.endConferenceComponentAddress);\n            }\n\n            if (identity.type === 'speakerstats') {\n                this.speakerStatsComponentAddress = identity.name;\n                this._components.push(this.speakerStatsComponentAddress);\n            }\n\n            if (identity.type === 'conference_duration') {\n                this.conferenceDurationComponentAddress = identity.name;\n                this._components.push(this.conferenceDurationComponentAddress);\n            }\n\n            if (identity.type === 'lobbyrooms') {\n                this.lobbySupported = true;\n                const processLobbyFeatures = f => {\n                    f.forEach(fr => {\n                        if (fr.endsWith('#displayname_required')) {\n                            this.eventEmitter.emit(JitsiConnectionEvents.DISPLAY_NAME_REQUIRED);\n                        }\n                    });\n                };\n\n                if (features) {\n                    processLobbyFeatures(features);\n                } else {\n                    identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\n                        .then(({ features: f }) => processLobbyFeatures(f))\n                        .catch(e => logger.warn('Error getting features from lobby.', e && e.message));\n                }\n            }\n\n            if (identity.type === 'shard') {\n                this.options.deploymentInfo.shard = this.connection.shard = identity.name;\n            }\n\n            if (identity.type === 'region') {\n                this.options.deploymentInfo.region = this.connection.region = identity.name;\n            }\n\n            if (identity.type === 'release') {\n                this.options.deploymentInfo.backendRelease = identity.name;\n            }\n\n            if (identity.type === 'breakout_rooms') {\n                this.breakoutRoomsComponentAddress = identity.name;\n                this._components.push(this.breakoutRoomsComponentAddress);\n            }\n\n            if (identity.type === 'room_metadata') {\n                this.roomMetadataComponentAddress = identity.name;\n                this._components.push(this.roomMetadataComponentAddress);\n            }\n        });\n\n        this._maybeSendDeploymentInfoStat(true);\n\n        if (this._components.length > 0) {\n            this.connection.addHandler(this._onPrivateMessage.bind(this), null, 'message', null, null);\n        }\n    }\n\n    /**\n    * Parses a raw failure xmpp xml message received on auth failed.\n    *\n    * @param {string} msg - The raw failure message from xmpp.\n    * @returns {string|null} - The parsed message from the raw xmpp message.\n    */\n    _parseConnectionFailedMessage(msg) {\n        if (!msg) {\n            return null;\n        }\n\n        const matches = FAILURE_REGEX.exec(msg);\n\n        return matches ? matches[1] : null;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n        this.sendDeploymentInfo = true;\n\n        if (this.connection._stropheConn && this.connection._stropheConn._addSysHandler) {\n            this._sysMessageHandler = this.connection._stropheConn._addSysHandler(\n                this._onSystemMessage.bind(this),\n                null,\n                'message'\n            );\n        } else {\n            logger.warn('Cannot attach strophe system handler, jiconop cannot operate');\n        }\n\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Receives system messages during the connect/login process and checks for services or\n     * @param msg The received message.\n     * @returns {void}\n     * @private\n     */\n    _onSystemMessage(msg) {\n        // proceed only if the message has any of the expected information\n        if ($(msg).find('>services').length === 0 && $(msg).find('>query').length === 0) {\n            return;\n        }\n\n        this.sendDiscoInfo = false;\n\n        const foundIceServers = this.connection.jingle.onReceiveStunAndTurnCredentials(msg);\n\n        const { features, identities } = parseDiscoInfo(msg);\n\n        this._processDiscoInfoIdentities(identities, features);\n\n        if (foundIceServers || identities.size > 0 || features.size > 0) {\n            this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n            this._sysMessageHandler = null;\n        }\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log('(TIME) Strophe Attaching:\\t', now);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     * Resets any state/flag before starting a new connection.\n     * @private\n     */\n    _resetState() {\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.disconnectInProgress = undefined;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     * Joins or creates a muc with the provided jid, created from the passed\n     * in room name and muc host and onCreateResource result.\n     *\n     * @param {string} roomName - The name of the muc to join.\n     * @param {Object} options - Configuration for how to join the muc.\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\n     * is to be added to the jid.\n     * @returns {Promise} Resolves with an instance of a strophe muc.\n     */\n    createRoom(roomName, options, onCreateResource) {\n        // Support passing the domain in a String object as part of the room name.\n        const domain = roomName.domain || options.customDomain;\n\n        // There are cases (when using subdomain) where muc can hold an uppercase part\n        let roomjid = `${this.getRoomJid(roomName, domain)}/`;\n        const mucNickname = onCreateResource\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\n            : RandomUtil.randomHexString(8).toLowerCase();\n\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the room JID based on the passed room name and domain.\n     *\n     * @param {string} roomName - The room name.\n     * @param {string} domain - The domain.\n     * @returns {string} - The room JID.\n     */\n    getRoomJid(roomName, domain) {\n        return `${roomName}@${domain ? domain : this.options.hosts.muc.toLowerCase()}`;\n    }\n\n    /**\n     * Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomName, domain) {\n        return this.connection.emuc.isRoomCreated(this.getRoomJid(roomName, domain));\n    }\n\n    /**\n     * Returns the jid of the participant associated with the Strophe connection.\n     *\n     * @returns {string} The jid of the participant.\n     */\n    getJid() {\n        return this.connection.jid;\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            this.connection.ping.ping(this.connection.pingDomain, resolve, reject, timeout);\n        });\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress) {\n            return this.disconnectInProgress;\n        } else if (!this.connection) {\n            return Promise.resolve();\n        }\n\n        this.disconnectInProgress = new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    resolve();\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n        });\n\n        this._cleanupXmppConnection(ev);\n\n        return this.disconnectInProgress;\n    }\n\n    /**\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\n     * (e.g. beforeunload, unload).\n     * @private\n     * @returns {void}\n     */\n    _cleanupXmppConnection(ev) {\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\n        // possible.\n        !this.connection.isUsingWebSocket && this.connection.flush();\n\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\n                // depending on whether we want to run with it for some time.\n                this.connection.options.sync = true;\n\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\n                if (this.connection.sendUnavailableBeacon()) {\n\n                    return;\n                }\n            }\n        }\n\n        this.connection.disconnect();\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     * @param {boolean} silence - Whether the dominant speaker is silent or not.\n     */\n    sendDominantSpeakerEvent(roomJid, silence) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid,\n            silence })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Sends face expressions to speaker stats component.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     * @param {Object} payload - The expression to be sent to the speaker stats.\n     */\n    sendFaceExpressionEvent(roomJid, payload) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('faceExpression', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid,\n            expression: payload.faceExpression,\n            duration: payload.duration\n        }).up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        // ignore empty strings, like message errors\n        if (!jsonString) {\n            return false;\n        }\n\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            logger.error(`Error parsing json ${jsonString}`, e);\n\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from plugins component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!this._components.includes(from)) {\n            return true;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (!parsedJson) {\n            return true;\n        }\n\n        if (parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats' && parsedJson.users) {\n            this.eventEmitter.emit(XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration' && parsedJson.created_timestamp) {\n            this.eventEmitter.emit(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'av_moderation') {\n            this.eventEmitter.emit(XMPPEvents.AV_MODERATION_RECEIVED, parsedJson);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'breakout_rooms') {\n            this.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_EVENT, parsedJson);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'room_metadata') {\n            this.eventEmitter.emit(XMPPEvents.ROOM_METADATA_EVENT, parsedJson);\n        }\n\n        return true;\n    }\n\n    /**\n     * Sends deployment info to stats if not sent already.\n     * We want to try sending it on failure to connect\n     * or when we get a sys message(from jiconop2)\n     * or after success or failure of disco-info\n     * @param force Whether to force sending without checking anything.\n     * @private\n     */\n    _maybeSendDeploymentInfoStat(force) {\n        const acceptedStatuses = [\n            Strophe.Status.ERROR,\n            Strophe.Status.CONNFAIL,\n            Strophe.Status.AUTHFAIL,\n            Strophe.Status.DISCONNECTED,\n            Strophe.Status.CONNTIMEOUT\n        ];\n\n        if (!force && !(acceptedStatuses.includes(this.connection.status) && this.sendDeploymentInfo)) {\n            return;\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = this.options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            // Let's push to analytics any updates that may have come from the backend\n            Statistics.analytics.addPermanentProperties({ ...logObject });\n\n            logObject.id = 'deployment_info';\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        this.sendDeploymentInfo = false;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n    onCreateResource,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room = xmpp.createRoom(\n                    this.options.name,\n                    this.options.config,\n                    onCreateResource\n                );\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Send a new conference IQ.\n                        this.room.moderator.allocateConferenceFocus();\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class handles the codec selection mechanism for the conference based on the config.js settings.\n * The preferred codec is selected based on the settings and the list of codecs supported by the browser.\n * The preferred codec is published in presence which is then used by the other endpoints in the\n * conference to pick a supported codec at join time and when the call transitions between p2p and jvb\n * connections.\n */\nexport class CodecSelection {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance\n     * @param {*} options\n     * @param {string} options.disabledCodec the codec that needs to be disabled.\n     * @param {boolean} options.enforcePreferredCodec whether codec preference has to be\n     * enforced even when an endpoints that doesn't support the preferred codec joins the call.\n     * Falling back to the standard codec will be skipped when this option is true, endpoints\n     * that do not support the preferred codec may not be able to encode/decode video when this happens.\n     * @param {string} options.jvbCodec the codec that is preferred on jvb connection.\n     * @param {string} options.p2pCodec the codec that is preferred on p2p connection.\n     */\n    constructor(conference, options) {\n        this.conference = conference;\n        this.options = options;\n\n        // VP8 cannot be disabled and it will be the default codec when no preference is set.\n        this.disabledCodec = options.disabledCodec === CodecMimeType.VP8\n            ? undefined\n            : this._getCodecMimeType(options.disabledCodec);\n\n        // Check if the codec values passed are valid.\n        const jvbCodec = this._getCodecMimeType(options.jvbCodec);\n        const p2pCodec = this._getCodecMimeType(options.p2pCodec);\n\n        this.jvbPreferredCodec = jvbCodec && this._isCodecSupported(jvbCodec) ? jvbCodec : CodecMimeType.VP8;\n        this.p2pPreferredCodec = p2pCodec && this._isCodecSupported(p2pCodec) ? p2pCodec : CodecMimeType.VP8;\n        logger.debug(`Codec preferences for the conference are JVB: ${this.jvbPreferredCodec},\n            P2P: ${this.p2pPreferredCodec}`);\n\n        if (this.jvbPreferredCodec === CodecMimeType.VP9 && !browser.supportsVP9()) {\n            this.jvbPreferredCodec = CodecMimeType.VP8;\n        }\n\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Checks if a given string is a valid video codec mime type.\n     *\n     * @param {string} codec the codec string that needs to be validated.\n     * @returns {CodecMimeType|null} mime type if valid, null otherwise.\n     * @private\n     */\n    _getCodecMimeType(codec) {\n        if (typeof codec === 'string') {\n            return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks if the given codec is supported by the browser.\n     *\n     * @param {CodecMimeType} preferredCodec codec to be checked.\n     * @returns {boolean} true if the given codec is supported, false otherwise.\n     * @private\n     */\n    _isCodecSupported(preferredCodec) {\n        // Skip the check on FF and RN because they do not support the getCapabilities API.\n        // It is safe to assume both of them support all the codecs supported by Chrome.\n        if (browser.isFirefox() || browser.isReactNative()) {\n            return true;\n        }\n\n        return window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('video').codecs\n            .some(codec => codec.mimeType.toLowerCase() === `video/${preferredCodec}`);\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents._MEDIA_SESSION_STARTED} event. Codecs need to be\n     * configured on the media session that is newly created.\n     *\n     * @param {JingleSessionPC} mediaSession media session that started.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        const preferredCodec = mediaSession.isP2P ? this.p2pPreferredCodec : this.jvbPreferredCodec;\n        const disabledCodec = this.disabledCodec && this._isCodecSupported(this.disabledCodec)\n            ? this.disabledCodec\n            : null;\n\n        this._selectPreferredCodec(mediaSession, preferredCodec, disabledCodec);\n    }\n\n    /**\n     * Sets the codec on the media session based on the preferred codec setting and the supported codecs\n     * published by the remote participants in their presence.\n     *\n     * @param {JingleSessionPC} mediaSession session for which the codec selection has to be made.\n     * @param {CodecMimeType} preferredCodec preferred codec.\n     * @param {CodecMimeType} disabledCodec codec that needs to be disabled.\n     */\n    _selectPreferredCodec(mediaSession = null, preferredCodec = null, disabledCodec = null) {\n        const session = mediaSession ? mediaSession : this.conference.jvbJingleSession;\n        const currentCodec = preferredCodec ? preferredCodec : this.jvbPreferredCodec;\n        let selectedCodec = currentCodec;\n\n        if (session && !session.isP2P && !this.options.enforcePreferredCodec) {\n            const remoteParticipants = this.conference.getParticipants().map(participant => participant.getId());\n\n            for (const remote of remoteParticipants) {\n                const peerMediaInfo = session._signalingLayer.getPeerMediaInfo(remote, MediaType.VIDEO);\n                const peerCodec = peerMediaInfo?.codecType;\n\n                if (peerCodec\n                    && peerCodec !== currentCodec\n                    && (peerCodec !== CodecMimeType.VP9 || browser.supportsVP9())) {\n                    selectedCodec = peerCodec;\n                }\n            }\n        }\n        session && session.setVideoCodecs(selectedCodec, disabledCodec);\n    }\n\n    /**\n     * Returns the preferred codec for the conference. The preferred codec for the JVB media session\n     * is the one that gets published in presence and a comparision is made whenever a participant joins\n     * or leaves the call.\n     *\n     * @returns {CodecMimeType} preferred codec.\n     */\n    getPreferredCodec() {\n        return this.jvbPreferredCodec;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\n     */\n    constructor(peerconnection, wsUrl, emitter) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError('At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError('Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // Indicates whether the connection retries are enabled or not.\n        this._areRetriesEnabled = false;\n\n        // Indicates whether the connection was closed from the client or not.\n        this._closedFromClient = false;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            this._areRetriesEnabled = true;\n            this._wsUrl = wsUrl;\n            this._initWebSocket();\n        }\n    }\n\n    /**\n     * Initializes the web socket channel.\n     *\n     * @returns {void}\n     */\n    _initWebSocket() {\n        // Create a WebSocket instance.\n        const ws = new WebSocket(this._wsUrl);\n\n        // Handle the WebSocket.\n        this._handleChannel(ws);\n        this._mode = 'websocket';\n    }\n\n    /**\n     * Starts the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _startConnectionRetries() {\n        let timeoutS = 1;\n\n        const reload = () => {\n            if (this.isOpen()) {\n                return;\n            }\n            this._initWebSocket(this._wsUrl);\n            timeoutS = Math.min(timeoutS * 2, 60);\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n        };\n\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n    }\n\n    /**\n     * Stops the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _stopConnectionRetries() {\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = undefined;\n        }\n    }\n\n    /**\n     * Retries to establish the websocket connection after the connection was closed by the server.\n     *\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\n     * @returns {void}\n     */\n    _retryWebSocketConnection(closeEvent) {\n        if (!this._areRetriesEnabled) {\n            return;\n        }\n        const { code, reason } = closeEvent;\n\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\n        this._areRetriesEnabled = false;\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\n            this._stopConnectionRetries();\n            this._areRetriesEnabled = true;\n        });\n        this._startConnectionRetries();\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        this._closedFromClient = true;\n        this._stopConnectionRetries();\n        this._areRetriesEnabled = false;\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        this._send({\n            colibriClass: 'EndpointStats',\n            ...payload\n        });\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        logger.log(`Sending lastN=${value}.`);\n\n        this._send({\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        });\n    }\n\n    /**\n     * Sends a \"selected endpoints changed\" message via the channel.\n     *\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendSelectedEndpointsMessage(endpointIds) {\n        logger.log(`Sending selected endpoints: ${endpointIds}.`);\n\n        this._send({\n            colibriClass: 'SelectedEndpointsChangedEvent',\n            selectedEndpoints: endpointIds\n        });\n    }\n\n    /**\n     * Sends a \"receiver video constraint\" message via the channel.\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\n     * in pixels, this receiver is willing to receive\n     */\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\n        logger.log(`Sending ReceiverVideoConstraint with maxFrameHeight=${maxFrameHeightPixels}px`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraint',\n            maxFrameHeight: maxFrameHeightPixels\n        });\n    }\n\n    /**\n     * Sends a 'ReceiverVideoConstraints' message via the bridge channel.\n     *\n     * @param {ReceiverVideoConstraints} constraints video constraints.\n     */\n    sendNewReceiverVideoConstraintsMessage(constraints) {\n        logger.log(`Sending ReceiverVideoConstraints with ${JSON.stringify(constraints)}`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraints',\n            ...constraints\n        });\n    }\n\n    /**\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\n     *\n     * @param {string} videoType 'camera', 'desktop' or 'none'.\n     * @deprecated to be replaced with sendSourceVideoTypeMessage\n     */\n    sendVideoTypeMessage(videoType) {\n        logger.debug(`Sending VideoTypeMessage with video type as ${videoType}`);\n        this._send({\n            colibriClass: 'VideoTypeMessage',\n            videoType\n        });\n    }\n\n    /**\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\n     *\n     * @param {BridgeVideoType} videoType - the video type.\n     * @param {SourceName} sourceName - the source name of the video track.\n     * @returns {void}\n     */\n    sendSourceVideoTypeMessage(sourceName, videoType) {\n        logger.info(`Sending SourceVideoTypeMessage with video type ${sourceName}: ${videoType}`);\n        this._send({\n            colibriClass: 'SourceVideoTypeMessage',\n            sourceName,\n            videoType\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            // Code sample for sending string and/or binary data.\n            // Sends string message to the bridge:\n            //     channel.send(\"Hello bridge!\");\n            // Sends 12 bytes binary message to the bridge:\n            //     channel.send(new ArrayBuffer(12));\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = event => {\n            // WS error events contain no information about the failure (this is available in the onclose event) and\n            // the event references the WS object itself, which causes hangs on mobile.\n            if (this._mode !== 'websocket') {\n                logger.error(`Channel error: ${event.message}`);\n            }\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to parse channel message as JSON: ', data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                const { dominantSpeakerEndpoint, previousSpeakers = [], silence } = obj;\n\n                logger.debug(`Dominant speaker: ${dominantSpeakerEndpoint}, previous speakers: ${previousSpeakers}`);\n                emitter.emit(RTCEvents.DOMINANT_SPEAKER_CHANGED, dominantSpeakerEndpoint, previousSpeakers, silence);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(`Endpoint connection status changed: ${endpoint} active=${isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED, endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from, obj.msgPayload);\n\n                break;\n            }\n            case 'EndpointStats': {\n                emitter.emit(RTCEvents.ENDPOINT_STATS_RECEIVED, obj.from, obj);\n\n                break;\n            }\n            case 'LastNEndpointsChangeEvent': {\n                if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n                    // The new/latest list of last-n endpoint IDs (i.e. endpoints for which the bridge is sending\n                    // video).\n                    const lastNEndpoints = obj.lastNEndpoints;\n\n                    logger.info(`New forwarded endpoints: ${lastNEndpoints}`);\n                    emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED, lastNEndpoints);\n                }\n\n                break;\n            }\n            case 'ForwardedSources': {\n                if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                    // The new/latest list of forwarded sources\n                    const forwardedSources = obj.forwardedSources;\n\n                    logger.info(`New forwarded sources: ${forwardedSources}`);\n                    emitter.emit(RTCEvents.FORWARDED_SOURCES_CHANGED, forwardedSources);\n                }\n\n                break;\n            }\n            case 'SenderVideoConstraints': {\n                const videoConstraints = obj.videoConstraints;\n\n                if (videoConstraints) {\n                    logger.info(`SenderVideoConstraints: ${JSON.stringify(videoConstraints)}`);\n                    emitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, videoConstraints);\n                }\n                break;\n            }\n            case 'SenderSourceConstraints': {\n                if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                    const { sourceName, maxHeight } = obj;\n\n                    if (typeof sourceName === 'string' && typeof maxHeight === 'number') {\n                        // eslint-disable-next-line object-property-newline\n                        logger.info(`SenderSourceConstraints: ${JSON.stringify({ sourceName, maxHeight })}`);\n                        emitter.emit(\n                            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, {\n                                sourceName,\n                                maxHeight\n                            }\n                        );\n                    } else {\n                        logger.error(`Invalid SenderSourceConstraints: ${JSON.stringify(obj)}`);\n                    }\n                }\n                break;\n            }\n            case 'ServerHello': {\n                logger.info(`Received ServerHello, version=${obj.version}.`);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = event => {\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\n\n            if (this._mode === 'websocket') {\n                if (!this._closedFromClient) {\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\n                    this._retryWebSocketConnection(event);\n                }\n            }\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            logger.error('Bridge Channel send: no opened channel.');\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        if (cb.handleEvent) {\n          cb.handleEvent(modifiedEvent);\n        } else {\n          cb(modifiedEvent);\n        }\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    if (!this._eventMap[eventNameToWrap]) {\n      this._eventMap[eventNameToWrap] = new Map();\n    }\n    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[eventNameToWrap]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    if (!this._eventMap[eventNameToWrap].has(cb)) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);\n    this._eventMap[eventNameToWrap].delete(cb);\n    if (this._eventMap[eventNameToWrap].size === 0) {\n      delete this._eventMap[eventNameToWrap];\n    }\n    if (Object.keys(this._eventMap).length === 0) {\n      delete this._eventMap;\n    }\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  const {navigator} = window;\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n}\n\n// Attempt to fix ONN in plan-b mode.\nexport function fixNegotiationNeeded(window, browserDetails) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (browserDetails.version < 72 || (pc.getConfiguration &&\n        pc.getConfiguration().sdpSemantics === 'plan-b')) {\n      if (pc.signalingState !== 'stable') {\n        return;\n      }\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params) ||\n              // Avoid being fooled by patched getParameters() below.\n              (params.encodings.length === 1 &&\n               Object.keys(params.encodings[0]).length === 0)) {\n            params.encodings = initParameters.sendEncodings;\n            sender.sendEncodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(sender.setParameters(params)\n              .then(() => {\n                delete sender.sendEncodings;\n              }).catch(() => {\n                delete sender.sendEncodings;\n              })\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimGetParameters(window) {\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\n    return;\n  }\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\n  if (origGetParameters) {\n    window.RTCRtpSender.prototype.getParameters =\n      function getParameters() {\n        const params = origGetParameters.apply(this, arguments);\n        if (!('encodings' in params)) {\n          params.encodings = [].concat(this.sendEncodings || [{}]);\n        }\n        return params;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track, ...streams) {\n        if (streams) {\n          streams.forEach((stream) => {\n            if (!this._localStreams) {\n              this._localStreams = [stream];\n            } else if (!this._localStreams.includes(stream)) {\n              this._localStreams.push(stream);\n            }\n          });\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in OrigPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio', {direction: 'recvonly'});\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video', {direction: 'recvonly'});\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n\nexport function shimAudioContext(window) {\n  if (typeof window !== 'object' || window.AudioContext) {\n    return;\n  }\n  window.AudioContext = window.webkitAudioContext;\n}\n\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\n      if (window.RTCSessionDescription &&\n          desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp,\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n\nexport function shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      // Native support for ignoring exists for Chrome M77+.\n      // Safari ignores as well, exact version unknown but works in the same\n      // version that also ignores addIceCandidate(null).\n      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)\n           || (browserDetails.browser === 'firefox'\n               && browserDetails.version < 68)\n           || (browserDetails.browser === 'safari'))\n          && arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n\n// Note: Make sure to call this ahead of APIs that modify\n// setLocalDescription.length\nexport function shimParameterlessSetLocalDescription(window, browserDetails) {\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  if (!nativeSetLocalDescription || nativeSetLocalDescription.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      let desc = arguments[0] || {};\n      if (typeof desc !== 'object' || (desc.type && desc.sdp)) {\n        return nativeSetLocalDescription.apply(this, arguments);\n      }\n      // The remaining steps should technically happen when SLD comes off the\n      // RTCPeerConnection's operations chain (not ahead of going on it), but\n      // this is too difficult to shim. Instead, this shim only covers the\n      // common case where the operations chain is empty. This is imperfect, but\n      // should cover many cases. Rationale: Even if we can't reduce the glare\n      // window to zero on imperfect implementations, there's value in tapping\n      // into the perfect negotiation pattern that several browsers support.\n      desc = {type: desc.type, sdp: desc.sdp};\n      if (!desc.type) {\n        switch (this.signalingState) {\n          case 'stable':\n          case 'have-local-offer':\n          case 'have-remote-pranswer':\n            desc.type = 'offer';\n            break;\n          default:\n            desc.type = 'answer';\n            break;\n        }\n      }\n      if (desc.sdp || (desc.type !== 'offer' && desc.type !== 'answer')) {\n        return nativeSetLocalDescription.apply(this, [desc]);\n      }\n      const func = desc.type === 'offer' ? this.createOffer : this.createAnswer;\n      return func.apply(this)\n        .then(d => nativeSetLocalDescription.apply(this, [d]));\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\nimport * as sdp from 'sdp';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings,\n    // Expose sdp as a convenience. For production apps include directly.\n    sdp,\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      if (browserDetails.version === null) {\n        logging('Chrome shim can not determine version, not shimming.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);\n\n      chromeShim.shimGetUserMedia(window, browserDetails);\n      chromeShim.shimMediaStream(window, browserDetails);\n      chromeShim.shimPeerConnection(window, browserDetails);\n      chromeShim.shimOnTrack(window, browserDetails);\n      chromeShim.shimAddTrackRemoveTrack(window, browserDetails);\n      chromeShim.shimGetSendersWithDtmf(window, browserDetails);\n      chromeShim.shimGetStats(window, browserDetails);\n      chromeShim.shimSenderReceiverGetStats(window, browserDetails);\n      chromeShim.fixNegotiationNeeded(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);\n\n      firefoxShim.shimGetUserMedia(window, browserDetails);\n      firefoxShim.shimPeerConnection(window, browserDetails);\n      firefoxShim.shimOnTrack(window, browserDetails);\n      firefoxShim.shimRemoveStream(window, browserDetails);\n      firefoxShim.shimSenderGetStats(window, browserDetails);\n      firefoxShim.shimReceiverGetStats(window, browserDetails);\n      firefoxShim.shimRTCDataChannel(window, browserDetails);\n      firefoxShim.shimAddTransceiver(window, browserDetails);\n      firefoxShim.shimGetParameters(window, browserDetails);\n      firefoxShim.shimCreateOffer(window, browserDetails);\n      firefoxShim.shimCreateAnswer(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      // Must be called before shimCallbackAPI.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);\n\n      safariShim.shimRTCIceServerUrls(window, browserDetails);\n      safariShim.shimCreateOfferLegacy(window, browserDetails);\n      safariShim.shimCallbacksAPI(window, browserDetails);\n      safariShim.shimLocalStreamsAPI(window, browserDetails);\n      safariShim.shimRemoteStreamsAPI(window, browserDetails);\n      safariShim.shimTrackEventTransceiver(window, browserDetails);\n      safariShim.shimGetUserMedia(window, browserDetails);\n      safariShim.shimAudioContext(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter =\n  adapterFactory({window: typeof window === 'undefined' ? undefined : window});\nexport default adapter;\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\nimport clonedeep from 'lodash.clonedeep';\nimport 'webrtc-adapter';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport screenObtainer from './ScreenObtainer';\n\nconst logger = getLogger(__filename);\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 180\n        },\n        width: {\n            ideal: 1280,\n            max: 1280,\n            min: 320\n        }\n    }\n};\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Enables stereo.\nlet stereo = null;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices = [];\nlet availableDevicesPollTimer;\n\n/**\n * An empty function.\n */\nfunction emptyFuncton() {\n    // no-op\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is pointing to (applicable on mobile)\n * @param {string} options.micDeviceId - The device id for the audio capture device to get audio from.\n * @private\n * @returns {Object}\n */\nfunction getConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = clonedeep(options.constraints || DEFAULT_CONSTRAINTS);\n\n    if (um.indexOf('video') >= 0) {\n        // The \"resolution\" option is a shortcut and takes precendence.\n        if (Resolutions[options.resolution]) {\n            const r = Resolutions[options.resolution];\n\n            constraints.video.height = { ideal: r.height };\n            constraints.video.width = { ideal: r.width };\n        }\n\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        // Override the constraints on Safari because of the following webkit bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\n        if (browser.isWebKitBased()) {\n            if (constraints.video.height && constraints.video.height.ideal) {\n                constraints.video.height = { ideal: constraints.video.height.ideal };\n            } else {\n                logger.warn('Ideal camera height missing, camera may not start properly');\n            }\n            if (constraints.video.width && constraints.video.width.ideal) {\n                constraints.video.width = { ideal: constraints.video.width.ideal };\n            } else {\n                logger.warn('Ideal camera width missing, camera may not start properly');\n            }\n        }\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        constraints.audio = {\n            autoGainControl: !disableAGC && !disableAP,\n            deviceId: options.micDeviceId,\n            echoCancellation: !disableAEC && !disableAP,\n            noiseSuppression: !disableNS && !disableAP\n        };\n\n        if (stereo) {\n            Object.assign(constraints.audio, { channelCount: 2 });\n        }\n    } else {\n        constraints.audio = false;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.PERMISSIONS_CHANGED, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n\n/**\n * Update known devices.\n *\n * @param {Array<Object>} pds - The new devices.\n * @returns {void}\n *\n * NOTE: Use this function as a shared callback to handle both the devicechange event  and the polling implementations.\n * This prevents duplication and works around a chrome bug (verified to occur on 68) where devicechange fires twice in\n * a row, which can cause async post devicechange processing to collide.\n */\nfunction updateKnownDevices(pds) {\n    if (compareAvailableMediaDevices(pds)) {\n        onMediaDevicesListChanged(pds);\n    }\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info('list of media devices has changed:', availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, availableDevices);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, availableDevices);\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.audioQuality?.stereo === 'boolean') {\n            stereo = options.audioQuality.stereo;\n            logger.info(`Stereo: ${stereo}`);\n        }\n\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        if (!browser.isReactNative()) {\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n        }\n\n        this.pcConstraints = {};\n\n        screenObtainer.init(options);\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.slice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        () => this.enumerateDevices(emptyFuncton));\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        () => this.enumerateDevices(emptyFuncton),\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     *\n     * @param {Function} callback\n     */\n    enumerateDevices(callback) {\n        navigator.mediaDevices.enumerateDevices()\n            .then(devices => {\n                updateKnownDevices(devices);\n                callback(devices);\n            })\n            .catch(error => {\n                logger.warn(`Failed to  enumerate devices. ${error}`);\n                updateKnownDevices([]);\n                callback([]);\n            });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @param {number} timeout - The timeout in ms for GUM.\n     * @returns {Promise}\n     */\n    _getUserMedia(umDevices, constraints = {}, timeout = 0) {\n        return new Promise((resolve, reject) => {\n            let gumTimeout, timeoutExpired = false;\n\n            if (typeof timeout === 'number' && !isNaN(timeout) && timeout > 0) {\n                gumTimeout = setTimeout(() => {\n                    timeoutExpired = true;\n                    gumTimeout = undefined;\n                    reject(new JitsiTrackError(JitsiTrackErrors.TIMEOUT));\n                }, timeout);\n            }\n\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        resolve(stream);\n                    }\n                })\n                .catch(error => {\n                    logger.warn(`Failed to get access to local media. ${error} ${JSON.stringify(constraints)}`);\n                    const jitsiError = new JitsiTrackError(error, constraints, umDevices);\n\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        reject(jitsiError);\n                    }\n\n                    if (jitsiError.name === JitsiTrackErrors.PERMISSION_DENIED) {\n                        updateGrantedPermissions(umDevices, undefined);\n                    }\n\n                    // else {\n                    // Probably the error is not caused by the lack of permissions and we don't need to update them.\n                    // }\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_getUserMedia.\n     *\n     * @param {Object} options - Optional parameters.\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _getDesktopMedia(options) {\n        if (!screenObtainer.isSupported()) {\n            return Promise.reject(new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                },\n                options);\n        });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @param {Array<string>} options.desktopSharingSources - The types of sources (\"screen\", \"window\", etc)\n     * from which the user can select what to share.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    obtainAudioAndVideoPermissions(options) {\n        const {\n            timeout,\n            ...otherOptions\n        } = options;\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = otherOptions.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingSourceDevice,\n                desktopSharingSources\n            } = otherOptions;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n\n                if (!matchingDevice) {\n                    return Promise.reject(new JitsiTrackError(\n                        { name: 'ConstraintNotSatisfiedError' },\n                        {},\n                        [ desktopSharingSourceDevice ]\n                    ));\n                }\n\n                const requestedDevices = [ 'video' ];\n                const constraints = {\n                    video: {\n                        deviceId: matchingDevice.deviceId\n\n                        // frameRate is omited here on purpose since this is a device that we'll pretend is a screen.\n                    }\n                };\n\n                return this._getUserMedia(requestedDevices, constraints, timeout)\n                    .then(stream => {\n                        return {\n                            sourceType: 'device',\n                            stream\n                        };\n                    });\n            }\n\n            return this._getDesktopMedia({ desktopSharingSources });\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            const desktopAudioTracks = stream.getAudioTracks();\n\n            if (desktopAudioTracks.length) {\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopAudioStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopAudioStream.getAudioTracks()[0]\n                });\n            }\n\n            const desktopVideoTracks = stream.getVideoTracks();\n\n            if (desktopVideoTracks.length) {\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopVideoStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopVideoStream.getVideoTracks()[0],\n                    videoType: VideoType.DESKTOP\n                });\n            }\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = otherOptions.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device => device === 'audio' || device === 'video');\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = getConstraints(requestedCaptureDevices, otherOptions);\n\n            logger.info('Got media constraints: ', JSON.stringify(constraints));\n\n            return this._getUserMedia(requestedCaptureDevices, constraints, timeout);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0],\n                    effects: otherOptions.effects\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA,\n                    effects: otherOptions.effects\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        if (deviceType === 'output' || deviceType === 'audiooutput') {\n            return isAudioOutputDeviceChangeAvailable;\n        }\n\n        return true;\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Sets the capture frame rate for desktop tracks.\n     *\n     * @param {number} maxFps - max fps to be used as the capture frame rate.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        screenObtainer.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    arePermissionsGrantedForAvailableDevices() {\n        return availableDevices.some(device => Boolean(device.label));\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\n     * a onended event on the MediaStreamTrack.\n     * @param {Function} handler the handler\n     */\n    _addMediaStreamInactiveHandler(handler) {\n        if (browser.isFirefox()) {\n            this.track.onended = handler;\n        } else {\n            this.stream.oninactive = handler;\n        }\n    }\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            for (const track of this.stream.getTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            this._addMediaStreamInactiveHandler(undefined);\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Returns the video type (camera or desktop) of this track.\n     */\n    getVideoType() {\n        return this.videoType;\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Check whether this is a local audio track.\n     *\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\n     */\n    isLocalAudioTrack() {\n        return this.isAudioTrack() && this.isLocal();\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack label\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this.track.label;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            this._onTrackAttach(container);\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        return this.getStreamId();\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        let newAudioLevel = audioLevel;\n\n        // When using getSynchornizationSources on the audio receiver to gather audio levels for\n        // remote tracks, browser reports last known audio levels even when the remote user is\n        // audio muted, we need to reset the value to zero here so that the audio levels are cleared.\n        // Remote tracks have the tpc info present while local tracks do not.\n        if (browser.supportsReceiverStats() && typeof tpc !== 'undefined' && this.isMuted()) {\n            newAudioLevel = 0;\n        }\n\n        if (this.audioLevel !== newAudioLevel) {\n            this.audioLevel = newAudioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                newAudioLevel,\n                tpc);\n\n        // LocalStatsCollector reports a value of 0.008 for muted mics\n        // and a value of 0 when there is no audio input.\n        } else if (this.audioLevel === 0\n            && newAudioLevel === 0\n            && this.isLocal()\n            && !this.isWebRTCTrackMuted()) {\n            this.emit(\n                JitsiTrackEvents.NO_AUDIO_INPUT,\n                newAudioLevel);\n        }\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport {\n    NO_BYTES_SENT,\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs a new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId - The ID assigned by the RTC module.\n     * @param {Object} trackInfo.stream - The WebRTC MediaStream, parent of the track.\n     * @param {Object} trackInfo.track - The underlying WebRTC MediaStreamTrack for new JitsiLocalTrack.\n     * @param {string} trackInfo.mediaType - The MediaType of the JitsiLocalTrack.\n     * @param {string} trackInfo.videoType - The VideoType of the JitsiLocalTrack.\n     * @param {Array<Object>} trackInfo.effects - The effects to be applied to the JitsiLocalTrack.\n     * @param {number} trackInfo.resolution - The the video resolution if it's a video track\n     * @param {string} trackInfo.deviceId - The ID of the local device for this track.\n     * @param {string} trackInfo.facingMode - Thehe camera facing mode used in getUserMedia call (for mobile only).\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing source. NOTE: defined for desktop sharing\n     * tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType,\n        effects = []\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED, this),\n            mediaType,\n            videoType);\n\n        this._setEffectInProgress = false;\n        const effect = effects.find(e => e.isEnabled(this));\n\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n\n        const displaySurface = videoType === VideoType.DESKTOP\n            ? track.getSettings().displaySurface\n            : null;\n\n        /**\n         * Track metadata.\n         */\n        this.metadata = {\n            timestamp: Date.now(),\n            ...displaySurface ? { displaySurface } : {}\n        };\n\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType;\n\n        // Get the resolution from the track itself because it cannot be\n        // certain which resolution webrtc has fallen back to using.\n        this.resolution = track.getSettings().height;\n        this.maxEnabledResolution = resolution;\n\n        // Cache the constraints of the track in case of any this track\n        // model needs to call getUserMedia again, such as when unmuting.\n        this._constraints = track.getConstraints();\n\n        // Safari returns an empty constraints object, construct the constraints using getSettings.\n        if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\n            this._constraints = {\n                height: track.getSettings().height,\n                width: track.getSettings().width\n            };\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        // The source name that will be signaled for this track.\n        this._sourceName = null;\n\n        this._trackMutedTS = 0;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this process. Only TraceablePeerConnections to\n        // which the track is attached should care about this action. The TPCs to which the track is not attached can\n        // sync up when track is re-attached. A problem with that is that the \"modify sources\" queue is part of the\n        // JingleSessionPC and it would be excluded from the process. One solution would be to extract class between\n        // TPC and JingleSessionPC which would contain the queue and would notify the signaling layer when local SSRCs\n        // are changed. This would help to separate XMPP from the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackToPc(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     *\n     * @private\n     * @returns {void}\n     */\n    _fireNoDataFromSourceEvent() {\n        const value = !this.isReceivingData();\n\n        this.emit(NO_DATA_FROM_SOURCE, value);\n\n        // FIXME: Should we report all of those events\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\n        Statistics.sendLog(JSON.stringify({\n            name: NO_DATA_FROM_SOURCE,\n            log: value\n        }));\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera issues.\n     *\n     * @private\n     * @returns {void}\n     */\n    _initNoDataFromSourceHandlers() {\n        if (!this._isNoDataFromSourceEventsEnabled()) {\n            return;\n        }\n\n        this._setHandler('track_mute', () => {\n            this._trackMutedTS = window.performance.now();\n            this._fireNoDataFromSourceEvent();\n        });\n\n        this._setHandler('track_unmute', () => {\n            this._fireNoDataFromSourceEvent();\n            Statistics.sendAnalyticsAndLog(\n                TRACK_UNMUTED,\n                {\n                    'media_type': this.getType(),\n                    'track_type': 'local',\n                    value: window.performance.now() - this._trackMutedTS\n                });\n        });\n\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            this._setHandler('track_ended', () => {\n                if (!this.isReceivingData()) {\n                    this._fireNoDataFromSourceEvent();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     *\n     * @private\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     */\n    _isNoDataFromSourceEventsEnabled() {\n        // Disable the events for screen sharing.\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called multiple times in a row and the\n     * invocations of {@link #_setMuted} and, consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @private\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback - Callback that will be called when the operation is successful.\n     * @param {Function} errorCallback - Callback that will be called when the operation fails.\n     * @private\n     * @returns {Promise}\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackFromPc(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {void}\n     */\n    _sendMuteStatus(mute) {\n        if (this.conference) {\n            this.conference._setTrackMuteStatus(this.getType(), this, mute) && this.conference.room.sendPresence();\n        }\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted; otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted\n            && !(this.videoType === VideoType.DESKTOP && FeatureFlags.isMultiStreamSupportEnabled())) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        // In the multi-stream mode, desktop tracks are muted from jitsi-meet instead of being removed from the\n        // conference. This is needed because we don't want the client to signal a source-remove to the remote peer for\n        // the desktop track when screenshare is stopped. Later when screenshare is started again, the same sender will\n        // be re-used without the need for signaling a new ssrc through source-add.\n        if (this.isAudioTrack()\n                || (this.videoType === VideoType.DESKTOP && !FeatureFlags.isMultiStreamSupportEnabled())\n                || !browser.doesVideoMuteByStreamRemove()) {\n            logMuteInfo();\n\n            // If we have a stream effect that implements its own mute functionality, prioritize it before\n            // normal mute e.g. the stream effect that implements system audio sharing has a custom\n            // mute state in which if the user mutes, system audio still has to go through.\n            if (this._streamEffect && this._streamEffect.setMuted) {\n                this._streamEffect.setMuted(muted);\n            } else if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        if (this._streamEffect) {\n                            this._stopStreamEffect();\n                        }\n\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            promise\n                = RTCUtils.obtainAudioAndVideoPermissions(Object.assign(\n                    {},\n                    streamOptions,\n                    { constraints: { video: this._constraints } }));\n\n            promise = promise.then(streamsInfo => {\n                // The track kind for presenter track is video as well.\n                const mediaType = this.getType() === MediaType.PRESENTER ? MediaType.VIDEO : this.getType();\n                const streamInfo = streamsInfo.find(info => info.track.kind === mediaType);\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                if (this._streamEffect) {\n                    this._startStreamEffect(this._streamEffect);\n                }\n\n                this.containers.map(cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => {\n                this._sendMuteStatus(muted);\n\n                // Send the videoType message to the bridge.\n                this.isVideoTrack() && this.conference && this.conference._sendBridgeVideoTypeMessage(this);\n                this.emit(TRACK_MUTE_CHANGED, this);\n            });\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device information. This is temporary solution until\n     * getConstraints() method will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - The list of devices obtained from enumerateDevices() call.\n     * @private\n     * @returns {void}\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n\n        // We need to match by deviceId as well, in case of multiple devices with the same label.\n        let device = devices.find(d => d.kind === kind && d.label === track.label && d.deviceId === this.deviceId);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored handlers to it.\n     *\n     * @param {MediaStream} stream - The new MediaStream.\n     * @private\n     * @returns {void}\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Starts the effect process and returns the modified stream.\n     *\n     * @param {Object} effect - Represents effect instance\n     * @private\n     * @returns {void}\n     */\n    _startStreamEffect(effect) {\n        this._streamEffect = effect;\n        this._originalStream = this.stream;\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\n        this.track = this.stream.getTracks()[0];\n    }\n\n    /**\n     * Stops the effect process and returns the original stream.\n     *\n     * @private\n     * @returns {void}\n     */\n    _stopStreamEffect() {\n        if (this._streamEffect) {\n            this._streamEffect.stopEffect();\n            this._setStream(this._originalStream);\n            this._originalStream = null;\n            this.track = this.stream ? this.stream.getTracks()[0] : null;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the custom MediaStreamTrack._switchCamera\n     * method. Currently, the method in question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch between the front/user-facing and the\n     * back/environment-facing cameras because it will likely be (as is the case of react-native-webrtc) noticeably\n     * faster that creating a new MediaStreamTrack via a new getUserMedia call with the switched facingMode constraint\n     * value. Moreover, the approach with a new getUserMedia call may not even work: WebRTC on Android and iOS is\n     * either very slow to open the camera a second time or plainly freezes attempting to do that.\n     *\n     * @returns {void}\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\n     *\n     * @param {Object|undefined} effect - The new effect to be set.\n     * @private\n     * @returns {void}\n     */\n    _switchStreamEffect(effect) {\n        if (this._streamEffect) {\n            this._stopStreamEffect();\n            this._streamEffect = undefined;\n        }\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML. NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    dispose() {\n        let promise = Promise.resolve();\n\n        // Remove the effect instead of stopping it so that the original stream is restored\n        // on both the local track and on the peerconnection.\n        if (this._streamEffect) {\n            promise = this.setEffect();\n        }\n\n        let removeTrackPromise = Promise.resolve();\n\n        if (this.conference) {\n            removeTrackPromise = this.conference.removeTrack(this);\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return Promise.allSettled([ promise, removeTrackPromise ]).then(() => super.dispose());\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g. audio track or 'desktop' video track)\n     * returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            const trackSettings = this.track.getSettings?.();\n\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Get the duration of the track.\n     *\n     * @returns {Number} the duration of the track in seconds\n     */\n    getDuration() {\n        return (Date.now() / 1000) - (this.metadata.timestamp / 1000);\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Returns the source name associated with the jitsi track.\n     *\n     * @returns {string | null} source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        // If currently used stream effect has its own muted state, use that.\n        if (this._streamEffect && this._streamEffect.isMuted) {\n            return this._streamEffect.isMuted();\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or not. If the stream property is null\n     * (because of mute or another reason) this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly. For example in case of video mute the\n     * method will return false or if the user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false this otherwise.\n     */\n    isReceivingData() {\n        if (this.isVideoTrack()\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\n            return true;\n        }\n\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and readyState can have value muted. In the latest\n        // versions readyState can have values \"live\" and \"ended\" and there is muted boolean property. If the stream is\n        // muted that means that we aren't receiving any data from the source. We want to notify the users for error if\n        // the stream is muted or ended on it's creation.\n\n        // For video blur enabled use the original video stream\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\n\n        return stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Handles bytes sent statistics. NOTE: used only for audio tracks to detect audio issues.\n     *\n     * @param {TraceablePeerConnection} tpc - The peerconnection that is reporting the bytes sent stat.\n     * @param {number} bytesSent - The new value.\n     * @returns {void}\n     */\n    onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${bytesSent}`);\n\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp solution.\n     *\n     * @param conference - JitsiConference object.\n     * @returns {void}\n     */\n    setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Sets the effect and switches between the modified stream and original one.\n     *\n     * @param {Object} effect - Represents the effect instance to be used.\n     * @returns {Promise}\n     */\n    setEffect(effect) {\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\n            return Promise.resolve();\n        }\n\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\n            return Promise.reject(new Error('Incompatible effect instance!'));\n        }\n\n        if (this._setEffectInProgress === true) {\n            return Promise.reject(new Error('setEffect already in progress!'));\n        }\n\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\n        if (this.isMuted() && !this.isAudioTrack()) {\n            this._streamEffect = effect;\n\n            return Promise.resolve();\n        }\n\n        const conference = this.conference;\n\n        if (!conference) {\n            this._switchStreamEffect(effect);\n            if (this.isVideoTrack()) {\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n            }\n\n            return Promise.resolve();\n        }\n\n        this._setEffectInProgress = true;\n\n        return conference._removeLocalTrackFromPc(this)\n            .then(() => {\n                this._switchStreamEffect(effect);\n                if (this.isVideoTrack()) {\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n                }\n\n                return conference._addLocalTrackToPc(this);\n            })\n            .then(() => {\n                this._setEffectInProgress = false;\n            })\n            .catch(error => {\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\n                // everyhting related to the effect functionality.\n                this._setEffectInProgress = false;\n                this._switchStreamEffect();\n                logger.error('Failed to switch to the new stream!', error);\n                throw error;\n            });\n    }\n\n    /**\n     * Sets the source name to be used for signaling the jitsi track.\n     *\n     * @param {string} name The source name.\n     */\n    setSourceName(name) {\n        this._sourceName = name;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     *\n     * @returns {void}\n     */\n    stopStream() {\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n}\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport transform from 'sdp-transform';\n\n/**\n * Rewrites the source information in the way sdp-transform expects.\n * Source information is split into multiple ssrc objects each containing\n * an id, attribute and value.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst write = function(session, opts) {\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            if (mLine.sources && mLine.sources.length) {\n                mLine.ssrcs = [];\n                mLine.sources.forEach(source => {\n                    Object.keys(source).forEach(attribute => {\n                        if (attribute === 'id') {\n                            return;\n                        }\n                        mLine.ssrcs.push({\n                            id: source.id,\n                            attribute,\n                            value: source[attribute]\n                        });\n                    });\n                });\n                delete mLine.sources;\n            }\n\n            // join ssrcs in ssrc groups\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\n                    && Array.isArray(ssrcGroup.ssrcs)) {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return transform.write(session, opts);\n};\n\n/**\n * Rewrites the source information that we get from sdp-transform.\n * All the ssrc lines with different attributes that belong to the\n * same ssrc are grouped into a single soure object with multiple key value pairs.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst parse = function(sdp) {\n    const session = transform.parse(sdp);\n\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            // group sources attributes by ssrc\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n                mLine.sources = [];\n                mLine.ssrcs.forEach(ssrc => {\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\n\n                    if (found > -1) {\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\n                    } else {\n                        const src = { id: ssrc.id };\n\n                        src[ssrc.attribute] = ssrc.value;\n                        mLine.sources.push(src);\n                    }\n                });\n                delete mLine.ssrcs;\n            }\n\n            // split ssrcs in ssrc groups\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs === 'string') {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return session;\n};\n\nexport default {\n    write,\n    parse\n};\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport clonedeep from 'lodash.clonedeep';\n\nimport transform from './transform.js';\n\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\n\n/**\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\n * to the m-line.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\n * the m-line.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n */\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\n    if (!mLine || !simGroup) {\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    simGroup.ssrcs.forEach(src => {\n        mLine.sources.push(findSourcebyId(src));\n\n        // find the related FID group member for this ssrc.\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\n\n        if (relatedFidGroup) {\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\n\n            mLine.sources.push(findSourcebyId(relatedSsrc));\n            mLine.ssrcGroups.push(relatedFidGroup);\n        }\n    });\n\n    // Add the SIM group last.\n    mLine.ssrcGroups.push(simGroup);\n}\n\n/**\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\n * group and the other ssrcs from the related FID groups are added to the same\n * m-line since they all belong to the same remote source. Since the ssrcs are\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\n * if not, just add the FID group.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} ssrc - the primary ssrc.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n * @returns {void}\n */\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\n    if (!mLine || !ssrc) {\n        return;\n    }\n    mLine.sources = [];\n    mLine.ssrcGroups = [];\n\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\n    if (!sourceGroups[ssrc.id]) {\n        mLine.sources.push(ssrc);\n        mLine.msid = ssrc.msid;\n\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    // Find the SIM and FID groups that this ssrc belongs to.\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\n    if (simGroup) {\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\n    } else if (fidGroup) {\n        // check if the other ssrc from this FID group is part of a SIM group\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\n\n        if (simGroup2) {\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\n        } else {\n            // Add the FID group ssrcs.\n            fidGroup.ssrcs.forEach(src => {\n                mLine.sources.push(findSourcebyId(src));\n            });\n            mLine.ssrcGroups.push(fidGroup);\n        }\n    }\n\n    // Set the msid for the media description using the msid attribute of the ssrcs.\n    mLine.msid = mLine.sources[0].msid;\n}\n\n/**\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\n * so we also check if mline for that ssrc exists.\n * For example:\n * If the following ssrcs are in a SIM group,\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\n *        <source ssrc=\\\"1806330949\\\"/>\n *        <source ssrc=\\\"4173145196\\\"/>\n *        <source ssrc=\\\"2002632207\\\"/>\n * </ssrc-group>\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\n * @param {Object} ssrc - ssrc to check.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} mlines - mlines in the description\n\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\n * exists, returns false otherwise.\n */\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\n    const findMatchingMline = mline => {\n        if (mline.sources) {\n            return mline.sources.some(source => source.id === ssrc.id);\n        }\n\n        return false;\n    };\n\n    if (!mlines.find(findMatchingMline)) {\n        // check if this ssrc is member of a SIM group. If so, check if there\n        // is a matching m-line for the primary ssrc of the SIM group.\n        if (!sourceGroups[ssrc.id]) {\n            return false;\n        }\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n        if (simGroup) {\n            return mlines.some(mline => mline.sources\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\n\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\n\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Create an inverted sourceGroup map to put all the grouped ssrcs\n * in the same m-line.\n * @param {Array<Object>} sourceGroups\n * @returns {Object} - An inverted sourceGroup map.\n */\nfunction createSourceGroupMap(sourceGroups) {\n    const ssrc2group = {};\n\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\n        return ssrc2group;\n    }\n    sourceGroups.forEach(group => {\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\n            group.ssrcs.forEach(ssrc => {\n                if (typeof ssrc2group[ssrc] === 'undefined') {\n                    ssrc2group[ssrc] = [];\n                }\n                ssrc2group[ssrc].push(group);\n            });\n        }\n    });\n\n    return ssrc2group;\n}\n\n/**\n * Check if a new SDP requests an ICE restart.\n * @param {Object} - the parsed new SDP\n * @param {Object} - the parsed previous SDP\n * @returns {Boolean} - Returns true if an ICE restart is requested otherwise false.\n */\nfunction checkForIceRestart(newDesc, oldDesc) {\n    if (!newDesc || !oldDesc || newDesc.media.length === 0 || oldDesc.media.length === 0) {\n        return false;\n    }\n\n    const newMLine = newDesc.media[0];\n    const oldMLine = oldDesc.media[0];\n\n    return newMLine.iceUfrag !== oldMLine.iceUfrag || newMLine.icePwd !== oldMLine.icePwd;\n}\n\n/**\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\n * vice versa.\n */\nexport class Interop {\n    /**\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toPlanB(description) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a unified plan sdp\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\n            console.warn('The description does not look like unified plan sdp');\n\n            return description;\n        }\n\n        const media = {};\n        const sessionMedia = session.media;\n\n        session.media = [];\n        sessionMedia.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                mLine.mid = 'data';\n                media[mLine.mid] = mLine;\n\n                return;\n            }\n            if (typeof media[type] === 'undefined') {\n                const bLine = clonedeep(mLine);\n\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    bLine.sources.forEach(source => {\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\n                    });\n                }\n\n                // Do not signal the FID groups if there is no msid attribute present\n                // on the sources as sesison-accept with this source info will fail strophe\n                // validation and the session will not be established. This behavior is seen\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\n                // this case.\n                if (!bLine.ssrcGroups || !mLine.msid) {\n                    bLine.ssrcGroups = [];\n                }\n                delete bLine.msid;\n                bLine.mid = type;\n                media[type] = bLine;\n            } else if (mLine.msid) {\n                // Add sources and source-groups to the existing m-line of the same media type.\n                const bLine = clonedeep(mLine);\n\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    // Copy the msid attribute to each ssrc.\n                    bLine.sources.forEach(ssrc => {\n                        ssrc.msid = mLine.msid;\n                    });\n                    media[type].sources = (media[type].sources || []).concat(bLine.sources);\n                }\n                if (typeof bLine.ssrcGroups !== 'undefined' && Array.isArray(bLine.ssrcGroups)) {\n                    media[type].ssrcGroups = (media[type].ssrcGroups || []).concat(bLine.ssrcGroups);\n                }\n            }\n        });\n        session.media = Object.values(media);\n\n        // Bundle the media only if it is active.\n        const bundle = [];\n\n        Object.values(media).forEach(mline => {\n            if (mline.direction !== 'inactive') {\n                bundle.push(mline.mid);\n            }\n        });\n\n        // We regenerate the BUNDLE group with the new mids.\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = bundle.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n        const resStr = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resStr\n        });\n    }\n\n    /**\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\n     * @param {RTCSessionDescription} description - The description in plan-b format.\n     * @param {RTCSessionDescription} current - The current description set on\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\n     * remoteDescription on the RTCPeerConnection object.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toUnifiedPlan(description, current = null) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a plan-b sdp.\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\n            console.warn('The description does not look like plan-b');\n\n            return description;\n        }\n        const currentDesc = current ? transform.parse(current.sdp) : null;\n        const iceRestart = checkForIceRestart(session, currentDesc);\n        const newIceUfrag = session.media[0].iceUfrag;\n        const newIcePwd = session.media[0].icePwd;\n        const newFingerprint = session.media[0].fingerprint;\n        const media = {};\n\n        session.media.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                if (!currentDesc || !currentDesc.media) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n\n                    return;\n                }\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\n\n                if (mLineForData) {\n                    currentDesc.media[mLineForData] = mLine;\n                    currentDesc.media[mLineForData].mid = mLineForData;\n                }\n\n                return;\n            }\n\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\n\n            // If there are no sources advertised for a media type, add the description if this is the first\n            // remote offer, i.e., no current description was passed. Chrome in Unified plan does not produce\n            // recvonly ssrcs unlike Firefox and Safari.\n            if (!mLine.sources) {\n                if (!currentDesc) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n                }\n\n                return;\n            }\n            mLine.sources.forEach((ssrc, idx) => {\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\n                // These ssrcs do not have the \"msid\" attribute set.\n                if (!ssrc.msid) {\n                    return;\n                }\n\n                // If there is no description set on the peerconnection, create new m-lines.\n                if (!currentDesc || !currentDesc.media) {\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\n                        return;\n                    }\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    newMline.direction = idx\n                        ? 'sendonly'\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\n                    newMline.bundleOnly = undefined;\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    media[newMline.mid] = newMline;\n\n                    return;\n                }\n\n                // Create and append the m-lines to the existing description.\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\n                    return;\n                }\n                const newMline = clonedeep(mLine);\n\n                newMline.mid = currentDesc.media.length.toString();\n                newMline.direction = 'sendonly';\n                addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                currentDesc.media.push(newMline);\n            });\n        });\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\n        const mids = [];\n\n        session.media.forEach(mLine => {\n            mids.push(mLine.mid);\n            if (iceRestart) {\n                mLine.iceUfrag = newIceUfrag;\n                mLine.icePwd = newIcePwd;\n                mLine.fingerprint = newFingerprint;\n            }\n        });\n\n        // We regenerate the BUNDLE group (since we regenerated the mids)\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = mids.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n\n        // Increment the session version every time.\n        session.origin.sessionVersion++;\n        const resultSdp = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resultSdp\n        });\n    }\n}\n","export enum SignalingEvents {\n    /**\n     * Event triggered when participant's muted status changes.\n     *\n     * @param {string} endpointId the track owner's identifier (MUC nickname)\n     * @param {MediaType} mediaType \"audio\" or \"video\"\n     * @param {boolean} isMuted the new muted state\n     */\n    PEER_MUTED_CHANGED = 'signaling.peerMuted',\n\n    /**\n     * Event triggered when participant's video type changes.\n     *\n     * @param {string} endpointId the video owner's ID (MUC nickname)\n     * @param {VideoType} videoType the new value\n     */\n    PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType',\n\n    /**\n     * Event triggered when source's muted status changes.\n     *\n     * @param {string} sourceName - The name of the source.\n     * @param {boolean} isMuted - The new muted state.\n     */\n    SOURCE_MUTED_CHANGED = 'signaling.sourceMuted',\n\n    /**\n     * Event triggered when source's video type changes.\n     *\n     * @param {string} source - The name of the source.\n     * @param {VideoType} videoType - The new value.\n     */\n    SOURCE_VIDEO_TYPE_CHANGED = 'signaling.sourceVideoType'\n}\n\n// exported for backward compatibility\nexport const PEER_MUTED_CHANGED = SignalingEvents.PEER_MUTED_CHANGED;\nexport const PEER_VIDEO_TYPE_CHANGED = SignalingEvents.PEER_VIDEO_TYPE_CHANGED;\nexport const SOURCE_MUTED_CHANGED = SignalingEvents.SOURCE_MUTED_CHANGED;\nexport const SOURCE_VIDEO_TYPE_CHANGED = SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED;\n","\nimport Listenable from '../../modules/util/Listenable';\nimport { MediaType } from '../../service/RTC/MediaType';\n\n/**\n * @typedef {string} EndpointId\n */\n/**\n * @typedef {string} SourceName\n */\n/**\n * @typedef {Object} SourceInfo\n *\n * @property {SourceName} sourceName - Name of the media source.\n * @property {boolean} [muted=false] - Tells if the source is muted (paused?).\n * @property {string} [videoType] - Type of the video for video type.\n */\n\n/**\n * Generates a source name.\n *\n * @param {EndpointId} endpointId - Jitsi Endpoint Id.\n * @param {MediaType} mediaType - the media type string.\n * @param {number} trackIdx - Track index (or sender idx? - to be figured out) starting from 0.\n * @returns {SourceName} eg. endpointA-v0\n */\nexport function getSourceNameForJitsiTrack(endpointId, mediaType, trackIdx) {\n    const firstLetterOfMediaType = mediaType.substring(0, 1);\n\n    return `${endpointId}-${firstLetterOfMediaType}${trackIdx}`;\n}\n\n/**\n * Extracts MediaType from give source name (must be in the correct format as generated by\n * {@link getSourceNameForJitsiTrack}).\n *\n * @param {SourceName} sourceName - the source name.\n * @returns {MediaType}\n */\nexport function getMediaTypeFromSourceName(sourceName) {\n    const firstLetterOfMediaTypeIdx = sourceName.lastIndexOf('-') + 1;\n\n    if (firstLetterOfMediaTypeIdx <= 0) {\n        throw new Error(`Invalid source name: ${sourceName}`);\n    }\n\n    const firstLetterOfMediaType = sourceName.substr(firstLetterOfMediaTypeIdx, 1);\n\n    for (const type of Object.values(MediaType)) {\n        if (type.substr(0, 1) === firstLetterOfMediaType) {\n            return type;\n        }\n    }\n\n    throw new Error(`Invalid source name: ${sourceName}`);\n}\n\n/**\n * Extracts source index (zero based) from a given source name (must be in the correct format as generated by\n * {@link getSourceNameForJitsiTrack}).\n *\n * @param {SourceName} sourceName - the source name, eg. endpointA-v0.\n * @returns {number}\n */\nexport function getSourceIndexFromSourceName(sourceName) {\n    const nameParts = sourceName.split('-');\n    const trackIdx = Number(nameParts[nameParts.length - 1].substring(1));\n\n    if (Number.isNaN(trackIdx)) {\n        throw new Error(`Failed to parse track idx for source name: ${sourceName}`);\n    }\n\n    return trackIdx;\n}\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * @param {SourceName} sourceName - The name of the source for which the info is to be obtained.\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     *\n     * @deprecated This method is to be replaced with getPeerSourceInfo.\n     */\n    getPeerMediaInfo(owner, mediaType, sourceName) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about a source for given name and endpoint ID.\n     * @param {EndpointId} owner - The owner's endpoint ID.\n     * @param {SourceName} sourceName - The name of the source for which the info is to be obtained.\n     * @returns {SourceInfo | undefined}\n     */\n    getPeerSourceInfo(owner, sourceName) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the source name for given SSRC.\n     * @param {number} ssrc the track's SSRC identifier.\n     * @returns {SourceName | undefined} the track's source name.\n     */\n    getTrackSourceName(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) { // eslint-disable-line no-unused-vars\n    }\n\n\n    /**\n     * Adjusts muted status of given track.\n     *\n     * @param {SourceName} sourceName - the name of the track's source.\n     * @param {boolean} muted - the new muted status.\n     * @returns {boolean}\n     */\n    setTrackMuteStatus(sourceName, muted) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Saves the source name for a track identified by it's ssrc.\n     * @param {number} ssrc the ssrc of the target track.\n     * @param {SourceName} sourceName the track's source name to save.\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setTrackSourceName(ssrc, sourceName) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Sets track's video type.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {VideoType} videoType - the new video type.\n     * @returns {boolean}\n     */\n    setTrackVideoType(sourceName, videoType) { // eslint-disable-line no-unused-vars\n    }\n}\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects all the m-lines from the SDP for a given media type.\n     *\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video', 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media line or <tt>null</tt> if not found. The\n     * object returned references the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance (it's not a\n     * copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLines = this.parsedSDP.media\n            .filter(mLine => mLine.type === mediaType)\n            .map(mLine => new MLineWrap(mLine));\n\n        return selectedMLines ?? null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { getSourceNameForJitsiTrack } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {string} localEndpointId - The endpoint id of the local user.\n     */\n    constructor(tpc, localEndpointId) {\n        this.tpc = tpc;\n        this.localEndpointId = localEndpointId;\n        this.audioSourcesToMsidMap = new Map();\n        this.videoSourcesToMsidMap = new Map();\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n            const isCamera = videoTrack.videoType === VideoType.CAMERA;\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = isCamera && (muted || !isInPeerConnection);\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(`No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = MediaDirection.SENDRECV;\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Returns a string that can be set as the MSID attribute for a source.\n     *\n     * @param {string} mediaType - Media type of the source.\n     * @param {string} trackId - Id of the MediaStreamTrack associated with the source.\n     * @param {string} streamId - Id of the MediaStream associated with the source.\n     * @returns {string|null}\n     */\n    _generateMsidAttribute(mediaType, trackId, streamId = null) {\n        if (!(mediaType && trackId)) {\n            logger.error(`Unable to munge local MSID - track id=${trackId} or media type=${mediaType} is missing`);\n\n            return null;\n        }\n        const pcId = this.tpc.id;\n\n        // Handle a case on Firefox when the browser doesn't produce a 'a:ssrc' line with the 'msid' attribute or has\n        // '-' for the stream id part of the msid line. Jicofo needs an unique identifier to be associated with a ssrc\n        // and uses the msid for that.\n        if (streamId === '-' || !streamId) {\n            return `${this.localEndpointId}-${mediaType}-${pcId} ${trackId}-${pcId}`;\n        }\n\n        return `${streamId}-${pcId} ${trackId}-${pcId}`;\n    }\n\n    /**\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending the id of {@link LocalSdpMunger#tpc} at the end,\n     * preceding by a dash sign.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const mediaType = mediaSection.mLine?.type;\n        const pcId = this.tpc.id;\n\n        for (const ssrcLine of mediaSection.ssrcs) {\n            switch (ssrcLine.attribute) {\n            case 'cname':\n            case 'label':\n            case 'mslabel':\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\n                break;\n            case 'msid': {\n                if (ssrcLine.value) {\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\n\n                    let streamId = streamAndTrackIDs[0];\n                    const trackId = streamAndTrackIDs[1];\n\n                    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                        // Always overwrite streamId since we want the msid to be in this format even if the browser\n                        // generates one (in p2p mode).\n                        streamId = `${this.localEndpointId}-${mediaType}`;\n\n                        // eslint-disable-next-line max-depth\n                        if (mediaType === MediaType.VIDEO) {\n                            // eslint-disable-next-line max-depth\n                            if (!this.videoSourcesToMsidMap.has(trackId)) {\n                                streamId = `${streamId}-${this.videoSourcesToMsidMap.size}`;\n                                this.videoSourcesToMsidMap.set(trackId, streamId);\n                            }\n                        } else if (!this.audioSourcesToMsidMap.has(trackId)) {\n                            streamId = `${streamId}-${this.audioSourcesToMsidMap.size}`;\n                            this.audioSourcesToMsidMap.set(trackId, streamId);\n                        }\n\n                        streamId = mediaType === MediaType.VIDEO\n                            ? this.videoSourcesToMsidMap.get(trackId)\n                            : this.audioSourcesToMsidMap.get(trackId);\n                    }\n                    ssrcLine.value = this._generateMsidAttribute(mediaType, trackId, streamId);\n                } else {\n                    logger.warn(`Unable to munge local MSID - weird format detected: ${ssrcLine.value}`);\n                }\n                break;\n            }\n            }\n        }\n\n        // Additional transformations related to MSID are applicable to Unified-plan implementation only.\n        if (!this.tpc.usesUnifiedPlan()) {\n            return;\n        }\n\n        const mediaDirection = mediaSection.mLine?.direction;\n\n        // On FF when the user has started muted create answer will generate a recv only SSRC. We don't want to signal\n        // this SSRC in order to reduce the load of the xmpp server for large calls. Therefore the SSRC needs to be\n        // removed from the SDP.\n        //\n        // For all other use cases (when the user has had media but then the user has stopped it) we want to keep the\n        // receive only SSRCs in the SDP. Otherwise source-remove will be triggered and the next time the user add a\n        // track we will reuse the SSRCs and send source-add with the same SSRCs. This is problematic because of issues\n        // on Chrome and FF (https://bugzilla.mozilla.org/show_bug.cgi?id=1768729) when removing and then adding the\n        // same SSRC in the remote sdp the remote track is not rendered.\n        if (browser.isFirefox()\n            && (mediaDirection === MediaDirection.RECVONLY || mediaDirection === MediaDirection.INACTIVE)\n            && (\n                (mediaType === MediaType.VIDEO && !this.tpc._hasHadVideoTrack)\n                || (mediaType === MediaType.AUDIO && !this.tpc._hasHadAudioTrack)\n            )\n        ) {\n            mediaSection.ssrcs = undefined;\n            mediaSection.ssrcGroups = undefined;\n        }\n\n        const msidLine = mediaSection.mLine?.msid;\n        const trackId = msidLine && msidLine.split(' ')[1];\n        const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n\n        for (const source of sources) {\n            const msidExists = mediaSection.ssrcs\n                .find(ssrc => ssrc.id === source && ssrc.attribute === 'msid');\n\n            if (!msidExists && trackId) {\n                const generatedMsid = this._generateMsidAttribute(mediaType, trackId);\n\n                mediaSection.ssrcs.push({\n                    id: source,\n                    attribute: 'msid',\n                    value: generatedMsid\n                });\n            }\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia(MediaType.AUDIO)?.[0];\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n            this._injectSourceNames(audioMLine);\n        }\n\n        const videoMlines = transformer.selectMedia(MediaType.VIDEO);\n\n        if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n            videoMlines.splice(1);\n        }\n\n        for (const videoMLine of videoMlines) {\n            this._transformMediaIdentifiers(videoMLine);\n            this._injectSourceNames(videoMLine);\n        }\n\n        // Plan-b clients generate new SSRCs and trackIds whenever tracks are removed and added back to the\n        // peerconnection, therefore local track based map for msids needs to be reset after every transformation.\n        if (FeatureFlags.isSourceNameSignalingEnabled() && !this.tpc._usesUnifiedPlan) {\n            this.audioSourcesToMsidMap.clear();\n            this.videoSourcesToMsidMap.clear();\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    /**\n     * Injects source names. Source names are need to for multiple streams per endpoint support. The final plan is to\n     * use the \"mid\" attribute for source names, but because the SDP to Jingle conversion still operates in the Plan-B\n     * semantics (one source name per media), a custom \"name\" attribute is injected into SSRC lines..\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _injectSourceNames(mediaSection) {\n        if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n            return;\n        }\n\n        const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n        const mediaType = mediaSection.mLine?.type;\n\n        if (!mediaType) {\n            throw new Error('_transformMediaIdentifiers - no media type in mediaSection');\n        }\n\n        for (const source of sources) {\n            const nameExists = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'name');\n            const msid = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'msid')?.value;\n            let trackIndex;\n\n            if (msid) {\n                const streamId = msid.split(' ')[0];\n\n                // Example stream id: d8ff91-video-8-1\n                // In the example above 8 is the track index\n                const trackIndexParts = streamId.split('-');\n\n                trackIndex = trackIndexParts[trackIndexParts.length - 2];\n            }\n\n            const sourceName = getSourceNameForJitsiTrack(this.localEndpointId, mediaType, trackIndex);\n\n            if (!nameExists) {\n                // Inject source names as a=ssrc:3124985624 name:endpointA-v0\n                mediaSection.ssrcs.push({\n                    id: source,\n                    attribute: 'name',\n                    value: sourceName\n                });\n            }\n\n            if (mediaType === MediaType.VIDEO) {\n                const videoType = this.tpc.getLocalVideoTracks().find(track => track.getSourceName() === sourceName)\n                    ?.getVideoType();\n\n                if (videoType) {\n                    // Inject videoType as a=ssrc:1234 videoType:desktop.\n                    mediaSection.ssrcs.push({\n                        id: source,\n                        attribute: 'videoType',\n                        value: videoType\n                    });\n                }\n            }\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport SDPUtil from './SDPUtil';\nimport { SdpTransformWrap, parseSecondarySSRC } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        return;\n    }\n    if (previousRtxSSRC) {\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't already have them.  If the video ssrc has been seen before, and\n     * already had an RTX ssrc generated, the same RTX ssrc will be used again.\n     *\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} The modified sdp in raw string format.\n     */\n    modifyRtxSsrcs(sdpStr) {\n        let modified = false;\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\n\n        if (!videoMLines?.length) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        for (const videoMLine of videoMLines) {\n            if (this.modifyRtxSsrcs2(videoMLine)) {\n                modified = true;\n            }\n        }\n\n        return modified ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the {@link MLineWrap} instance wrapping video media as\n     * an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by {@link SdpTransformWrap} has been modified or\n     * <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === MediaDirection.RECVONLY) {\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            return false;\n        }\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (!correspondingRtxSsrc) {\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                }\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp.\n     *\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\n\n        if (!videoMLines?.length) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        for (const videoMLine of videoMLines) {\n            if (videoMLine.direction !== MediaDirection.RECVONLY\n                && videoMLine.getSSRCCount()\n                && videoMLine.containsAnySSRCGroups()) {\n                const fidGroups = videoMLine.findGroups('FID');\n\n                // Remove the fid groups from the mline\n                videoMLine.removeGroupsBySemantics('FID');\n\n                // Get the rtx ssrcs and remove them from the mline\n                for (const fidGroup of fidGroups) {\n                    const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n                    videoMLine.removeSSRC(rtxSsrc);\n                }\n            }\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport {\n    SdpTransformWrap,\n    parsePrimarySSRC,\n    parseSecondarySSRC\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia(MediaType.VIDEO)?.[0];\n\n        if (!videoMLine) {\n            logger.debug(`${this.logPrefix} no 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(`${this.logPrefix} no SSRC found for the recvonly video stream!`);\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(`${this.logPrefix} sdp-consistency couldn't parse new primary ssrc`);\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n            }\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport * as transform from 'sdp-transform';\n\nconst DEFAULT_NUM_OF_LAYERS = 3;\n\ninterface Description {\n    type: RTCSdpType;\n    sdp: string;\n}\n\ninterface Options {\n    numOfLayers?: number\n}\n\n/**\n * This class handles SDP munging for enabling simulcast for local video streams in Unified plan. A set of random SSRCs\n * are generated for the higher layer streams and they are cached for a given mid. The cached SSRCs are then reused on\n * the subsequent iterations while munging the local description. This class also handles imploding of the simulcast\n * SSRCs for remote endpoints into the primary FID group in remote description since Jicofo signals all SSRCs relevant\n * to a given endpoint.\n */\nexport default class SdpSimulcast {\n    private _options: Options;\n    private _ssrcCache: Map<string, Array<number>>;\n\n    /**\n     * Creates a new instance.\n     *\n     * @param options\n     */\n    constructor(options: Options) {\n        this._options = options;\n        this._ssrcCache = new Map();\n\n        if (!this._options.numOfLayers) {\n            this._options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n        }\n    }\n\n    /**\n     * Updates the given media description using the SSRCs that were cached for the mid associated\n     * with the media description and returns the modified media description.\n     *\n     * @param mLine\n     * @returns\n     */\n     _fillSsrcsFromCache(mLine: transform.MediaDescription) : any {\n        const mid = mLine.mid;\n        const cachedSsrcs = this._ssrcCache.get(mid);\n        const newSsrcs = this._parseSimLayers(mLine);\n        const newMsid = this._getSsrcAttribute(mLine, newSsrcs[0], 'msid');\n        const newCname = this._getSsrcAttribute(mLine, newSsrcs[0], 'cname');\n\n        mLine.ssrcs = [];\n        mLine.ssrcGroups = [];\n\n        for (const ssrc of cachedSsrcs) {\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'msid',\n                value: newMsid\n            });\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: newCname\n            });\n        }\n\n        mLine.ssrcGroups.push({\n            semantics: 'SIM',\n            ssrcs: cachedSsrcs.join(' ')\n        });\n\n        return mLine;\n    }\n\n    /**\n     * Generates a new set of SSRCs for the higher simulcast layers/streams and adds the attributes and SIM group to\n     * the given media description and returns the modified media description.\n     *\n     * @param mLine\n     * @param primarySsrc\n     * @returns\n     */\n    _generateNewSsrcsForSimulcast(mLine: transform.MediaDescription, primarySsrc: number) : any {\n        const cname = this._getSsrcAttribute(mLine, primarySsrc, 'cname');\n        let msid = this._getSsrcAttribute(mLine, primarySsrc, 'msid');\n        const addAssociatedAttributes = (mLine: transform.MediaDescription, ssrc: number) => {\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: cname\n            });\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'msid',\n                value: msid\n            });\n        }\n\n        // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present (only cname attributes are\n        // present) in the answers that Chrome and Safari generate for an offer received from Jicofo. Generate these\n        // a=ssrc lines using the msid values from the a=msid line.\n        if (!msid) {\n            msid = mLine.msid;\n            const primarySsrcs = mLine.ssrcs;\n\n            primarySsrcs.forEach(ssrc => {\n                mLine.ssrcs.push({\n                    id: ssrc.id,\n                    attribute: 'msid',\n                    value: msid\n                });\n            })\n        }\n\n        // Generate SIM layers.\n        const simSsrcs = [];\n\n        for (let i = 0; i < this._options.numOfLayers - 1; ++i) {\n            const simSsrc = this._generateSsrc();\n\n            addAssociatedAttributes(mLine, simSsrc);\n            simSsrcs.push(simSsrc);\n        }\n\n        mLine.ssrcGroups = mLine.ssrcGroups || [];\n        mLine.ssrcGroups.push({\n            semantics: 'SIM',\n            ssrcs: primarySsrc + ' ' + simSsrcs.join(' ')\n        });\n\n        return mLine;\n    }\n\n    /**\n     * Returns a random number to be used for the SSRC.\n     *\n     * @returns\n     */\n    _generateSsrc() : number {\n        const max = 0xffffffff;\n\n        return Math.floor(Math.random() * max);\n    }\n\n    /**\n     * Returns the requested attribute value for a SSRC from a given media description.\n     *\n     * @param mLine\n     * @param ssrc\n     * @param attributeName\n     * @returns\n     */\n    _getSsrcAttribute(mLine: transform.MediaDescription, ssrc: number, attributeName: string) : string | undefined {\n        return mLine.ssrcs?.find(\n            ssrcInfo => Number(ssrcInfo.id) === ssrc\n            && ssrcInfo.attribute === attributeName)?.value;\n    }\n\n    /**\n     * Returns an array of all the primary SSRCs in the SIM group for a given media description.\n     *\n     * @param mLine\n     * @returns\n     */\n    _parseSimLayers(mLine: transform.MediaDescription) : Array<number> | null {\n        const simGroup = mLine.ssrcGroups?.find(group => group.semantics === 'SIM');\n\n        if (simGroup) {\n            return simGroup.ssrcs.split(' ').map(ssrc => Number(ssrc));\n        }\n\n        if (mLine.ssrcs?.length) {\n            return [ Number(mLine.ssrcs[0].id) ];\n        }\n\n        return null;\n    }\n\n    /**\n     * Munges the given media description to enable simulcast for the video media sections that are in either have\n     * SENDRECV or SENDONLY as the media direction thereby ignoring all the RECVONLY transceivers created for remote\n     * endpoints.\n     * NOTE: This needs to be called only when simulcast is enabled.\n     *\n     * @param description\n     * @returns\n     */\n    mungeLocalDescription(description: Description) : Description {\n        if (!description || !description.sdp) {\n            return description;\n        }\n        const session = transform.parse(description.sdp);\n\n        for (let media of session.media) {\n            // Ignore recvonly and inactive transceivers created for remote sources.\n            if (media.direction === MediaDirection.RECVONLY || media.direction === MediaDirection.INACTIVE) {\n                continue;\n            }\n\n            // Ignore audio m-lines.\n            if (media.type !== MediaType.VIDEO) {\n                continue;\n            }\n            const mid = media.mid;\n            const numSsrcs = new Set(media.ssrcs?.map(ssrcInfo => ssrcInfo.id));\n            const numGroups = media.ssrcGroups?.length ?? 0;\n            let primarySsrc: number;\n\n            // Do not munge if the description has no ssrcs or if simulcast is already enabled.\n            if (numSsrcs.size === 0 || numSsrcs.size > 2 || (numSsrcs.size === 2 && numGroups === 0)) {\n                continue;\n            }\n            if (numSsrcs.size === 1) {\n                primarySsrc = Number(media.ssrcs[0]?.id);\n            } else {\n                const fidGroup = media.ssrcGroups.find(group => group.semantics === 'FID');\n\n                if (fidGroup) {\n                    primarySsrc = Number(fidGroup.ssrcs.split(' ')[0]);\n                }\n            }\n\n            if (this._ssrcCache.has(mid)) {\n                media = this._fillSsrcsFromCache(media);\n            } else {\n                media = this._generateNewSsrcsForSimulcast(media, primarySsrc);\n                const simulcastSsrcs = this._parseSimLayers(media);\n\n                // Update the SSRCs in the cache so that they can re-used for the same mid again.\n                this._ssrcCache.set(mid, simulcastSsrcs);\n            }\n        }\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(session)\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { JitsiConferenceEvents } from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createTrackStreamingStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport JitsiConference from '../../types/hand-crafted/JitsiConference';\nimport JitsiRemoteTrack from '../../types/hand-crafted/modules/RTC/JitsiRemoteTrack';\nimport RTC from '../../types/hand-crafted/modules/RTC/RTC';\nimport { VideoType } from '../../types/hand-crafted/service/RTC/VideoType';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\n/** Track streaming statuses. */\nexport enum TrackStreamingStatus {\n\n    /**\n     * Status indicating that streaming is currently active.\n     */\n    ACTIVE = 'active',\n\n    /**\n     * Status indicating that streaming is currently inactive.\n     * Inactive means the streaming was stopped on purpose from the bridge, like exiting forwarded sources or\n     * adaptivity decided to drop video because of not enough bandwidth.\n     */\n    INACTIVE = 'inactive',\n\n    /**\n     * Status indicating that streaming is currently interrupted.\n     */\n    INTERRUPTED = 'interrupted',\n\n    /**\n     * Status indicating that streaming is currently restoring.\n     */\n    RESTORING = 'restoring',\n  }\n\ntype StreamingStatusMap = {\n    // TODO: Replace this hand crafted VideoType when we convert VideoType.js to Typescript.\n    videoType?: VideoType, \n    startedMs?: number,\n    p2p?: boolean,\n    streamingStatus?: string,\n    value?: number\n};\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for {@link TrackStreamingStatusImpl.outOfForwardedSourcesTimeout}.\n */\nconst DEFAULT_NOT_IN_FORWARDED_SOURCES_TIMEOUT = 500;\n\n/**\n * Default value of 2500 milliseconds for {@link TrackStreamingStatusImpl.p2pRtcMuteTimeout}.\n */\nconst DEFAULT_P2P_RTC_MUTE_TIMEOUT = 2500;\n\n/**\n * Default value of 10000 milliseconds for {@link TrackStreamingStatusImpl.rtcMuteTimeout}.\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of forwarded sources should be inactive and when\n * entering forwarded sources it becomes restoring and when data is received from bridge it will become active, but if\n * no data is received for some time we set status of that track streaming to interrupted.\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Class is responsible for emitting JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED events.\n */\nexport class TrackStreamingStatusImpl {\n    rtc: RTC;\n    conference: JitsiConference;\n    track: JitsiRemoteTrack;\n\n    /**  This holds the timeout callback ID scheduled using window.setTimeout. */\n    trackTimer: number | null;\n\n    /**\n     * If video track frozen detection through RTC mute event is supported, we wait some time until video track is\n     * considered frozen. But because when the track falls out of forwarded sources it is expected for the video to\n     * freeze this timeout must be significantly reduced in \"out of forwarded sources\" case.\n     *\n     * Basically this value is used instead of {@link rtcMuteTimeout} when track is not in forwarded sources.\n     */\n    outOfForwardedSourcesTimeout: number;\n\n    /**\n     * How long we are going to wait for the corresponding signaling mute event after the RTC video track muted\n     * event is fired on the Media stream, before the connection interrupted is fired. The default value is\n     * {@link DEFAULT_P2P_RTC_MUTE_TIMEOUT}.\n     */\n    p2pRtcMuteTimeout: number;\n\n    /**\n     * How long we're going to wait after the RTC video track muted event for the corresponding signalling mute\n     * event, before the connection interrupted is fired. The default value is {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n     *\n     * @returns amount of time in milliseconds\n     */\n    rtcMuteTimeout: number;\n\n    /**\n     * This holds a timestamp indicating  when remote video track was RTC muted. The purpose of storing the\n     * timestamp is to avoid the transition to disconnected status in case of legitimate video mute operation where\n     * the signalling video muted event can arrive shortly after RTC muted event.\n     *\n     * The timestamp is measured in milliseconds obtained with <tt>Date.now()</tt>.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event implemented in JitsiLocalTrack by extending the event\n     * to the remote track and allowing to set different timeout for local and remote tracks.\n     */\n    rtcMutedTimestamp: number | null;\n\n    /** This holds the restoring timeout callback ID scheduled using window.setTimeout. */\n    restoringTimer: ReturnType<typeof setTimeout> | null;\n\n    /**\n     * This holds the current streaming status (along with all the internal events that happen while in that\n     * state).\n     *\n     * The goal is to send this information to the analytics backend for post-mortem analysis.\n     */\n    streamingStatusMap: StreamingStatusMap;\n\n    _onP2PStatus: () => void;\n    _onUserLeft: () => void;\n    _onTrackRtcMuted: () => void;\n    _onTrackRtcUnmuted: () => void;\n    _onSignallingMuteChanged: () => void;\n    _onTrackVideoTypeChanged: () => void;\n    _onLastNValueChanged: () => void;\n    _onForwardedSourcesChanged: () => void;\n\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link TrackStreamingStatus} based on the values given for some specific remote track. It is\n     * assumed that the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param isInForwardedSources - indicates whether the track is in the forwarded sources set. When set to\n     * false it means that JVB is not sending any video for the track.\n     * @param isRestoringTimedout - if true it means that the track has been outside of forwarded sources too\n     * long to be considered {@link TrackStreamingStatus.RESTORING}.\n     * @param isVideoMuted - true if the track is video muted and we should not expect to receive any video.\n     * @param isVideoTrackFrozen - if the current browser support video frozen detection then it will be set to\n     * true when the video track is frozen. If the current browser does not support frozen detection the it's always\n     * false.\n     * @return {TrackStreamingStatus} the new streaming status for the track for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isInForwardedSources: boolean,\n            isRestoringTimedout: boolean,\n            isVideoMuted: boolean,\n            isVideoTrackFrozen: boolean): TrackStreamingStatus {\n\n        // We are currently not checking the endpoint connection status received from the JVB.\n        if (isVideoMuted) {\n            // If the connection is active according to JVB and the track is video muted there is no way for the\n            // connection to be inactive, because the detection logic below only makes sense for video.\n            return TrackStreamingStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return TrackStreamingStatus.ACTIVE;\n            } else if (isInForwardedSources) {\n                return isRestoringTimedout ? TrackStreamingStatus.INTERRUPTED : TrackStreamingStatus.RESTORING;\n            }\n\n            return TrackStreamingStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must rely on the forwarded sources value\n        return isInForwardedSources ? TrackStreamingStatus.ACTIVE : TrackStreamingStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and the streaming status can be only active or\n     * interrupted.\n     * @param isVideoMuted - true if video muted\n     * @param isVideoTrackFrozen - true if the video track for the remote track is currently frozen. If the\n     * current browser does not support video frozen detection then it's always false.\n     * @return {TrackStreamingStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted: boolean, isVideoTrackFrozen: boolean): TrackStreamingStatus {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video track frozen detection...\n            return TrackStreamingStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? TrackStreamingStatus.ACTIVE : TrackStreamingStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>TrackStreamingStatus</tt>.\n     *\n     * @constructor\n     * @param rtc - the RTC service instance\n     * @param conference - parent conference instance\n     * @param {Object} options\n     * @param {number} [options.p2pRtcMuteTimeout=2500] custom value for\n     * {@link TrackStreamingStatusImpl.p2pRtcMuteTimeout}.\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link TrackStreamingStatusImpl.rtcMuteTimeout}.\n     * @param {number} [options.outOfForwardedSourcesTimeout=500] custom value for\n     * {@link TrackStreamingStatusImpl.outOfForwardedSourcesTimeout}.\n     */\n    constructor(rtc: RTC, conference: JitsiConference, track: JitsiRemoteTrack, options: {\n        outOfForwardedSourcesTimeout: number,\n        p2pRtcMuteTimeout: number,\n        rtcMuteTimeout: number\n    }) {\n        this.rtc = rtc;\n        this.conference = conference;\n        this.track = track;\n\n        this.restoringTimer = null;\n        this.rtcMutedTimestamp = null;\n        this.streamingStatusMap = {};\n        this.trackTimer = null;\n\n        this.outOfForwardedSourcesTimeout = typeof options.outOfForwardedSourcesTimeout === 'number'\n            ? options.outOfForwardedSourcesTimeout : DEFAULT_NOT_IN_FORWARDED_SOURCES_TIMEOUT;\n\n        this.p2pRtcMuteTimeout = typeof options.p2pRtcMuteTimeout === 'number'\n            ? options.p2pRtcMuteTimeout : DEFAULT_P2P_RTC_MUTE_TIMEOUT;\n\n        this.rtcMuteTimeout = typeof options.rtcMuteTimeout === 'number'\n            ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n    }\n\n    /**\n     * Gets the video frozen timeout for given source name.\n     * @return how long are we going to wait since RTC video muted even, before a video track is considered\n     * frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(): number {\n        const sourceName = this.track.getSourceName();\n\n        return this.rtc.isInForwardedSources(sourceName)\n            ? this.rtcMuteTimeout\n            : this.conference.isP2PActive() ? this.p2pRtcMuteTimeout : this.outOfForwardedSourcesTimeout;\n    }\n\n    /**\n     * Initializes <tt>TrackStreamingStatus</tt> and bind required event listeners.\n     */\n    init(): void {\n        // Handles P2P status changes\n        this._onP2PStatus = this.figureOutStreamingStatus.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\" events for video type tracks when they stop\n        // receiving data which is often a sign that remote user is having connectivity issues.\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for signalling mute/unmute events.\n            this._onSignallingMuteChanged = this.onSignallingMuteChanged.bind(this);\n            this.track.on(JitsiTrackEvents.TRACK_MUTE_CHANGED, this._onSignallingMuteChanged);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged = this.onTrackVideoTypeChanged.bind(this);\n            this.track.on(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, this._onTrackVideoTypeChanged);\n        }\n\n        this._onForwardedSourcesChanged = this.onForwardedSourcesChanged.bind(this);\n        this.conference.on(JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED, this._onForwardedSourcesChanged);\n\n        this._onLastNValueChanged = this.figureOutStreamingStatus.bind(this);\n        this.rtc.on(RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this instance.\n     */\n    dispose(): void {\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n            this.rtc.removeListener(RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            this.track.off(JitsiTrackEvents.TRACK_MUTE_CHANGED, this._onSignallingMuteChanged);\n        }\n\n        this.conference.off(JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED, this._onForwardedSourcesChanged);\n        this.conference.off(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n        this.conference.off(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n        this.rtc.removeListener(RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.clearTimeout();\n        this.clearRtcMutedTimestamp();\n        this.maybeSendTrackStreamingStatusEvent(Date.now());\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Changes streaming status.\n     * @param newStatus\n     */\n    _changeStreamingStatus(newStatus: TrackStreamingStatus): void {\n        if (this.track.getTrackStreamingStatus() !== newStatus) {\n\n            const sourceName = this.track.getSourceName();\n\n            this.track._setTrackStreamingStatus(newStatus);\n\n            logger.debug(`Emit track streaming status(${Date.now()}) ${sourceName}: ${newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'track.streaming.status',\n                    track: sourceName,\n                    status: newStatus\n                }));\n\n            // It's common for the event listeners to access the JitsiRemoteTrack. Thus pass it as a parameter here.\n            this.track.emit(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED, this.track, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"streaming interrupted\" event which was previously scheduled as a timeout on RTC 'onmute'\n     * event.\n     */\n    clearTimeout(): void {\n        if (this.trackTimer) {\n            window.clearTimeout(this.trackTimer);\n            this.trackTimer = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for remote video track.\n     */\n    clearRtcMutedTimestamp(): void {\n        this.rtcMutedTimestamp = null;\n    }\n\n    /**\n     * Checks if track is considered frozen.\n     * @return <tt>true</tt> if the video has frozen or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for local and remote tracks.\n     */\n    isVideoTrackFrozen(): boolean {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const isVideoRTCMuted = this.track.isWebRTCTrackMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp;\n        const timeout = this._getVideoFrozenTimeout();\n\n        return isVideoRTCMuted && typeof rtcMutedTimestamp === 'number' && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Figures out (and updates) the current streaming status for the track identified by the source name.\n     */\n    figureOutStreamingStatus(): void {\n        const sourceName = this.track.getSourceName();\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout();\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable any detection based on video playback or\n        // forwarded sources.\n        const isVideoMuted = this.track.isMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen();\n        const isInForwardedSources = this.rtc.isInForwardedSources(sourceName);\n\n        const newState\n            = inP2PMode\n                ? TrackStreamingStatusImpl._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : TrackStreamingStatusImpl._getNewStateForJvbMode(\n                    isInForwardedSources,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps that we use to track the restoring state\n        if (newState !== TrackStreamingStatus.RESTORING) {\n            this._clearRestoringTimer();\n        }\n\n        logger.debug(\n            `Figure out conn status for ${sourceName}, is video muted: ${\n                isVideoMuted} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in forwarded sources: ${\n                isInForwardedSources} currentStatus => newStatus: ${\n                this.track.getTrackStreamingStatus()} => ${newState}`);\n\n        const oldStreamingStatus = this.streamingStatusMap || {};\n\n        // Send an analytics event (guard on either the p2p flag or the streaming status has changed since the last\n        // time this code block run).\n        if (!('p2p' in oldStreamingStatus)\n            || !('streamingStatus' in oldStreamingStatus)\n            || oldStreamingStatus.p2p !== inP2PMode\n            || oldStreamingStatus.streamingStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendTrackStreamingStatusEvent(nowMs);\n\n            this.streamingStatusMap = {\n                ...oldStreamingStatus,\n                streamingStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the video type is not in\n            // oldStreamingStatus.\n            if (!('videoType' in this.streamingStatusMap)) {\n                this.streamingStatusMap.videoType = this.track.getVideoType();\n            }\n        }\n        this._changeStreamingStatus(newState);\n    }\n\n    /**\n     * Computes the duration of the current streaming status for the track (i.e. 15 seconds in the INTERRUPTED state)\n     * and sends a track streaming status event.\n     * @param nowMs - The current time (in millis).\n     */\n    maybeSendTrackStreamingStatusEvent(nowMs: number): void {\n        const trackStreamingStatus = this.streamingStatusMap;\n\n        if (trackStreamingStatus\n            && 'startedMs' in trackStreamingStatus\n            && 'videoType' in trackStreamingStatus\n            && 'streamingStatus' in trackStreamingStatus\n            && 'p2p' in trackStreamingStatus) {\n            trackStreamingStatus.value = nowMs - trackStreamingStatus.startedMs;\n            Statistics.sendAnalytics(createTrackStreamingStatusEvent(trackStreamingStatus));\n        }\n    }\n\n    /**\n     * On change in forwarded sources set check all leaving and entering track to change their corresponding statuses.\n     *\n     * @param leavingForwardedSources - The array of sourceName leaving forwarded sources.\n     * @param enteringForwardedSources - The array of sourceName entering forwarded sources.\n     * @param timestamp - The time in millis\n     * @private\n     */\n    onForwardedSourcesChanged(\n            leavingForwardedSources: string[] = [],\n            enteringForwardedSources: string[] = [],\n            timestamp: number): void {\n\n        const sourceName = this.track.getSourceName();\n\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\n        // calculate the streaming status for all the tracks since it won't get triggered automatically on the track\n        // that has started/stopped receiving media.\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            this.figureOutStreamingStatus();\n        }\n\n        if (leavingForwardedSources.includes(sourceName)) {\n            this.track._clearEnteredForwardedSourcesTimestamp();\n            this._clearRestoringTimer();\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutStreamingStatus();\n        }\n\n        if (enteringForwardedSources.includes(sourceName)) {\n            // store the timestamp this track is entering forwarded sources\n            this.track._setEnteredForwardedSourcesTimestamp(timestamp);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutStreamingStatus();\n        }\n    }\n\n    /**\n     * Clears the restoring timer for video track and the timestamp for entering forwarded sources.\n     */\n    _clearRestoringTimer(): void {\n        const rTimer = this.restoringTimer;\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimer = null;\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares current time and the time the track\n     * entered in forwarded sources. If it hasn't timedout and there is no timer added, add new timer in order to give\n     * it more time to become active or mark it as interrupted on next check.\n     *\n     * @returns <tt>true</tt> if the track was in restoring state more than the timeout\n     * ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(): boolean {\n        const enteredForwardedSourcesTimestamp = this.track._getEnteredForwardedSourcesTimestamp();\n\n        if (enteredForwardedSourcesTimestamp\n            && (Date.now() - enteredForwardedSourcesTimestamp) >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled, schedule one so we can track the restoring\n        // state and change it after reaching the timeout\n        const rTimer = this.restoringTimer;\n\n        if (!rTimer) {\n            this.restoringTimer = setTimeout(() => this.figureOutStreamingStatus(), DEFAULT_RESTORING_TIMEOUT);\n        }\n\n        return false;\n    }\n\n    /** Checks whether a track is the current track. */\n    _isCurrentTrack(track: JitsiRemoteTrack): boolean {\n        return track.getSourceName() === this.track.getSourceName();\n    }\n\n    /**\n     * Sends a last/final track streaming status event for the track of the user that left the conference.\n     * @param id - The id of the participant that left the conference.\n     */\n    onUserLeft(id: string): void {\n        if (this.track.getParticipantId() === id) {\n            this.maybeSendTrackStreamingStatusEvent(Date.now());\n            this.streamingStatusMap = {};\n        }\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param track - The video track for which 'onmute' event will be processed.\n     */\n    onTrackRtcMuted(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = track.getSourceName();\n\n        logger.debug(`Detector track RTC muted: ${sourceName}`, Date.now());\n\n        this.rtcMutedTimestamp = Date.now();\n        if (!track.isMuted()) {\n            // If the user is not muted according to the signalling we'll give it some time, before the streaming\n            // interrupted event is triggered.\n            this.clearTimeout();\n\n            // The timeout is reduced when track is not in the forwarded sources\n            const timeout = this._getVideoFrozenTimeout();\n\n            this.trackTimer = window.setTimeout(() => {\n                logger.debug(`Set RTC mute timeout for: ${sourceName} of ${timeout} ms`);\n                this.clearTimeout();\n                this.figureOutStreamingStatus();\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param track - The video track for which 'onunmute' event will be processed.\n     */\n    onTrackRtcUnmuted(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = this.track.getSourceName();\n\n        logger.debug(`Detector track RTC unmuted: ${sourceName}`, Date.now());\n\n        this.clearTimeout();\n        this.clearRtcMutedTimestamp();\n\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param track - The remote video track for which the signalling mute/unmute event will be\n     * processed.\n     */\n    onSignallingMuteChanged(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = this.track.getSourceName();\n\n        logger.debug(`Detector on track signalling mute changed: ${sourceName}`, track.isMuted());\n\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Sends a track streaming status event as a result of the video type changing.\n     * @deprecated this will go away with full multiple streams support\n     * @param type - The video type.\n     */\n    onTrackVideoTypeChanged(type: VideoType): void {\n        const nowMs = Date.now();\n\n        this.maybeSendTrackStreamingStatusEvent(nowMs);\n\n        this.streamingStatusMap = {\n            ...this.streamingStatusMap || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n\nexport default TrackStreamingStatusImpl;\n","import * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport TrackStreamingStatusImpl, { TrackStreamingStatus } from '../connectivity/TrackStreamingStatus';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/**\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\n * container for every event in the list.\n */\nconst containerEvents = [ 'abort', 'canplaythrough', 'ended', 'error' ];\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @param {String} sourceName the source name signaled for the track\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P,\n            sourceName) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n        this._sourceName = sourceName;\n        this._trackStreamingStatus = null;\n        this._trackStreamingStatusImpl = null;\n\n        /**\n         * This holds the timestamp indicating when remote video track entered forwarded sources set. Track entering\n         * forwardedSources will have streaming status restoring and when we start receiving video will become active,\n         * but if video is not received for certain time {@link DEFAULT_RESTORING_TIMEOUT} that track streaming status\n         * will become interrupted.\n         */\n        this._enteredForwardedSourcesTimestamp = null;\n\n        this.addEventListener = this.on = this._addEventListener.bind(this);\n        this.removeEventListener = this.off = this._removeEventListener.bind(this);\n\n        logger.debug(`New remote track added: ${this}`);\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindTrackHandlers();\n        }\n        this._containerHandlers = {};\n        containerEvents.forEach(event => {\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\n        });\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track handlers.\n     *\n     * @returns {void}\n     */\n    _bindTrackHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n        this.track.addEventListener('ended', () => {\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\n        });\n    }\n\n    /**\n     * Overrides addEventListener method to init TrackStreamingStatus instance when there are listeners for the\n     * {@link JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED} event.\n     *\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    _addEventListener(event, handler) {\n        super.addListener(event, handler);\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()\n            && event === JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED\n            && this.listenerCount(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED)\n            && !this._trackStreamingStatusImpl\n        ) {\n            this._initTrackStreamingStatus();\n            logger.debug(`Initializing track streaming status: ${this._sourceName}`);\n        }\n    }\n\n    /**\n     * Overrides removeEventListener method to dispose TrackStreamingStatus instance.\n     *\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    _removeEventListener(event, handler) {\n        super.removeListener(event, handler);\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()\n            && event === JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED\n            && !this.listenerCount(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED)\n        ) {\n            this._disposeTrackStreamingStatus();\n            logger.debug(`Disposing track streaming status: ${this._sourceName}`);\n        }\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Removes attached event listeners and dispose TrackStreamingStatus .\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            this._disposeTrackStreamingStatus();\n        }\n\n        return super.dispose();\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n\n    /**\n     * Returns the tracks source name\n     *\n     * @returns {string} the track's source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        if (!this.conference.room) {\n            return;\n        }\n\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) {\n        containerEvents.forEach(event => {\n            container.addEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) {\n        containerEvents.forEach(event => {\n            container.removeEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * An event handler for events triggered by the attached container.\n     *\n     * @param {string} type - The type of the event.\n     */\n    _containerEventHandler(type) {\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\n    }\n\n    /**\n     * Returns a string with a description of the current status of the track.\n     *\n     * @returns {string}\n     */\n    _getStatus() {\n        const { enabled, muted, readyState } = this.track;\n\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\n    }\n\n    /**\n     * Initializes trackStreamingStatusImpl.\n     */\n    _initTrackStreamingStatus() {\n        const config = this.conference.options.config;\n\n        this._trackStreamingStatus = TrackStreamingStatus.ACTIVE;\n\n        this._trackStreamingStatusImpl = new TrackStreamingStatusImpl(\n            this.rtc,\n            this.conference,\n            this,\n            {\n                // These options are not public API, leaving it here only as an entry point through config for\n                // tuning up purposes. Default values should be adjusted as soon as optimal values are discovered.\n                p2pRtcMuteTimeout: config._p2pConnStatusRtcMuteTimeout,\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfForwardedSourcesTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n\n        this._trackStreamingStatusImpl.init();\n\n        // In some edge cases, both browser 'unmute' and bridge's forwarded sources events are received before a\n        // LargeVideoUpdate is scheduled for auto-pinning a new screenshare track. If there are no layout changes and\n        // no further track events are received for the SS track, a black tile will be displayed for screenshare on\n        // stage. Fire a TRACK_STREAMING_STATUS_CHANGED event if the media is already being received for the remote\n        // track to prevent this from happening.\n        !this._trackStreamingStatusImpl.isVideoTrackFrozen()\n            && this.rtc.eventEmitter.emit(\n                JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED,\n                this,\n                this._trackStreamingStatus);\n    }\n\n    /**\n     * Disposes trackStreamingStatusImpl and clears trackStreamingStatus.\n     */\n    _disposeTrackStreamingStatus() {\n        if (this._trackStreamingStatusImpl) {\n            this._trackStreamingStatusImpl.dispose();\n            this._trackStreamingStatusImpl = null;\n            this._trackStreamingStatus = null;\n        }\n    }\n\n    /**\n     * Updates track's streaming status.\n     *\n     * @param {string} state the current track streaming state. {@link TrackStreamingStatus}.\n     */\n    _setTrackStreamingStatus(status) {\n        this._trackStreamingStatus = status;\n    }\n\n    /**\n     * Returns track's streaming status.\n     *\n     * @returns {string} the streaming status <tt>TrackStreamingStatus</tt> of the track. Returns null\n     * if trackStreamingStatusImpl hasn't been initialized.\n     *\n     * {@link TrackStreamingStatus}.\n     */\n    getTrackStreamingStatus() {\n        return this._trackStreamingStatus;\n    }\n\n    /**\n     * Clears the timestamp of when the track entered forwarded sources.\n     */\n    _clearEnteredForwardedSourcesTimestamp() {\n        this._enteredForwardedSourcesTimestamp = null;\n    }\n\n    /**\n     * Updates the timestamp of when the track entered forwarded sources.\n     *\n     * @param {number} timestamp the time in millis\n     */\n    _setEnteredForwardedSourcesTimestamp(timestamp) {\n        this._enteredForwardedSourcesTimestamp = timestamp;\n    }\n\n    /**\n     * Returns the timestamp of when the track entered forwarded sources.\n     *\n     * @returns {number} the time in millis\n     */\n    _getEnteredForwardedSourcesTimestamp() {\n        return this._enteredForwardedSourcesTimestamp;\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\n            this.getSSRC()}, p2p: ${this.isP2P}, sourceName: ${this._sourceName}, status: ${this._getStatus()}]`;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport transform from 'sdp-transform';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { getSourceIndexFromSourceName } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\nconst DESKTOP_SHARE_RATE = 500000;\nconst LD_BITRATE = 200000;\nconst SD_BITRATE = 700000;\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\n\nexport const HD_BITRATE = 2500000;\nexport const HD_SCALE_FACTOR = 1;\nexport const LD_SCALE_FACTOR = 4;\nexport const SD_SCALE_FACTOR = 2;\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/**\n * Handles track related operations on TraceablePeerConnection when browser is\n * running in unified plan mode.\n */\nexport class TPCUtils {\n    /**\n     * Creates a new instance for a given TraceablePeerConnection\n     *\n     * @param peerconnection - the tpc instance for which we have utility functions.\n     */\n    constructor(peerconnection) {\n        this.pc = peerconnection;\n        const bitrateSettings = this.pc.options?.videoQuality?.maxBitratesVideo;\n        const standardBitrates = {\n            low: LD_BITRATE,\n            standard: SD_BITRATE,\n            high: HD_BITRATE\n        };\n\n        // Check if the max. bitrates for video are specified through config.js videoQuality settings.\n        // Right now only VP8 bitrates are configured on the simulcast encodings, VP9 bitrates have to be\n        // configured on the SDP using b:AS line.\n        this.videoBitrates = bitrateSettings ?? standardBitrates;\n        const encodingBitrates = this.videoBitrates.VP8 ?? this.videoBitrates;\n\n        /**\n         * The startup configuration for the stream encodings that are applicable to\n         * the video stream when a new sender is created on the peerconnection. The initial\n         * config takes into account the differences in browser's simulcast implementation.\n         *\n         * Encoding parameters:\n         * active - determine the on/off state of a particular encoding.\n         * maxBitrate - max. bitrate value to be applied to that particular encoding\n         *  based on the encoding's resolution and config.js videoQuality settings if applicable.\n         * rid - Rtp Stream ID that is configured for a particular simulcast stream.\n         * scaleResolutionDownBy - the factor by which the encoding is scaled down from the\n         *  original resolution of the captured video.\n         */\n        this.localStreamEncodingsConfig = [\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? encodingBitrates.high : encodingBitrates.low,\n                rid: SIM_LAYER_1_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? HD_SCALE_FACTOR : LD_SCALE_FACTOR\n            },\n            {\n                active: true,\n                maxBitrate: encodingBitrates.standard,\n                rid: SIM_LAYER_2_RID,\n                scaleResolutionDownBy: SD_SCALE_FACTOR\n            },\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? encodingBitrates.low : encodingBitrates.high,\n                rid: SIM_LAYER_3_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? LD_SCALE_FACTOR : HD_SCALE_FACTOR\n            }\n        ];\n    }\n\n    /**\n     * Obtains stream encodings that need to be configured on the given track based\n     * on the track media type and the simulcast setting.\n     * @param {JitsiLocalTrack} localTrack\n     */\n    _getStreamEncodings(localTrack) {\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\n            return this.localStreamEncodingsConfig;\n        }\n\n        return localTrack.isVideoTrack()\n            ? [ {\n                active: true,\n                maxBitrate: this.videoBitrates.high\n            } ]\n            : [ { active: true } ];\n    }\n\n    /**\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\n     * plan since we have only one FID group per media description.\n     * @param {Object} description the webRTC session description instance for the remote\n     * description.\n     * @private\n     */\n    ensureCorrectOrderOfSsrcs(description) {\n        const parsedSdp = transform.parse(description.sdp);\n\n        parsedSdp.media.forEach(mLine => {\n            if (mLine.type === MediaType.AUDIO) {\n                return;\n            }\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\n                return;\n            }\n            let reorderedSsrcs = [];\n\n            const ssrcs = new Set();\n\n            mLine.ssrcGroups.map(group =>\n                group.ssrcs\n                    .split(' ')\n                    .filter(Boolean)\n                    .forEach(ssrc => ssrcs.add(ssrc))\n            );\n\n            ssrcs.forEach(ssrc => {\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\n\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\n            });\n            mLine.ssrcs = reorderedSsrcs;\n        });\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    /**\n     * Returns the transceiver associated with a given RTCRtpSender/RTCRtpReceiver.\n     *\n     * @param {string} mediaType - type of track associated with the transceiver 'audio' or 'video'.\n     * @param {JitsiLocalTrack} localTrack - local track to be used for lookup.\n     * @returns {RTCRtpTransceiver}\n     */\n    findTransceiver(mediaType, localTrack = null) {\n        const transceiver = localTrack?.track && localTrack.getOriginalStream()\n            ? this.pc.peerconnection.getTransceivers().find(t => t.sender?.track?.id === localTrack.getTrackId())\n            : this.pc.peerconnection.getTransceivers().find(t => t.receiver?.track?.kind === mediaType);\n\n        return transceiver;\n    }\n\n    /**\n     * Takes in a *unified plan* offer and inserts the appropriate\n     * parameters for adding simulcast receive support.\n     * @param {Object} desc - A session description object\n     * @param {String} desc.type - the type (offer/answer)\n     * @param {String} desc.sdp - the sdp content\n     *\n     * @return {Object} A session description (same format as above) object\n     * with its sdp field modified to advertise simulcast receive support\n     */\n    insertUnifiedPlanSimulcastReceive(desc) {\n        // a=simulcast line is not needed on browsers where we SDP munging is used for enabling on simulcast.\n        // Remove this check when the client switches to RID/MID based simulcast on all browsers.\n        if (browser.usesSdpMungingForSimulcast()) {\n            return desc;\n        }\n        const sdp = transform.parse(desc.sdp);\n        const idx = sdp.media.findIndex(mline => mline.type === MediaType.VIDEO);\n\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\n            // Make sure we don't have the simulcast recv line on video descriptions other than\n            // the first video description.\n            sdp.media.forEach((mline, i) => {\n                if (mline.type === MediaType.VIDEO && i !== idx) {\n                    sdp.media[i].rids = undefined;\n                    sdp.media[i].simulcast = undefined;\n\n                    // eslint-disable-next-line camelcase\n                    sdp.media[i].simulcast_03 = undefined;\n                }\n            });\n\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transform.write(sdp)\n            });\n        }\n\n        // In order of highest to lowest spatial quality\n        sdp.media[idx].rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\n        // eslint-disable-next-line max-len\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\n\n        // eslint-disable-next-line camelcase\n        sdp.media[idx].simulcast_03 = {\n            value: simulcastLine\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    }\n\n    /**\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\n    * @param {boolean} isInitiator - boolean that indicates if the endpoint is offerer in a p2p connection.\n    * @returns {void}\n    */\n    addTrack(localTrack, isInitiator) {\n        const track = localTrack.getTrack();\n\n        if (isInitiator) {\n            const streams = [];\n\n            if (localTrack.getOriginalStream()) {\n                streams.push(localTrack.getOriginalStream());\n            }\n\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\n            // to the peerconnection before a session-initiate is sent over to the peer.\n            const transceiverInit = {\n                direction: MediaDirection.SENDRECV,\n                streams,\n                sendEncodings: []\n            };\n\n            if (!browser.isFirefox()) {\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\n            }\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\n        } else {\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\n            // unused \"recv-only\" transceiver.\n            this.pc.peerconnection.addTrack(track);\n        }\n    }\n\n    /**\n     * Returns the calculated active state of the simulcast encodings based on the frame height requested for the send\n     * stream. All the encodings that have a resolution lower than the frame height requested will be enabled.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @param {number} newHeight The resolution requested for the video track.\n     * @returns {Array<boolean>}\n     */\n    calculateEncodingsActiveState(localVideoTrack, newHeight) {\n        const localTrack = localVideoTrack.getTrack();\n        const { height } = localTrack.getSettings();\n        const encodingsState = this.localStreamEncodingsConfig\n        .map(encoding => height / encoding.scaleResolutionDownBy)\n        .map((frameHeight, idx) => {\n            let active = localVideoTrack.getVideoType() === VideoType.CAMERA\n\n                // Keep the LD stream enabled even when the LD stream's resolution is higher than of the requested\n                // resolution. This can happen when camera is captured at resolutions higher than 720p but the\n                // requested resolution is 180. Since getParameters doesn't give us information about the resolutions\n                // of the simulcast encodings, we have to rely on our initial config for the simulcast streams.\n                ? newHeight > 0 && this.localStreamEncodingsConfig[idx]?.scaleResolutionDownBy === LD_SCALE_FACTOR\n                    ? true\n                    : frameHeight <= newHeight\n\n                // Keep all the encodings for desktop track active.\n                : true;\n\n            // Disable the lower spatial layers for screensharing in Unified plan when low fps screensharing is in\n            // progress. Sending all three streams often results in the browser suspending the high resolution in low\n            // b/w and cpu cases, especially on the low end machines. Suspending the low resolution streams ensures\n            // that the highest resolution stream is available always. Safari is an exception here since it does not\n            // send the desktop stream at all if only the high resolution stream is enabled.\n            if (localVideoTrack.getVideoType() === VideoType.DESKTOP\n                && this.pc._capScreenshareBitrate\n                && this.pc.usesUnifiedPlan()\n                && !browser.isWebKitBased()\n                && this.localStreamEncodingsConfig[idx].scaleResolutionDownBy !== HD_SCALE_FACTOR) {\n                active = false;\n            }\n\n            return active;\n        });\n\n        return encodingsState;\n    }\n\n    /**\n     * Returns the calculates max bitrates that need to be configured on the simulcast encodings based on the video\n     * type and other considerations associated with screenshare.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @returns {Array<number>}\n     */\n    calculateEncodingsBitrates(localVideoTrack) {\n        const videoType = localVideoTrack.getVideoType();\n        const desktopShareBitrate = this.pc.options?.videoQuality?.desktopBitrate || DESKTOP_SHARE_RATE;\n        const presenterEnabled = localVideoTrack._originalStream\n            && localVideoTrack._originalStream.id !== localVideoTrack.getStreamId();\n        const lowFpsScreenshare = localVideoTrack.getVideoType() === VideoType.DESKTOP\n            && this.pc._capScreenshareBitrate\n            && !browser.isWebKitBased();\n        const encodingsBitrates = this.localStreamEncodingsConfig\n        .map(encoding => {\n            const bitrate = lowFpsScreenshare\n\n                // For low fps screensharing, set a max bitrate of 500 Kbps when presenter is not turned on, 2500 Kbps\n                // otherwise.\n                ? presenterEnabled ? HD_BITRATE : desktopShareBitrate\n\n                // For high fps screenshare, 'maxBitrate' setting must be cleared on Chrome in plan-b, because\n                // if simulcast is enabled for screen and maxBitrates are set then Chrome will not send the\n                // desktop stream.\n                : videoType === VideoType.DESKTOP && browser.isChromiumBased() && !this.pc.usesUnifiedPlan()\n                    ? undefined\n                    : encoding.maxBitrate;\n\n            return bitrate;\n        });\n\n        return encodingsBitrates;\n    }\n\n    /**\n     * Replaces the existing track on a RTCRtpSender with the given track.\n     *\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\n     * @returns {Promise<RTCRtpTransceiver>} - resolved with the associated transceiver when done, rejected otherwise.\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n        const localTracks = this.pc.getLocalTracks(mediaType);\n        const track = newTrack?.getTrack() ?? null;\n        const isNewLocalSource = FeatureFlags.isMultiStreamSupportEnabled()\n            && localTracks?.length\n            && !oldTrack\n            && newTrack\n            && !localTracks.find(t => t === newTrack);\n        let transceiver;\n\n        // If old track exists, replace the track on the corresponding sender.\n        if (oldTrack && !oldTrack.isMuted()) {\n            transceiver = this.pc.peerconnection.getTransceivers().find(t => t.sender.track === oldTrack.getTrack());\n\n        // Find the first recvonly transceiver when more than one track of the same media type is being added to the pc.\n        // As part of the track addition, a new m-line was added to the remote description with direction set to\n        // recvonly.\n        } else if (isNewLocalSource) {\n            transceiver = this.pc.peerconnection.getTransceivers().find(\n                t => t.receiver.track.kind === mediaType\n                && t.direction === MediaDirection.RECVONLY\n\n                // Re-use any existing recvonly transceiver (if available) for p2p case.\n                && ((this.pc.isP2P && t.currentDirection === MediaDirection.RECVONLY)\n                    || (t.currentDirection === MediaDirection.INACTIVE && !t.stopped)));\n\n        // For mute/unmute operations, find the transceiver based on the track index in the source name if present,\n        // otherwise it is assumed to be the first local track that was added to the peerconnection.\n        } else {\n            transceiver = this.pc.peerconnection.getTransceivers().find(t => t.receiver.track.kind === mediaType);\n            const sourceName = newTrack?.getSourceName() ?? oldTrack?.getSourceName();\n\n            if (sourceName) {\n                const trackIndex = getSourceIndexFromSourceName(sourceName);\n\n                if (this.pc.isP2P) {\n                    transceiver = this.pc.peerconnection.getTransceivers()\n                        .filter(t => t.receiver.track.kind === mediaType)[trackIndex];\n                } else if (oldTrack) {\n                    const transceiverMid = this.pc._localTrackTransceiverMids.get(oldTrack.rtcId);\n\n                    transceiver = this.pc.peerconnection.getTransceivers().find(t => t.mid === transceiverMid);\n                } else if (trackIndex) {\n                    transceiver = this.pc.peerconnection.getTransceivers()\n                            .filter(t => t.receiver.track.kind === mediaType\n                                && t.direction !== MediaDirection.RECVONLY)[trackIndex];\n                }\n            }\n        }\n        if (!transceiver) {\n            return Promise.reject(\n                new Error(`Replace track failed - no transceiver for old: ${oldTrack}, new: ${newTrack}`));\n        }\n        logger.debug(`${this.pc} Replacing ${oldTrack} with ${newTrack}`);\n\n        return transceiver.sender.replaceTrack(track)\n            .then(() => Promise.resolve(transceiver));\n    }\n\n    /**\n    * Enables/disables audio transmission on the peer connection. When\n    * disabled the audio transceiver direction will be set to 'inactive'\n    * which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable audio media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setAudioTransferActive(active) {\n        this.setMediaTransferActive(MediaType.AUDIO, active);\n    }\n\n    /**\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\n     * @param {JitsiLocalTrack} track - the current track in use for which\n     * the encodings are to be set.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    setEncodings(track) {\n        const mediaType = track.getType();\n        const transceiver = this.findTransceiver(mediaType, track);\n        const parameters = transceiver?.sender?.getParameters();\n\n        // Resolve if the encodings are not available yet. This happens immediately after the track is added to the\n        // peerconnection on chrome in unified-plan. It is ok to ignore and not report the error here since the\n        // action that triggers 'addTrack' (like unmute) will also configure the encodings and set bitrates after that.\n        if (!parameters?.encodings?.length) {\n            return Promise.resolve();\n        }\n        parameters.encodings = this._getStreamEncodings(track);\n\n        return transceiver.sender.setParameters(parameters);\n    }\n\n    /**\n     * Enables/disables media transmission on the peerconnection by changing the direction\n     * on the transceiver for the specified media type.\n     * @param {String} mediaType - 'audio' or 'video'\n     * @param {boolean} active - true to enable media transmission or false\n     * to disable.\n     * @returns {void}\n     */\n    setMediaTransferActive(mediaType, active) {\n        const transceivers = this.pc.peerconnection.getTransceivers()\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\n\n        logger.info(`${this.pc} ${active ? 'Enabling' : 'Suspending'} ${mediaType} media transfer.`);\n        transceivers.forEach(transceiver => {\n            if (active) {\n                const localTrackMids = Array.from(this.pc._localTrackTransceiverMids);\n\n                if (localTrackMids.find(mids => mids[1] === transceiver.mid)) {\n                    transceiver.direction = MediaDirection.SENDRECV;\n                } else {\n                    transceiver.direction = MediaDirection.RECVONLY;\n                }\n            } else {\n                transceiver.direction = MediaDirection.INACTIVE;\n            }\n        });\n    }\n\n    /**\n    * Enables/disables video media transmission on the peer connection. When\n    * disabled the SDP video media direction in the local SDP will be adjusted to\n    * 'inactive' which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable video media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setVideoTransferActive(active) {\n        this.setMediaTransferActive(MediaType.VIDEO, active);\n    }\n\n    /**\n     * Ensures that the resolution of the stream encodings are consistent with the values\n     * that were configured on the RTCRtpSender when the source was added to the peerconnection.\n     * This should prevent us from overriding the default values if the browser returns\n     * erroneous values when RTCRtpSender.getParameters is used for getting the encodings info.\n     * @param {Object} parameters - the RTCRtpEncodingParameters obtained from the browser.\n     * @returns {void}\n     */\n    updateEncodingsResolution(parameters) {\n        if (!(browser.isWebKitBased() && parameters.encodings && Array.isArray(parameters.encodings))) {\n            return;\n        }\n        const allEqualEncodings\n            = encodings => encodings.every(encoding => typeof encoding.scaleResolutionDownBy !== 'undefined'\n                && encoding.scaleResolutionDownBy === encodings[0].scaleResolutionDownBy);\n\n        // Implement the workaround only when all the encodings report the same resolution.\n        if (allEqualEncodings(parameters.encodings)) {\n            parameters.encodings.forEach((encoding, idx) => {\n                encoding.scaleResolutionDownBy = this.localStreamEncodingsConfig[idx].scaleResolutionDownBy;\n            });\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { Interop } from '@jitsi/sdp-interop';\nimport transform from 'sdp-transform';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport {\n    getSourceIndexFromSourceName,\n    getSourceNameForJitsiTrack\n} from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport LocalSdpMunger from '../sdp/LocalSdpMunger';\nimport RtxModifier from '../sdp/RtxModifier';\nimport SDP from '../sdp/SDP';\nimport SDPUtil from '../sdp/SDPUtil';\nimport SdpConsistency from '../sdp/SdpConsistency';\nimport SdpSimulcast from '../sdp/SdpSimulcast';\nimport { SdpTransformWrap } from '../sdp/SdpTransformUtil';\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport RTC from './RTC';\nimport {\n    HD_BITRATE,\n    HD_SCALE_FACTOR,\n    SIM_LAYER_RIDS,\n    TPCUtils\n} from './TPCUtils';\n\n// FIXME SDP tools should end up in some kind of util module\n\nconst logger = getLogger(__filename);\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used in a peer to peer connection.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX.\n * @param {string} options.disabledCodec the mime type of the code that should not be negotiated on the peerconnection.\n * @param {string} options.preferredCodec the mime type of the codec that needs to be made the preferred codec for the\n * peerconnection.\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n * @param {boolean} options.usesUnifiedPlan Indicates if the  browser is running in unified plan mode.\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        pcConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = !(options.startSilent === true);\n\n    /**\n     * The DTMF sender instance used to send DTMF tones.\n     *\n     * @type {RTCDTMFSender|undefined}\n     * @private\n     */\n    this._dtmfSender = undefined;\n\n    /**\n     * @typedef {Object} TouchToneRequest\n     * @property {string} tones - The DTMF tones string as defined by\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n     * @property {number} duration - The amount of time in milliseconds that\n     * each DTMF should last.\n     * @property {string} interToneGap - The length of time in miliseconds to\n     * wait between tones.\n     */\n    /**\n     * TouchToneRequests which are waiting to be played. This queue is filled\n     * if there are touch tones currently being played.\n     *\n     * @type {Array<TouchToneRequest>}\n     * @private\n     */\n    this._dtmfTonesQueue = [];\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    /**\n     * The map holds remote tracks associated with this peer connection. It maps user's JID to media type and a set of\n     * remote tracks.\n     * @type {Map<string, Map<MediaType, Set<JitsiRemoteTrack>>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The DTLS transport object for the PeerConnection.\n     * Note: this assume only one shared transport exists because we bundled\n     *       all streams on the same underlying transport.\n     */\n    this._dtlsTransport = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.options = options;\n\n    // Setup SignalingLayer listeners for source-name based events.\n    this.signalingLayer.on(SignalingEvents.SOURCE_MUTED_CHANGED,\n        (sourceName, isMuted) => this._sourceMutedChanged(sourceName, isMuted));\n    this.signalingLayer.on(SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED,\n        (sourceName, videoType) => this._sourceVideoTypeChanged(sourceName, videoType));\n\n    // Make sure constraints is properly formatted in order to provide information about whether or not this\n    // connection is P2P to rtcstats.\n    const safeConstraints = constraints || {};\n\n    safeConstraints.optional = safeConstraints.optional || [];\n\n    // The `optional` parameter needs to be of type array, otherwise chrome will throw an error.\n    // Firefox and Safari just ignore it.\n    if (Array.isArray(safeConstraints.optional)) {\n        safeConstraints.optional.push({ rtcStatsSFUP2P: this.isP2P });\n    } else {\n        logger.warn('Optional param is not an array, rtcstats p2p data is omitted.');\n    }\n\n    this.peerconnection = new RTCPeerConnection(pcConfig, safeConstraints);\n\n    this.tpcUtils = new TPCUtils(this);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * Flag used to indicate if simulcast is turned off and a cap of 500 Kbps is applied on screensharing.\n     */\n    this._capScreenshareBitrate = this.options.capScreenshareBitrate;\n\n    /**\n    * Flag used to indicate if the browser is running in unified  plan mode.\n    */\n    this._usesUnifiedPlan = options.usesUnifiedPlan;\n\n    /**\n     * Flag used to indicate if RTCRtpTransceiver#setCodecPreferences is to be used instead of SDP\n     * munging for codec selection.\n     */\n    this._usesTransceiverCodecPreferences = browser.supportsCodecPreferences() && this._usesUnifiedPlan;\n    this._usesTransceiverCodecPreferences\n        && logger.info('Using RTCRtpTransceiver#setCodecPreferences for codec selection');\n\n    // We currently need these flags only for FF and that's why we are updating them only for unified plan.\n    if (this._usesUnifiedPlan) {\n        /**\n         * Indicates whether an audio track has ever been added to the peer connection.\n         */\n        this._hasHadAudioTrack = false;\n\n        /**\n         * Indicates whether a video track has ever been added to the peer connection.\n         */\n        this._hasHadVideoTrack = false;\n    }\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n\n    this.interop = new Interop();\n\n    if (this._usesUnifiedPlan) {\n        this.simulcast = new SdpSimulcast({ numOfLayers: SIM_LAYER_RIDS.length });\n    } else {\n        const Simulcast = require('@jitsi/sdp-simulcast');\n\n        this.simulcast = new Simulcast(\n            {\n                numOfLayers: SIM_LAYER_RIDS.length,\n                explodeRemoteSimulcast: false,\n                usesUnifiedPlan: false\n            });\n    }\n\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this, this.rtc.getLocalEndpointId());\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    /**\n     * The height constraint applied on the video sender. The default value is 2160 (4K) when layer suspension is\n     * explicitly disabled.\n     */\n    this._senderVideoMaxHeight = 2160;\n\n    /**\n     * The height constraints to be applied on the sender per local video source (source name as the key).\n     * @type {Map<string, number>}\n     */\n    this._senderMaxHeights = new Map();\n\n    /**\n     * Holds the RTCRtpTransceiver mids that the local tracks are attached to, mapped per their\n     * {@link JitsiLocalTrack.rtcId}.\n     * @type {Map<string, string>}\n     */\n    this._localTrackTransceiverMids = new Map();\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n\n    // Use track events when browser is running in unified plan mode and stream events in plan-b mode.\n    if (this._usesUnifiedPlan) {\n        this.onTrack = evt => {\n            const stream = evt.streams[0];\n\n            this._remoteTrackAdded(stream, evt.track, evt.transceiver);\n            stream.addEventListener('removetrack', e => {\n                this._remoteTrackRemoved(stream, e.track);\n            });\n        };\n        this.peerconnection.addEventListener('track', this.onTrack);\n    } else {\n        this.peerconnection.onaddstream = event => this._remoteStreamAdded(event.stream);\n        this.peerconnection.onremovestream = event => this._remoteStreamRemoved(event.stream);\n    }\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.onconnectionstatechange = null;\n    this.peerconnection.onconnectionstatechange = event => {\n        this.trace('onconnectionstatechange', this.connectionState);\n        if (this.onconnectionstatechange !== null) {\n            this.onconnectionstatechange(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats().then(stats => {\n                if (typeof stats?.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            });\n        }, 1000);\n    }\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @param {boolean} isAddOperation whether the direction is to be calculated after a source-add action.\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype.getDesiredMediaDirection = function(mediaType, isAddOperation = false) {\n    const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n\n    if (this._usesUnifiedPlan) {\n        return isAddOperation\n            ? hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.SENDONLY\n            : hasLocalSource ? MediaDirection.RECVONLY : MediaDirection.INACTIVE;\n    }\n\n    const mediaTransferActive = mediaType === MediaType.AUDIO ? this.audioTransferActive : this.videoTransferActive;\n\n    if (mediaTransferActive) {\n        return hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n    }\n\n    return MediaDirection.INACTIVE;\n};\n\n/**\n * Returns the list of RTCRtpReceivers created for the source of the given media type associated with\n * the set of remote endpoints specified.\n * @param {Array<string>} endpoints list of the endpoints\n * @param {string} mediaType 'audio' or 'video'\n * @returns {Array<RTCRtpReceiver>} list of receivers created by the peerconnection.\n */\nTraceablePeerConnection.prototype._getReceiversByEndpointIds = function(endpoints, mediaType) {\n    let remoteTracks = [];\n    let receivers = [];\n\n    for (const endpoint of endpoints) {\n        remoteTracks = remoteTracks.concat(this.getRemoteTracks(endpoint, mediaType));\n    }\n\n    // Get the ids of the MediaStreamTracks associated with each of these remote tracks.\n    const remoteTrackIds = remoteTracks.map(remote => remote.track?.id);\n\n    receivers = this.peerconnection.getReceivers()\n        .filter(receiver => receiver.track\n            && receiver.track.kind === mediaType\n            && remoteTrackIds.find(trackId => trackId === receiver.track.id));\n\n    return receivers;\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast;\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(endpointId, videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`${this} No endpointID on peerVideoTypeChanged`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(endpointId, mediaType, isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error(`${this} On peerMuteChanged - no endpoint ID`);\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Handles remote source mute and unmute changed events.\n *\n * @param {string} sourceName - The name of the remote source.\n * @param {boolean} isMuted - The new mute state.\n */\nTraceablePeerConnection.prototype._sourceMutedChanged = function(sourceName, isMuted) {\n    const track = this.getRemoteTracks().find(t => t.getSourceName() === sourceName);\n\n    if (!track) {\n        return;\n    }\n\n    track.setMute(isMuted);\n};\n\n/**\n * Handles remote source videoType changed events.\n *\n * @param {string} sourceName - The name of the remote source.\n * @param {boolean} isMuted - The new value.\n */\nTraceablePeerConnection.prototype._sourceVideoTypeChanged = function(sourceName, videoType) {\n    const track = this.getRemoteTracks().find(t => t.getSourceName() === sourceName);\n\n    if (!track) {\n        return;\n    }\n\n    track._setVideoType(videoType);\n};\n\n/**\n * Obtains audio levels of the remote audio tracks by getting the source information on the RTCRtpReceivers.\n * The information relevant to the ssrc is updated each time a RTP packet constaining the ssrc is received.\n * @param {Array<string>} speakerList list of endpoint ids for which audio levels are to be gathered.\n * @returns {Object} containing ssrc and audio level information as a key-value pair.\n */\nTraceablePeerConnection.prototype.getAudioLevels = function(speakerList = []) {\n    const audioLevels = {};\n    const audioReceivers = speakerList.length\n        ? this._getReceiversByEndpointIds(speakerList, MediaType.AUDIO)\n        : this.peerconnection.getReceivers()\n            .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO && receiver.track.enabled);\n\n    audioReceivers.forEach(remote => {\n        const ssrc = remote.getSynchronizationSources();\n\n        if (ssrc && ssrc.length) {\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\n        }\n    });\n\n    return audioLevels;\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Retrieves the local video tracks.\n *\n * @returns {Array<JitsiLocalTrack>} - local video tracks.\n */\nTraceablePeerConnection.prototype.getLocalVideoTracks = function() {\n    return this.getLocalTracks(MediaType.VIDEO);\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains any local tracks for given\n * <tt>mediaType</tt>.\n *\n * @param {MediaType} mediaType - The media type.\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n *\n * @param {string} [endpointId] - The track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] - The remote tracks will be filtered by their media type if this argument is\n * specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(endpointId, mediaType) {\n    let remoteTracks = [];\n    const endpoints = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTracksByMediaType = this.remoteTracks.get(endpoint);\n\n        if (endpointTracksByMediaType) {\n            for (const trackMediaType of endpointTracksByMediaType.keys()) {\n                // per media type filtering\n                if (!mediaType || mediaType === trackMediaType) {\n                    remoteTracks = remoteTracks.concat(Array.from(endpointTracksByMediaType.get(trackMediaType)));\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Parses the remote description and returns the sdp lines of the sources associated with a remote participant.\n *\n * @param {string} id Endpoint id of the remote participant.\n * @returns {Array<string>} The sdp lines that have the ssrc information.\n */\nTraceablePeerConnection.prototype.getRemoteSourceInfoByParticipant = function(id) {\n    const removeSsrcInfo = [];\n    const remoteTracks = this.getRemoteTracks(id);\n\n    if (!remoteTracks?.length) {\n        return removeSsrcInfo;\n    }\n    const primarySsrcs = remoteTracks.map(track => track.getSSRC());\n    const sdp = new SDP(this.remoteDescription.sdp);\n\n    primarySsrcs.forEach((ssrc, idx) => {\n        for (const media of sdp.media) {\n            let lines = '';\n            let ssrcLines = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n            if (ssrcLines.length) {\n                if (!removeSsrcInfo[idx]) {\n                    removeSsrcInfo[idx] = '';\n                }\n\n                // Check if there are any FID groups present for the primary ssrc.\n                const fidLines = SDPUtil.findLines(media, `a=ssrc-group:FID ${ssrc}`);\n\n                if (fidLines.length) {\n                    const secondarySsrc = fidLines[0].split(' ')[2];\n\n                    lines += `${fidLines[0]}\\r\\n`;\n                    ssrcLines = ssrcLines.concat(SDPUtil.findLines(media, `a=ssrc:${secondarySsrc}`));\n                }\n                removeSsrcInfo[idx] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                removeSsrcInfo[idx] += lines;\n            }\n        }\n    });\n\n    return removeSsrcInfo;\n};\n\n/**\n * Returns the target bitrates configured for the local video source.\n *\n * @returns {Object}\n */\nTraceablePeerConnection.prototype.getTargetVideoBitrates = function() {\n    const currentCodec = this.getConfiguredVideoCodec();\n\n    return this.tpcUtils.videoBitrates[currentCodec.toUpperCase()] || this.tpcUtils.videoBitrates;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = stream.id;\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant.\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\n * for the remote participant in unified plan.\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\n    const streamId = stream.id;\n    const mediaType = track.kind;\n\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n    logger.info(`${this} adding remote track for stream[id=${streamId},type=${mediaType}]`);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `MediaType undefined for remote track, stream id: ${streamId}`\n            ));\n\n        // Abort\n        return;\n    }\n\n    const remoteSDP = this._usesUnifiedPlan\n        ? new SDP(this.peerconnection.remoteDescription.sdp)\n        : new SDP(this.remoteDescription.sdp);\n    let mediaLines;\n\n    // In unified plan mode, find the matching mline using 'mid' if its availble, otherwise use the\n    // 'msid' attribute of the stream.\n    if (this._usesUnifiedPlan) {\n        if (transceiver && transceiver.mid) {\n            const mid = transceiver.mid;\n\n            mediaLines = remoteSDP.media.filter(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\n        } else {\n            mediaLines = remoteSDP.media.filter(mls => {\n                const msid = SDPUtil.findLine(mls, 'a=msid:');\n\n                return typeof msid !== 'undefined' && streamId === msid.substring(7).split(' ')[0];\n            });\n        }\n    } else {\n        mediaLines = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\n    }\n\n    if (!mediaLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No media lines found in remote SDP for remote stream[id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\n\n    ssrcLines\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No SSRC lines found in remote SDP for remote stream[msid=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `Invalid SSRC for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    } else if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC owner known for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n\n    let sourceName;\n\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        sourceName = this.signalingLayer.getTrackSourceName(trackSsrc);\n\n        // If source name was not signaled, we'll generate one which allows testing signaling\n        // when mixing legacy(mobile) with new clients.\n        if (!sourceName) {\n            sourceName = getSourceNameForJitsiTrack(ownerEndpointId, mediaType, 0);\n        }\n    }\n\n    // eslint-disable-next-line no-undef\n    logger.info(`${this} creating remote track[endpoint=${ownerEndpointId},ssrc=${trackSsrc},`\n        + `type=${mediaType},sourceName=${sourceName}]`);\n\n    const peerMediaInfo = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType, sourceName);\n\n    if (!peerMediaInfo) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this}: no peer media info available for ${ownerEndpointId}`));\n\n        return;\n    }\n\n    const muted = peerMediaInfo.muted;\n    const videoType = peerMediaInfo.videoType; // can be undefined\n\n    // eslint-disable-next-line no-undef\n    this._createRemoteTrack(\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted, sourceName);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n * @param {String} sourceName the track's source name\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted,\n        sourceName) {\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        remoteTracksMap.set(MediaType.AUDIO, new Set());\n        remoteTracksMap.set(MediaType.VIDEO, new Set());\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const userTracksByMediaType = remoteTracksMap.get(mediaType);\n\n    if (userTracksByMediaType?.size\n        && Array.from(userTracksByMediaType).find(jitsiTrack => jitsiTrack.getTrack() === track)) {\n        // Ignore duplicated event which can originate either from 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(`${this} ignored duplicated track event for track[endpoint=${ownerEndpointId},type=${mediaType}]`);\n\n        return;\n    } else if (userTracksByMediaType?.size && !FeatureFlags.isSourceNameSignalingEnabled()) {\n        logger.error(`${this} received a second remote track for track[endpoint=${ownerEndpointId},type=${mediaType}]`\n            + 'deleting the existing track');\n        const existingTrack = Array.from(userTracksByMediaType)[0];\n\n        // The exisiting track needs to be removed here. This happens on Safari sometimes when a SSRC is removed from\n        // the remote description and the browser doesn't fire a 'removetrack' event on the associated MediaStream.\n        this._remoteTrackRemoved(existingTrack.getOriginalStream(), existingTrack.getTrack());\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P,\n                sourceName);\n\n    userTracksByMediaType.add(remoteTrack);\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\n};\n\n/* eslint-enable max-params */\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        logger.info(`Ignored remote 'stream removed' event for stream[id=${stream.id}]`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n *\n * @param {MediaStream} stream - WebRTC MediaStream instance which is the parent of the track.\n * @param {MediaStreamTrack} track - WebRTC MediaStreamTrack which has been removed from the PeerConnection.\n * @returns {void}\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(stream, track) {\n    const streamId = stream.id;\n    const trackId = track?.id;\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream removed' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    const toBeRemoved = this.getRemoteTracks().find(\n        remoteTrack => remoteTrack.getStreamId() === streamId\n        && remoteTrack.getTrackId() === trackId);\n\n    if (!toBeRemoved) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - track not found`));\n\n        return;\n    }\n\n    logger.info(`${this} remote track removed stream[id=${streamId},trackId=${trackId}]`);\n    this._removeRemoteTrack(toBeRemoved);\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname (resource part of the JID).\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]} - The array of removed tracks.\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    let removedTracks = [];\n    const remoteTracksByMedia = this.remoteTracks.get(owner);\n\n    if (remoteTracksByMedia) {\n        removedTracks = removedTracks.concat(Array.from(remoteTracksByMedia.get(MediaType.AUDIO)));\n        removedTracks = removedTracks.concat(Array.from(remoteTracksByMedia.get(MediaType.VIDEO)));\n        this.remoteTracks.delete(owner);\n    }\n    logger.debug(`${this} removed remote tracks[endpoint=${owner},count=${removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n *\n * @param {JitsiRemoteTrack} toBeRemoved - The remote track to be removed.\n * @returns {void}\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n    const userTracksByMediaType = this.remoteTracks.get(participantId);\n\n    if (!userTracksByMediaType) {\n        logger.error(`${this} removeRemoteTrack: no remote tracks map for endpoint=${participantId}`);\n    } else if (!userTracksByMediaType.get(toBeRemoved.getType())?.delete(toBeRemoved)) {\n        logger.error(`${this} Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Returns a map with keys msid/mediaType and <tt>TrackSSRCInfo</tt> values.\n * @param {RTCSessionDescription} desc the local description.\n * @return {Map<string,TrackSSRCInfo>}\n */\nTraceablePeerConnection.prototype._extractSSRCMap = function(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid) or mediaType (unified-plan)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    let media = session.media;\n\n    // For unified plan clients, only the first audio and video mlines will have ssrcs for the local sources.\n    // The rest of the m-lines are for the recv-only sources, one for each remote source.\n    if (this._usesUnifiedPlan) {\n        if (FeatureFlags.isMultiStreamSupportEnabled()) {\n            media = media.filter(mline => mline.direction === MediaDirection.SENDONLY\n                || mline.direction === MediaDirection.SENDRECV);\n        } else {\n            media = [];\n            [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n                const mLine = session.media.find(m => m.type === mediaType);\n\n                mLine && media.push(mLine);\n            });\n        }\n    }\n\n    let index = 0;\n\n    for (const mLine of media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined' && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs = group.ssrcs.split(' ').map(ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n        }\n\n        let ssrcs = mLine.ssrcs;\n\n        // Filter the ssrcs with 'msid' attribute for plan-b clients and 'cname' for unified-plan clients.\n        ssrcs = this._usesUnifiedPlan\n            ? ssrcs.filter(s => s.attribute === 'cname')\n            : ssrcs.filter(s => s.attribute === 'msid');\n\n        for (const ssrc of ssrcs) {\n            // Use the mediaType as key for the source map for unified plan clients since msids are not part of\n            // the standard and the unified plan SDPs do not have a proper msid attribute for the sources.\n            // Also the ssrcs for sources do not change for Unified plan clients since RTCRtpSender#replaceTrack is\n            // used for switching the tracks so it is safe to use the mediaType as the key for the TrackSSRCInfo map.\n            const key = this._usesUnifiedPlan\n                ? FeatureFlags.isMultiStreamSupportEnabled() ? `${mLine.type}-${index}` : mLine.type\n                : ssrc.value;\n            const ssrcNumber = ssrc.id;\n            let ssrcInfo = ssrcMap.get(key);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid: key\n                };\n                ssrcMap.set(key, ssrcInfo);\n            }\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n\n        // Currently multi-stream is supported for video only.\n        mLine.type === MediaType.VIDEO && index++;\n    }\n\n    return ssrcMap;\n};\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `${MediaDirection.RECVONLY}-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n */\nconst enforceSendRecv = function(localDescription, options) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO)?.[0];\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== MediaDirection.SENDRECV) {\n        if (options.startSilent) {\n            audioMedia.direction = MediaDirection.INACTIVE;\n        } else {\n            audioMedia.direction = MediaDirection.SENDRECV;\n        }\n\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n    if (videoMedia && videoMedia.direction !== MediaDirection.SENDRECV) {\n        videoMedia.direction = MediaDirection.SENDRECV;\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs but no ssrc-groups on Firefox. Unfortunately, Jicofo\n * will complain if it sees ssrcs with matching msids but no ssrc-group, so a ssrc-group line is injected to make\n * Jicofo happy.\n *\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to contain an inject ssrc-group for simulcast.\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast = function(desc) {\n    const sdp = transform.parse(desc.sdp);\n    const video = sdp.media.find(mline => mline.type === 'video');\n\n    // Check if the browser supports RTX, add only the primary ssrcs to the SIM group if that is the case.\n    video.ssrcGroups = video.ssrcGroups || [];\n    const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\n\n    if (video.simulcast || video.simulcast_03) {\n        const ssrcs = [];\n\n        if (fidGroups && fidGroups.length) {\n            fidGroups.forEach(group => {\n                ssrcs.push(group.ssrcs.split(' ')[0]);\n            });\n        } else {\n            video.ssrcs.forEach(ssrc => {\n                if (ssrc.attribute === 'msid') {\n                    ssrcs.push(ssrc.id);\n                }\n            });\n        }\n        if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n            // Group already exists, no need to do anything\n            return desc;\n        }\n\n        // Add a SIM group for every 3 FID groups.\n        for (let i = 0; i < ssrcs.length; i += 3) {\n            const simSsrcs = ssrcs.slice(i, i + 3);\n\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: simSsrcs.join(' ')\n            });\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(sdp)\n    });\n};\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    connectionState() {\n        return this.peerconnection.connectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getLocalDescription no localDescription found`);\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // If the browser is running in unified plan mode and this is a jvb connection,\n        // transform the SDP to Plan B first.\n        if (this._usesUnifiedPlan && !this.isP2P) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        } else if (!this._usesUnifiedPlan) {\n            if (browser.doesVideoMuteByStreamRemove()) {\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n                logger.debug(\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\n            }\n\n            // What comes out of this getter will be signalled over Jingle to\n            // the other peer, so we need to make sure the media direction is\n            // 'sendrecv' because we won't change the direction later and don't want\n            // the other peer to think we can't send or receive.\n            //\n            // Note that the description we set in chrome does have the accurate\n            // direction (e.g. 'recvonly'), since that is technically what is\n            // happening (check setLocalDescription impl).\n            desc = enforceSendRecv(desc, this.options);\n        }\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getRemoteDescription no remoteDescription found`);\n\n            return {};\n        }\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        if (this._usesUnifiedPlan) {\n            if (this.isP2P) {\n                // Adjust the media direction for p2p based on whether a local source has been added.\n                desc = this._adjustRemoteMediaDirection(desc);\n            } else {\n                // If this is a jvb connection, transform the SDP to Plan B first.\n                desc = this.interop.toPlanB(desc);\n                this.trace('getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n            }\n        }\n\n        return desc;\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Checks if low fps screensharing is in progress.\n *\n * @private\n * @returns {boolean} Returns true if 5 fps screensharing is in progress, false otherwise.\n */\nTraceablePeerConnection.prototype.isSharingLowFpsScreen = function() {\n    return this._isSharingScreen() && this._capScreenshareBitrate;\n};\n\n/**\n * Checks if screensharing is in progress.\n *\n * @returns {boolean}  Returns true if a desktop track has been added to the peerconnection, false otherwise.\n */\nTraceablePeerConnection.prototype._isSharingScreen = function() {\n    const tracks = this.getLocalVideoTracks();\n\n    return Boolean(tracks.find(track => track.videoType === VideoType.DESKTOP));\n};\n\n/**\n * Munges the order of the codecs in the SDP passed based on the preference\n * set through config.js settings. All instances of the specified codec are\n * moved up to the top of the list when it is preferred. The specified codec\n * is deleted from the list if the configuration specifies that the codec be\n * disabled.\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeCodecOrder = function(description) {\n    if (!this.codecPreference) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n\n    // Only the m-line that defines the source the browser will be sending should need to change.\n    // This is typically the first m-line with the matching media type.\n    const mLine = parsedSdp.media.find(m => m.type === this.codecPreference.mediaType);\n\n    if (!mLine) {\n        return description;\n    }\n\n    if (this.codecPreference.enable) {\n        SDPUtil.preferCodec(mLine, this.codecPreference.mimeType);\n\n        // Strip the high profile H264 codecs on mobile clients for p2p connection.\n        // High profile codecs give better quality at the expense of higher load which\n        // we do not want on mobile clients.\n        // Jicofo offers only the baseline code for the jvb connection.\n        // TODO - add check for mobile browsers once js-utils provides that check.\n        if (this.codecPreference.mimeType === CodecMimeType.H264 && browser.isReactNative() && this.isP2P) {\n            SDPUtil.stripCodec(mLine, this.codecPreference.mimeType, true /* high profile */);\n        }\n    } else {\n        SDPUtil.stripCodec(mLine, this.codecPreference.mimeType);\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n * @param {boolean} isInitiator indicates if the endpoint is the offerer.\n * @returns {Promise<void>} - resolved when done.\n */\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\n    const rtcId = track.rtcId;\n\n    logger.info(`${this} adding ${track}`);\n\n    if (this.localTracks.has(rtcId)) {\n\n        return Promise.reject(new Error(`${track} is already in ${this}`));\n    }\n\n    this.localTracks.set(rtcId, track);\n    const webrtcStream = track.getOriginalStream();\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.addTrack using unified plan`);\n        try {\n            this.tpcUtils.addTrack(track, isInitiator);\n            if (track) {\n                if (track.isAudioTrack()) {\n                    this._hasHadAudioTrack = true;\n                } else {\n                    this._hasHadVideoTrack = true;\n                }\n            }\n        } catch (error) {\n            logger.error(`${this} Adding track=${track} failed: ${error?.message}`);\n\n            return Promise.reject(error);\n        }\n    } else {\n        // Use addStream API for the plan-b case.\n        if (webrtcStream) {\n            this._addStream(webrtcStream);\n\n        // It's not ok for a track to not have a WebRTC stream if:\n        } else if (!browser.doesVideoMuteByStreamRemove()\n                    || track.isAudioTrack()\n                    || (track.isVideoTrack() && !track.isMuted())) {\n            return Promise.reject(new Error(`${this} no WebRTC stream for track=${track}`));\n        }\n\n        // Muted video tracks do not have WebRTC stream\n        if (browser.doesVideoMuteByStreamRemove() && track.isVideoTrack() && track.isMuted()) {\n            const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n            this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n            const simGroup\n                = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n            if (simGroup) {\n                this.simulcast.setSsrcCache(simGroup.ssrcs);\n            }\n            const fidGroups\n                = ssrcInfo.groups.filter(\n                    groupInfo => groupInfo.semantics === 'FID');\n\n            if (fidGroups) {\n                const rtxSsrcMapping = new Map();\n\n                fidGroups.forEach(fidGroup => {\n                    const primarySsrc = fidGroup.ssrcs[0];\n                    const rtxSsrc = fidGroup.ssrcs[1];\n\n                    rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n                });\n                this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n            }\n        }\n    }\n    let promiseChain = Promise.resolve();\n\n    // On Firefox, the encodings have to be configured on the sender only after the transceiver is created.\n    if (browser.isFirefox()) {\n        promiseChain = promiseChain.then(() => webrtcStream && this.tpcUtils.setEncodings(track));\n    }\n\n    return promiseChain;\n};\n\n/**\n * Adds local track to the RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} track the track to be added to the pc.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's state has changed and\n * renegotiation is required, false if no renegotiation is needed or Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.addTrackToPc = function(track) {\n    logger.info(`${this} Adding track=${track} to PC`);\n\n    if (!this._assertTrackBelongs('addTrackToPc', track)) {\n        // Abort\n\n        return Promise.reject('Track not found on the peerconnection');\n    }\n\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(`${this} Unable to add track=${track} to PC - no WebRTC stream`);\n\n        return Promise.reject('Stream not found');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(null, track).then(() => {\n            if (track) {\n                if (track.isAudioTrack()) {\n                    this._hasHadAudioTrack = true;\n                } else {\n                    this._hasHadVideoTrack = true;\n                }\n            }\n\n            return false;\n        });\n    }\n\n    this._addStream(webRtcStream);\n\n    return Promise.resolve(true);\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    this.peerconnection.removeStream(mediaStream);\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack?.rtcId);\n\n    if (!doesBelong) {\n        logger.error(`${this} ${methodName}: track=${localTrack} does not belong to pc`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Returns the codec that is configured on the client as the preferred video codec.\n * This takes into account the current order of codecs in the local description sdp.\n *\n * @returns {CodecMimeType} The codec that is set as the preferred codec to receive\n * video in the local SDP.\n */\nTraceablePeerConnection.prototype.getConfiguredVideoCodec = function() {\n    const sdp = this.peerconnection.localDescription?.sdp;\n    const defaultCodec = CodecMimeType.VP8;\n\n    if (!sdp) {\n        return defaultCodec;\n    }\n    const parsedSdp = transform.parse(sdp);\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\n    const codec = mLine.rtp[0].codec;\n\n    if (codec) {\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n    }\n\n    return defaultCodec;\n};\n\n/**\n * Enables or disables simulcast for screenshare based on the frame rate requested for desktop track capture.\n *\n * @param {number} maxFps framerate to be used for desktop track capture.\n */\nTraceablePeerConnection.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    const lowFps = maxFps <= SS_DEFAULT_FRAME_RATE;\n\n    this._capScreenshareBitrate = this.isSimulcastOn() && lowFps;\n};\n\n/**\n * Sets the codec preference on the peerconnection. The codec preference goes into effect when\n * the next renegotiation happens.\n *\n * @param {CodecMimeType} preferredCodec the preferred codec.\n * @param {CodecMimeType} disabledCodec the codec that needs to be disabled.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.setVideoCodecs = function(preferredCodec = null, disabledCodec = null) {\n    // If both enable and disable are set, disable settings will prevail.\n    const enable = disabledCodec === null;\n    const mimeType = disabledCodec ? disabledCodec : preferredCodec;\n\n    if (this.codecPreference && (preferredCodec || disabledCodec)) {\n        this.codecPreference.enable = enable;\n        this.codecPreference.mimeType = mimeType;\n    } else if (preferredCodec || disabledCodec) {\n        this.codecPreference = {\n            enable,\n            mediaType: MediaType.VIDEO,\n            mimeType\n        };\n    } else {\n        logger.warn(`${this} Invalid codec settings[preferred=${preferredCodec},disabled=${disabledCodec}],\n            atleast one value is needed`);\n    }\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackFromPc}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        this.peerconnection.removeStream(webRtcStream);\n    }\n};\n\n/**\n * Returns the sender corresponding to the given media type.\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\n    if (this.peerconnection.getSenders) {\n        return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\n    }\n};\n\n/**\n * Returns the receiver corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\n * was found.\n */\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\n    return this.peerconnection.getReceivers().find(r => r.track === track);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\n    if (this.peerconnection.getSenders) {\n        return this.peerconnection.getSenders().find(s => s.track === track);\n    }\n};\n\n/**\n * Processes the local description SDP and caches the mids of the mlines associated with the given tracks.\n *\n * @param {Array<JitsiLocalTrack>} localTracks - local tracks that are added to the peerconnection.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.processLocalSdpForTransceiverInfo = function(localTracks) {\n    const localSdp = this.peerconnection.localDescription?.sdp;\n\n    if (!localSdp) {\n        return;\n    }\n\n    for (const localTrack of localTracks) {\n        const mediaType = localTrack.getType();\n        const parsedSdp = transform.parse(localSdp);\n        const mLine = parsedSdp.media.find(mline => mline.type === mediaType);\n\n        if (!this._localTrackTransceiverMids.has(localTrack.rtcId)) {\n            this._localTrackTransceiverMids.set(localTrack.rtcId, mLine.mid.toString());\n        }\n    }\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be replaced on the pc.\n * @param {JitsiLocalTrack|null} newTrack - The new track to be used.\n *\n * @returns {Promise<boolean>} - If the promise resolves with true, renegotiation will be needed.\n * Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (!(oldTrack || newTrack)) {\n        logger.info(`${this} replaceTrack called with no new track and no old track`);\n\n        return Promise.resolve();\n    }\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.replaceTrack using unified plan`);\n        const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n\n        return this.tpcUtils.replaceTrack(oldTrack, newTrack)\n            .then(transceiver => {\n                if (oldTrack) {\n                    this.localTracks.delete(oldTrack.rtcId);\n                    this._localTrackTransceiverMids.delete(oldTrack.rtcId);\n                }\n\n                if (newTrack) {\n                    if (newTrack.isAudioTrack()) {\n                        this._hasHadAudioTrack = true;\n                    } else {\n                        this._hasHadVideoTrack = true;\n                    }\n                    this._localTrackTransceiverMids.set(newTrack.rtcId, transceiver?.mid?.toString());\n                    this.localTracks.set(newTrack.rtcId, newTrack);\n                }\n\n                // Update the local SSRC cache for the case when one track gets replaced with another and no\n                // renegotiation is triggered as a result of this.\n                if (oldTrack && newTrack) {\n                    const oldTrackSSRC = this.localSSRCs.get(oldTrack.rtcId);\n\n                    if (oldTrackSSRC) {\n                        this.localSSRCs.delete(oldTrack.rtcId);\n                        this.localSSRCs.set(newTrack.rtcId, oldTrackSSRC);\n                    }\n                }\n                const mediaActive = mediaType === MediaType.AUDIO\n                    ? this.audioTransferActive\n                    : this.videoTransferActive;\n\n                // Set the transceiver direction only if media is not suspended on the connection. This happens when\n                // the client is using the p2p connection. Transceiver direction is updated when media is resumed on\n                // this connection again.\n                if (transceiver && mediaActive) {\n                    // In the scenario where we remove the oldTrack (oldTrack is not null and newTrack is null) on FF\n                    // if we change the direction to RECVONLY, create answer will generate SDP with only 1 receive\n                    // only ssrc instead of keeping all 6 ssrcs that we currently have. Stopping the screen sharing\n                    // and then starting it again will trigger 2 rounds of source-remove and source-add replacing\n                    // the 6 ssrcs for the screen sharing with 1 receive only ssrc and then removing the receive\n                    // only ssrc and adding the same 6 ssrcs. On the remote participant's side the same ssrcs will\n                    // be reused on a new m-line and if the remote participant is FF due to\n                    // https://bugzilla.mozilla.org/show_bug.cgi?id=1768729 the video stream won't be rendered.\n                    // That's why we need keep the direction to SENDRECV for FF.\n                    //\n                    // NOTE: If we return back to the approach of not removing the track for FF and instead using the\n                    // enabled property for mute or stopping screensharing we may need to change the direction to\n                    // RECVONLY if FF still sends the media even though the enabled flag is set to false.\n                    transceiver.direction\n                        = newTrack || browser.isFirefox() ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n                } else if (transceiver) {\n                    transceiver.direction = MediaDirection.INACTIVE;\n                }\n\n                // Avoid configuring the encodings on Chromium/Safari until simulcast is configured\n                // for the newly added track using SDP munging which happens during the renegotiation.\n                const configureEncodingsPromise = browser.usesSdpMungingForSimulcast() || !newTrack\n                    ? Promise.resolve()\n                    : this.tpcUtils.setEncodings(newTrack);\n\n                return configureEncodingsPromise.then(() => false);\n            });\n    }\n\n    logger.debug(`${this} TPC.replaceTrack using plan B`);\n\n    let promiseChain = Promise.resolve();\n\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        promiseChain = this.addTrack(newTrack);\n    }\n\n    return promiseChain.then(() => true);\n};\n\n/**\n * Removes local track from the RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} localTrack the local track to be removed.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's state has changed and\n * renegotiation is required, false if no renegotiation is needed or Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.removeTrackFromPc = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace('removeTrack', localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeTrack', localTrack)) {\n        // Abort - nothing to be done here\n        return Promise.reject('Track not found in the peerconnection');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(localTrack, null).then(() => false);\n    }\n\n    if (webRtcStream) {\n        logger.info(`${this} Removing track=${localTrack} from PC`);\n        this._removeStream(webRtcStream);\n\n        return Promise.resolve(true);\n    }\n\n    logger.error(`${this} removeTrack - no WebRTC stream for track=${localTrack}`);\n\n    return Promise.reject('Stream not found');\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {RTCSessionDescription} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO)?.[0];\n\n    if (audioMedia) {\n        const desiredAudioDirection = this.getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(`${this} Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"audio\" media found in the local description`);\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n    if (videoMedia) {\n        const desiredVideoDirection = this.getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(`${this} Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"video\" media found in the local description`);\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n * Adjusts the media direction on the remote description based on availability of local and remote sources in a p2p\n * media connection.\n *\n * @param {RTCSessionDescription} remoteDescription the WebRTC session description instance for the remote description.\n * @returns the transformed remoteDescription.\n * @private\n */\nTraceablePeerConnection.prototype._adjustRemoteMediaDirection = function(remoteDescription) {\n    const transformer = new SdpTransformWrap(remoteDescription.sdp);\n\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n        const media = transformer.selectMedia(mediaType)?.[0];\n        const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n        const hasRemoteSource = this.getRemoteTracks(null, mediaType).length > 0;\n\n        media.direction = hasLocalSource && hasRemoteSource\n            ? MediaDirection.SENDRECV\n            : hasLocalSource\n                ? MediaDirection.RECVONLY\n                : hasRemoteSource ? MediaDirection.SENDONLY : MediaDirection.INACTIVE;\n    });\n\n    return new RTCSessionDescription({\n        type: remoteDescription.type,\n        sdp: transformer.toRawSDP()\n    });\n};\n\n/**\n * Munges the stereo flag as well as the opusMaxAverageBitrate in the SDP, based\n * on values set through config.js, if present.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeOpus = function(description) {\n    const { audioQuality } = this.options;\n\n    if (!audioQuality?.enableOpusDtx && !audioQuality?.stereo && !audioQuality?.opusMaxAverageBitrate) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        if (mLine.type === 'audio') {\n            const { payload } = mLine.rtp.find(protocol => protocol.codec === CodecMimeType.OPUS);\n\n            if (!payload) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let fmtpOpus = mLine.fmtp.find(protocol => protocol.payload === payload);\n\n            if (!fmtpOpus) {\n                fmtpOpus = {\n                    payload,\n                    config: ''\n                };\n            }\n\n            const fmtpConfig = transform.parseParams(fmtpOpus.config);\n            let sdpChanged = false;\n\n            if (audioQuality?.stereo) {\n                fmtpConfig.stereo = 1;\n                sdpChanged = true;\n            }\n\n            if (audioQuality?.opusMaxAverageBitrate) {\n                fmtpConfig.maxaveragebitrate = audioQuality.opusMaxAverageBitrate;\n                sdpChanged = true;\n            }\n\n            // On Firefox, the OpusDtx enablement has no effect\n            if (!browser.isFirefox() && audioQuality?.enableOpusDtx) {\n                fmtpConfig.usedtx = 1;\n                sdpChanged = true;\n            }\n\n            if (!sdpChanged) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let mungedConfig = '';\n\n            for (const key of Object.keys(fmtpConfig)) {\n                mungedConfig += `${key}=${fmtpConfig[key]}; `;\n            }\n\n            fmtpOpus.config = mungedConfig.trim();\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Munges the SDP to set all directions to inactive and drop all ssrc and ssrc-groups.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeInactive = function(description) {\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        mLine.direction = MediaDirection.INACTIVE;\n        mLine.ssrcs = undefined;\n        mLine.ssrcGroups = undefined;\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Sets up the _dtlsTransport object and initializes callbacks for it.\n */\nTraceablePeerConnection.prototype._initializeDtlsTransport = function() {\n    // We are assuming here that we only have one bundled transport here\n    if (!this.peerconnection.getSenders || this._dtlsTransport) {\n        return;\n    }\n\n    const senders = this.peerconnection.getSenders();\n\n    if (senders.length !== 0 && senders[0].transport) {\n        this._dtlsTransport = senders[0].transport;\n\n        this._dtlsTransport.onerror = error => {\n            logger.error(`${this} DtlsTransport error: ${error}`);\n        };\n\n        this._dtlsTransport.onstatechange = () => {\n            this.trace('dtlsTransport.onstatechange', this._dtlsTransport.state);\n        };\n    }\n};\n\n/**\n * Sets the max bitrates on the video m-lines when VP9 is the selected codec.\n *\n * @param {RTCSessionDescription} description - The local description that needs to be munged.\n * @param {boolean} isLocalSdp - Whether the max bitrate (via b=AS line in SDP) is set on local SDP.\n * @returns RTCSessionDescription\n */\nTraceablePeerConnection.prototype._setVp9MaxBitrates = function(description, isLocalSdp = false) {\n    if (!this.codecPreference) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n\n    // Find all the m-lines associated with the local sources.\n    const direction = isLocalSdp ? MediaDirection.RECVONLY : MediaDirection.SENDONLY;\n    const mLines = FeatureFlags.isMultiStreamSupportEnabled()\n        ? parsedSdp.media.filter(m => m.type === MediaType.VIDEO && m.direction !== direction)\n        : [ parsedSdp.media.find(m => m.type === MediaType.VIDEO) ];\n\n    // Find the mid associated with the desktop track so that bitrates can be configured accordingly on the\n    // corresponding m-line.\n    const getDesktopTrackMid = () => {\n        const desktopTrack = this.getLocalVideoTracks().find(track => track.getVideoType() === VideoType.DESKTOP);\n        let mid;\n\n        if (desktopTrack) {\n            const trackIndex = Number(desktopTrack.getSourceName()?.split('-')[1].substring(1));\n\n            if (typeof trackIndex === 'number') {\n                const transceiver = this.peerconnection.getTransceivers()\n                    .filter(t => t.receiver.track.kind === MediaType.VIDEO\n                        && t.direction !== MediaDirection.RECVONLY)[trackIndex];\n\n                mid = transceiver?.mid;\n            }\n        }\n\n        return Number(mid);\n    };\n\n    for (const mLine of mLines) {\n        if (this.codecPreference.mimeType === CodecMimeType.VP9) {\n            const bitrates = this.tpcUtils.videoBitrates.VP9 || this.tpcUtils.videoBitrates;\n            const hdBitrate = bitrates.high ? bitrates.high : HD_BITRATE;\n            const mid = mLine.mid;\n            const isSharingScreen = FeatureFlags.isMultiStreamSupportEnabled()\n                ? mid === getDesktopTrackMid()\n                : this._isSharingScreen();\n            const limit = Math.floor((isSharingScreen ? HD_BITRATE : hdBitrate) / 1000);\n\n            // Use only the HD bitrate for now as there is no API available yet for configuring\n            // the bitrates on the individual SVC layers.\n            mLine.bandwidth = [ {\n                type: 'AS',\n                limit\n            } ];\n        } else {\n            // Clear the bandwidth limit in SDP when VP9 is no longer the preferred codec.\n            // This is needed on react native clients as react-native-webrtc returns the\n            // SDP that the application passed instead of returning the SDP off the native side.\n            // This line automatically gets cleared on web on every renegotiation.\n            mLine.bandwidth = undefined;\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Configures the stream encodings depending on the video type and the bitrates configured.\n *\n * @param {JitsiLocalTrack} - The local track for which the sender encodings have to configured.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.configureSenderVideoEncodings = function(localVideoTrack = null) {\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        if (localVideoTrack) {\n            return this.setSenderVideoConstraints(\n                this._senderMaxHeights.get(localVideoTrack.getSourceName()),\n                localVideoTrack);\n        }\n        const promises = [];\n\n        for (const track of this.getLocalVideoTracks()) {\n            promises.push(this.setSenderVideoConstraints(this._senderMaxHeights.get(track.getSourceName()), track));\n        }\n\n        return Promise.allSettled(promises);\n    }\n\n    let localTrack = localVideoTrack;\n\n    if (!localTrack) {\n        localTrack = this.getLocalVideoTracks()[0];\n    }\n\n    return this.setSenderVideoConstraints(this._senderVideoMaxHeight, localTrack);\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localDescription = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localDescription));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    localDescription = this._mungeOpus(localDescription);\n\n    if (!this._usesUnifiedPlan) {\n        localDescription = this._adjustLocalMediaDirection(localDescription);\n        localDescription = this._ensureSimulcastGroupIsLast(localDescription);\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js.\n    localDescription = this._mungeCodecOrder(localDescription);\n    localDescription = this._setVp9MaxBitrates(localDescription, true);\n\n    this.trace('setLocalDescription::postTransform', dumpSDP(localDescription));\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localDescription)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localDescription.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n\n                this._initializeDtlsTransport();\n\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED, err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Enables/disables audio media transmission on this peer connection. When\n * disabled the SDP audio media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\n    logger.debug(`${this} audio transfer active: ${active}`);\n    const changed = this.audioTransferActive !== active;\n\n    this.audioTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setAudioTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    let remoteDescription = description;\n\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    remoteDescription = this._mungeOpus(remoteDescription);\n\n    if (this._usesUnifiedPlan) {\n        // Translate the SDP to Unified plan format first for the jvb case, p2p case will only have 2 m-lines.\n        if (!this.isP2P) {\n            const currentDescription = this.peerconnection.remoteDescription;\n\n            remoteDescription = this.interop.toUnifiedPlan(remoteDescription, currentDescription);\n            this.trace('setRemoteDescription::postTransform (Unified)', dumpSDP(remoteDescription));\n\n            if (FeatureFlags.isRunInLiteModeEnabled()) {\n                remoteDescription = this._mungeInactive(remoteDescription);\n            }\n        }\n        if (this.isSimulcastOn()) {\n            remoteDescription = this.tpcUtils.insertUnifiedPlanSimulcastReceive(remoteDescription);\n            this.trace('setRemoteDescription::postTransform (sim receive)', dumpSDP(remoteDescription));\n        }\n        remoteDescription = this.tpcUtils.ensureCorrectOrderOfSsrcs(remoteDescription);\n        this.trace('setRemoteDescription::postTransform (correct ssrc order)', dumpSDP(remoteDescription));\n    } else {\n        if (this.isSimulcastOn()) {\n            // Implode the simulcast ssrcs so that the remote sdp has only the first ssrc in the SIM group.\n            remoteDescription = this.simulcast.mungeRemoteDescription(\n                remoteDescription,\n                true /* add x-google-conference flag */);\n            this.trace('setRemoteDescription::postTransform (simulcast)', dumpSDP(remoteDescription));\n        }\n        remoteDescription = normalizePlanB(remoteDescription);\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js.\n    remoteDescription = this._mungeCodecOrder(remoteDescription);\n    remoteDescription = this._setVp9MaxBitrates(remoteDescription);\n    this.trace('setRemoteDescription::postTransform (munge codec order)', dumpSDP(remoteDescription));\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(remoteDescription.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n\n                this._initializeDtlsTransport();\n\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED, err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Changes the resolution of the video stream that is sent to the peer based on the resolution requested by the peer\n * and user preference, sets the degradation preference on the sender based on the video type, configures the maximum\n * bitrates on the send stream.\n *\n * @param {number} frameHeight - The max frame height to be imposed on the outgoing video stream.\n * @param {JitsiLocalTrack} - The local track for which the sender constraints have to be applied.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.setSenderVideoConstraints = function(frameHeight, localVideoTrack) {\n    if (frameHeight < 0) {\n        throw new Error(`Invalid frameHeight: ${frameHeight}`);\n    }\n\n    // XXX: This is not yet supported on mobile.\n    if (browser.isReactNative()) {\n        return Promise.resolve();\n    }\n\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        this._senderMaxHeights.set(localVideoTrack.getSourceName(), frameHeight);\n    } else {\n        this._senderVideoMaxHeight = frameHeight;\n    }\n\n    if (!localVideoTrack || localVideoTrack.isMuted()) {\n        return Promise.resolve();\n    }\n    const videoSender = this.findSenderForTrack(localVideoTrack.getTrack());\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!parameters?.encodings?.length) {\n        return Promise.resolve();\n    }\n\n    const isSharingLowFpsScreen = localVideoTrack.getVideoType() === VideoType.DESKTOP && this._capScreenshareBitrate;\n\n    // Set the degradation preference.\n    const preference = isSharingLowFpsScreen\n        ? DEGRADATION_PREFERENCE_DESKTOP // Prefer resolution for low fps share.\n        : DEGRADATION_PREFERENCE_CAMERA; // Prefer frame-rate for high fps share and camera.\n\n    parameters.degradationPreference = preference;\n    logger.info(`${this} Setting degradation preference [preference=${preference},track=${localVideoTrack}`);\n\n    // Calculate the encodings active state based on the resolution requested by the bridge.\n    this.encodingsEnabledState = this.tpcUtils.calculateEncodingsActiveState(localVideoTrack, frameHeight);\n    const maxBitrates = this.tpcUtils.calculateEncodingsBitrates(localVideoTrack);\n    const videoType = localVideoTrack.getVideoType();\n\n    if (this.isSimulcastOn()) {\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings.hasOwnProperty(encoding)) {\n                parameters.encodings[encoding].active = this.encodingsEnabledState[encoding];\n\n                // Firefox doesn't follow the spec and lets application specify the degradation preference on the\n                // encodings.\n                browser.isFirefox() && (parameters.encodings[encoding].degradationPreference = preference);\n\n                if (this.getConfiguredVideoCodec() === CodecMimeType.VP8\n                    && (this.options?.videoQuality?.maxBitratesVideo\n                        || isSharingLowFpsScreen\n                        || this._usesUnifiedPlan)) {\n                    parameters.encodings[encoding].maxBitrate = maxBitrates[encoding];\n                }\n            }\n        }\n        this.tpcUtils.updateEncodingsResolution(parameters);\n\n    // For p2p and cases and where simulcast is explicitly disabled.\n    } else if (frameHeight > 0) {\n        let scaleFactor = HD_SCALE_FACTOR;\n\n        // Do not scale down encodings for desktop tracks for non-simulcast case.\n        if (videoType === VideoType.CAMERA && localVideoTrack.resolution > frameHeight) {\n            scaleFactor = Math.floor(localVideoTrack.resolution / frameHeight);\n        }\n\n        parameters.encodings[0].active = true;\n        parameters.encodings[0].scaleResolutionDownBy = scaleFactor;\n\n        // Firefox doesn't follow the spec and lets application specify the degradation preference on the encodings.\n        browser.isFirefox() && (parameters.encodings[0].degradationPreference = preference);\n\n        // Configure the bitrate.\n        if (this.getConfiguredVideoCodec() === CodecMimeType.VP8 && this.options?.videoQuality?.maxBitratesVideo) {\n            let bitrate = this.getTargetVideoBitrates()?.high;\n\n            if (videoType === VideoType.CAMERA) {\n                bitrate = this.tpcUtils.localStreamEncodingsConfig\n                    .find(layer => layer.scaleResolutionDownBy === scaleFactor)?.maxBitrate ?? bitrate;\n            }\n            parameters.encodings[0].maxBitrate = bitrate;\n        }\n    } else {\n        parameters.encodings[0].active = false;\n    }\n\n    logger.info(`${this} setting max height=${frameHeight},encodings=${JSON.stringify(parameters.encodings)}`);\n\n    return videoSender.setParameters(parameters).then(() => {\n        localVideoTrack.maxEnabledResolution = frameHeight;\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\n    });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setVideoTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\n/**\n * Sends DTMF tones if possible.\n *\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\n *\n * @returns {void}\n */\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\n    if (!this._dtmfSender) {\n        if (this.peerconnection.getSenders) {\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\n\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\n        }\n\n        if (!this._dtmfSender) {\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\n\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\n            }\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\n        }\n\n        if (this._dtmfSender) {\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\n        }\n    }\n\n    if (this._dtmfSender) {\n        if (this._dtmfSender.toneBuffer) {\n            this._dtmfTonesQueue.push({\n                tones,\n                duration,\n                interToneGap\n            });\n\n            return;\n        }\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    } else {\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\n    }\n};\n\n/**\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\n * a single tone.\n *\n * @param {Object} event - The tonechange event which indicates what characters\n * are left to be played for the current tone.\n * @private\n * @returns {void}\n */\nTraceablePeerConnection.prototype._onToneChange = function(event) {\n    // An empty event.tone indicates the current tones have finished playing.\n    // Automatically start playing any queued tones on finish.\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    }\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC=${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info(`${this} Clearing primary video SSRC!`);\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n    this._usesUnifiedPlan && this.peerconnection.removeEventListener('track', this.onTrack);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTracks of peerTracks.values()) {\n            for (const remoteTrack of remoteTracks) {\n                this._removeRemoteTrack(remoteTrack);\n            }\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    this._dtmfSender = null;\n    this._dtmfTonesQueue = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error(`${this} RTC._removePeerConnection returned false`);\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`${this} Closing peerconnection`);\n    this.peerconnection.close();\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            if (!this._usesUnifiedPlan) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            const localVideoTrack = this.getLocalVideoTracks()[0];\n\n            // Configure simulcast for camera tracks and for desktop tracks that need simulcast.\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\n                && (localVideoTrack?.getVideoType() === VideoType.CAMERA\n                || this._usesUnifiedPlan)) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(`create${logName} OnSuccess::postTransform (simulcast)`, dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            const ssrcMap = this._extractSSRCMap(resultSdp);\n\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`${this} create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    // Set the codec preference before creating an offer or answer so that the generated SDP will have\n    // the correct preference order.\n    if (this._usesTransceiverCodecPreferences) {\n        const transceiver = this.peerconnection.getTransceivers()\n            .find(t => t.receiver && t.receiver?.track?.kind === MediaType.VIDEO);\n\n        if (transceiver) {\n            let capabilities = RTCRtpReceiver.getCapabilities(MediaType.VIDEO)?.codecs;\n            const mimeType = this.codecPreference?.mimeType;\n            const enable = this.codecPreference?.enable;\n\n            if (capabilities && mimeType && enable) {\n                // Move the desired codec (all variations of it as well) to the beginning of the list.\n                /* eslint-disable-next-line arrow-body-style */\n                capabilities.sort(caps => {\n                    return caps.mimeType.toLowerCase() === `${MediaType.VIDEO}/${mimeType}` ? -1 : 1;\n                });\n            } else if (capabilities && mimeType) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${mimeType}`);\n            }\n\n            // Disable ulpfec on Google Chrome and derivatives because\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1276427\n            if (browser.isChromiumBased()) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${CodecMimeType.ULPFEC}`);\n            }\n\n            try {\n                transceiver.setCodecPreferences(capabilities);\n            } catch (err) {\n                logger.warn(`${this} Setting codec[preference=${mimeType},enable=${enable}] failed`, err);\n            }\n        }\n    }\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n};\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        let sourceIndex, sourceName;\n\n        if (FeatureFlags.isMultiStreamSupportEnabled()) {\n            sourceName = track.getSourceName();\n            sourceIndex = getSourceIndexFromSourceName(sourceName);\n        }\n\n        const sourceIdentifier = this._usesUnifiedPlan\n            ? FeatureFlags.isMultiStreamSupportEnabled()\n                ? `${track.getType()}-${sourceIndex}` : track.getType()\n            : track.storedMSID;\n\n        if (ssrcMap.has(sourceIdentifier)) {\n            const newSSRC = ssrcMap.get(sourceIdentifier);\n\n            if (!newSSRC) {\n                logger.error(`${this} No SSRC found for stream=${sourceIdentifier}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                oldSSRCNum && logger.error(`${this} Overwriting SSRC for track=${track}] with ssrc=${newSSRC}`);\n                this.localSSRCs.set(track.rtcId, newSSRC);\n                this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`${this} No SSRCs found in the local SDP for track=${track}, stream=${sourceIdentifier}`);\n        }\n    }\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Returns the number of simulcast streams that are currently enabled on the peerconnection.\n *\n * @returns {number} The number of simulcast streams currently enabled or 1 when simulcast is disabled.\n */\nTraceablePeerConnection.prototype.getActiveSimulcastStreams = function() {\n    let activeStreams = 1;\n\n    if (this.isSimulcastOn() && this.encodingsEnabledState) {\n        activeStreams = this.encodingsEnabledState.filter(stream => Boolean(stream))?.length;\n    } else if (this.isSimulcastOn()) {\n        activeStreams = SIM_LAYER_RIDS.length;\n    }\n\n    return activeStreams;\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @returns {Promise<Object>} Promise which resolves with data providing statistics about\n * the peerconnection.\n */\nTraceablePeerConnection.prototype.getStats = function() {\n    return this.peerconnection.getStats();\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`${this} Overwriting local SSRCs for track id=${rtcId}`);\n    }\n\n    // Configure simulcast for camera tracks and desktop tracks that need simulcast.\n    if (this.isSimulcastOn()\n        && (track.getVideoType() === VideoType.CAMERA || !this.isSharingLowFpsScreen())) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\n/**\n * Returns if the peer connection uses Unified plan implementation.\n *\n * @returns {boolean} True if the pc uses Unified plan, false otherwise.\n */\nTraceablePeerConnection.prototype.usesUnifiedPlan = function() {\n    return this._usesUnifiedPlan;\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[id=${this.id},type=${this.isP2P ? 'P2P' : 'JVB'}]`;\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport BridgeVideoType from '../../service/RTC/BridgeVideoType';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\n\nimport BridgeChannel from './BridgeChannel';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport RTCUtils from './RTCUtils';\nimport TraceablePeerConnection from './TraceablePeerConnection';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type,\n *     effects: Array of effect types\n * }}\n */\nfunction _createLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType,\n            effects\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null,\n            effects\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = undefined;\n\n        /**\n         * Defines the last N endpoints list. It can be null or an array once\n         * initialised with a channel last N event.\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._lastNEndpoints = null;\n\n        /**\n         * Defines the forwarded sources list. It can be null or an array once initialised with a channel forwarded\n         * sources event.\n         *\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._forwardedSources = null;\n\n        /**\n         * The number representing the maximum video height the local client\n         * should receive from the bridge.\n         *\n         * @type {number|undefined}\n         * @private\n         */\n        this._maxFrameHeight = undefined;\n\n        /**\n         * The endpoint IDs of currently selected participants.\n         *\n         * @type {Array}\n         * @private\n         */\n        this._selectedEndpoints = null;\n\n        // The last N change listener.\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\n\n        // The forwarded sources change listener.\n        this._forwardedSourcesChangeListener = this._onForwardedSourcesChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks\n            = this._updateAudioOutputForAudioTracks.bind(this);\n\n        /**\n         * The default video type assumed by the bridge.\n         * @deprecated this will go away with multiple streams support\n         * @type {BridgeVideoType}\n         * @private\n         */\n        this._videoType = BridgeVideoType.NONE;\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED, this._updateAudioOutputForAudioTracks);\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_CHANGED, this._onDeviceListChanged);\n\n        if (this._channelOpenListener) {\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static createLocalTracks(tracksInfo) {\n        return _createLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {Array=} options.devices The devices that will be requested.\n     * @param {string=} options.resolution Resolution constraints.\n     * @param {string=} options.cameraDeviceId\n     * @param {string=} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        return RTCUtils.obtainAudioAndVideoPermissions(options)\n            .then(tracksInfo => _createLocalTracks(tracksInfo));\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(peerconnection, wsUrl, this.eventEmitter);\n\n        this._channelOpenListener = () => {\n            const logError = (error, msgType, value) => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(`Cannot send ${msgType}(${JSON.stringify(value)}) endpoint message`, error);\n            };\n\n            // When the channel becomes available, tell the bridge about video selections so that it can do adaptive\n            // simulcast, we want the notification to trigger even if userJid is undefined, or null.\n            if (this._receiverVideoConstraints) {\n                try {\n                    this._channel.sendNewReceiverVideoConstraintsMessage(this._receiverVideoConstraints);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraints', this._receiverVideoConstraints);\n                }\n            }\n            if (this._selectedEndpoints) {\n                try {\n                    this._channel.sendSelectedEndpointsMessage(this._selectedEndpoints);\n                } catch (error) {\n                    logError(error, 'SelectedEndpointsChangedEvent', this._selectedEndpoints);\n                }\n            }\n            if (typeof this._maxFrameHeight !== 'undefined') {\n                try {\n                    this._channel.sendReceiverVideoConstraintMessage(this._maxFrameHeight);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraint', this._maxFrameHeight);\n                }\n            }\n            if (typeof this._lastN !== 'undefined' && this._lastN !== -1) {\n                try {\n                    this._channel.sendSetLastNMessage(this._lastN);\n                } catch (error) {\n                    logError(error, 'LastNChangedEvent', this._lastN);\n                }\n            }\n            if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n                try {\n                    this._channel.sendVideoTypeMessage(this._videoType);\n                } catch (error) {\n                    logError(error, 'VideoTypeMessage', this._videoType);\n                }\n            }\n        };\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n\n        // Add Last N change listener.\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            // Add forwarded sources change listener.\n            this.addListener(RTCEvents.FORWARDED_SOURCES_CHANGED, this._forwardedSourcesChangeListener);\n        }\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when Last N had changed.\n     * @param {array} lastNEndpoints The new Last N endpoints.\n     * @private\n     */\n    _onLastNChanged(lastNEndpoints = []) {\n        const oldLastNEndpoints = this._lastNEndpoints || [];\n        let leavingLastNEndpoints = [];\n        let enteringLastNEndpoints = [];\n\n        this._lastNEndpoints = lastNEndpoints;\n\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\n            id => !this.isInLastN(id));\n\n        enteringLastNEndpoints = lastNEndpoints.filter(\n            id => oldLastNEndpoints.indexOf(id) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            leavingLastNEndpoints,\n            enteringLastNEndpoints);\n    }\n\n    /**\n     * Receives events when forwarded sources had changed.\n     *\n     * @param {array} forwardedSources The new forwarded sources.\n     * @private\n     */\n    _onForwardedSourcesChanged(forwardedSources = []) {\n        const oldForwardedSources = this._forwardedSources || [];\n        let leavingForwardedSources = [];\n        let enteringForwardedSources = [];\n        const timestamp = Date.now();\n\n        this._forwardedSources = forwardedSources;\n\n        leavingForwardedSources = oldForwardedSources.filter(sourceName => !this.isInForwardedSources(sourceName));\n\n        enteringForwardedSources = forwardedSources.filter(\n            sourceName => oldForwardedSources.indexOf(sourceName) === -1);\n\n        logger.debug(`Fowarded sources changed leaving=${leavingForwardedSources}, entering=`\n            + `${enteringForwardedSources} at ${timestamp}`);\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED,\n            leavingForwardedSources,\n            enteringForwardedSources,\n            timestamp);\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Sets the capture frame rate to be used for desktop tracks.\n     *\n     * @param {number} maxFps framerate to be used for desktop track capture.\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        RTCUtils.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Sets the receiver video constraints that determine how bitrate is allocated to each of the video streams\n     * requested from the bridge. The constraints are cached and sent through the bridge channel once the channel\n     * is established.\n     * @param {*} constraints\n     */\n    setNewReceiverVideoConstraints(constraints) {\n        this._receiverVideoConstraints = constraints;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendNewReceiverVideoConstraintsMessage(constraints);\n        }\n    }\n\n    /**\n     * Sets the maximum video size the local participant should receive from\n     * remote participants. Will cache the value and send it through the channel\n     * once it is created.\n     *\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n     * this receiver is willing to receive.\n     * @returns {void}\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sets the video type and availability for the local video source.\n     *\n     * @param {string} videoType 'camera' for camera, 'desktop' for screenshare and\n     * 'none' for when local video source is muted or removed from the peerconnection.\n     * @returns {void}\n     */\n    setVideoType(videoType) {\n        if (this._videoType !== videoType) {\n            this._videoType = videoType;\n\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendVideoTypeMessage(videoType);\n            }\n        }\n    }\n\n    /**\n     * Sends the track's  video type to the JVB.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {BridgeVideoType} videoType - the track's video type.\n     */\n    sendSourceVideoType(sourceName, videoType) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSourceVideoTypeMessage(sourceName, videoType);\n        }\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected\n     * participants in order to always receive video for this participant (even\n     * when last n is enabled). If there is no channel we store it and send it\n     * through the channel once it is created.\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSelectedEndpointsMessage(ids);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will provide information about the media or\n     * participants which is not carried over SDP.\n     * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.enableInsertableStreams - Set to true when the insertable streams constraints is to be\n     * enabled on the PeerConnection.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the RTX.\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, pcConfig, isP2P, options) {\n        const pcConstraints = JSON.parse(JSON.stringify(RTCUtils.pcConstraints));\n\n        if (options.enableInsertableStreams) {\n            logger.debug('E2EE - setting insertable streams constraints');\n            pcConfig.encodedInsertableStreams = true;\n        }\n\n        const supportsSdpSemantics = browser.isReactNative()\n            || (browser.isChromiumBased() && !options.usesUnifiedPlan);\n\n        if (supportsSdpSemantics) {\n            logger.debug('WebRTC application is running in plan-b mode');\n            pcConfig.sdpSemantics = 'plan-b';\n        }\n\n        if (options.forceTurnRelay) {\n            pcConfig.iceTransportPolicy = 'relay';\n        }\n\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\n        // The default policy generates separate ice candidates for audio and video connections.\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\n        pcConfig.bundlePolicy = 'max-bundle';\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                pcConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Get forwarded sources list.\n     * @returns {Array<string>|null}\n     */\n    getForwardedSources() {\n        return this._forwardedSources;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Returns all the local video tracks.\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    getLocalVideoTracks() {\n        return this.getLocalTracks(MediaType.VIDEO);\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the endpoint id for the local user.\n     * @returns {string}\n     */\n    getLocalEndpointId() {\n        return this.conference.myUserId();\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n    * Set mute for all local video streams attached to the conference.\n    * @param value The mute value.\n    * @returns {Promise}\n    */\n    setVideoMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.VIDEO).concat(this.getLocalTracks(MediaType.PRESENTER))\n            .forEach(videoTrack => {\n                // this is a Promise\n                mutePromises.push(value ? videoTrack.mute() : videoTrack.unmute());\n            });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns true if retrieving the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    static arePermissionsGrantedForAvailableDevices() {\n        return RTCUtils.arePermissionsGrantedForAvailableDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(stream.id);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channel = null;\n\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Sends the local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendEndpointStatsMessage(payload);\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the endpoint id is currently included in the last N.\n     * @param {string} id The endpoint id that we check for last N.\n     * @returns {boolean} true if the endpoint id is in the last N or if we\n     * don't have bridge channel support, otherwise we return false.\n     */\n    isInLastN(id) {\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\n            || this._lastNEndpoints.indexOf(id) > -1;\n    }\n\n    /**\n     * Indicates if the source name is currently included in the forwarded sources.\n     *\n     * @param {string} sourceName The source name that we check for forwarded sources.\n     * @returns {boolean} true if the source name is in the forwarded sources or if we don't have bridge channel\n     * support, otherwise we return false.\n     */\n    isInForwardedSources(sourceName) {\n        return !this._forwardedSources // forwardedSources not initialised yet.\n            || this._forwardedSources.indexOf(sourceName) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","export enum ConnectionQualityEvents {\n    /**\n     * Indicates that the local connection statistics were updated.\n     */\n    LOCAL_STATS_UPDATED = 'cq.local_stats_updated',\n\n    /**\n     * Indicates that the connection statistics for a particular remote participant\n     * were updated.\n     */\n    REMOTE_STATS_UPDATED = 'cq.remote_stats_updated'\n};\n\n// exported for backward compatibility\nexport const LOCAL_STATS_UPDATED = ConnectionQualityEvents.LOCAL_STATS_UPDATED;\nexport const REMOTE_STATS_UPDATED = ConnectionQualityEvents.REMOTE_STATS_UPDATED;\n\n","import { getLogger } from '@jitsi/logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport browser from '../browser';\n\nconst Resolutions = require('../../service/RTC/Resolutions');\nconst { VideoType } = require('../../service/RTC/VideoType');\nconst { XMPPEvents } = require('../../service/xmpp/XMPPEvents');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\n/**\n * The value to use for the \"type\" field for messages sent\n * over the data channel that contain a face landmark.\n */\nconst FACE_LANDMARK_MESSAGE_TYPE = 'face_landmark';\n\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        target: 'high',\n        targetRN: 4000000 },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        target: 'high',\n        targetRN: 2500000 },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        target: 'standard',\n        targetRN: 900000 },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        target: 'standard',\n        targetRN: 500000 },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        target: 'low',\n        targetRN: 350000 },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        target: 'low',\n        targetRN: 150000 }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending video started.\n * @param videoQualitySettings {Object} the bitrate and codec settings for the local video source.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart, videoQualitySettings) {\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    // Find the first format with height no bigger than ours.\n    let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n    if (simulcastFormat && simulcast && videoQualitySettings.codec === CodecMimeType.VP8) {\n        // Sum the target fields from all simulcast layers for the given\n        // resolution (e.g. 720p + 360p + 180p) for VP8 simulcast.\n        for (height = simulcastFormat.height; height >= 180; height /= 2) {\n            const targetHeight = height;\n\n            simulcastFormat = kSimulcastFormats.find(f => f.height === targetHeight);\n            if (simulcastFormat) {\n                target += browser.isReactNative()\n                    ? simulcastFormat.targetRN\n                    : videoQualitySettings[simulcastFormat.target];\n            } else {\n                break;\n            }\n        }\n    } else if (simulcastFormat) {\n        // For VP9 SVC, H.264 (simulcast automatically disabled) and p2p, target bitrate will be\n        // same as that of the individual stream bitrate.\n        target = browser.isReactNative()\n            ? simulcastFormat.targetRN\n            : videoQualitySettings[simulcastFormat.target];\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second. Convert target from bps to kbps.\n    return Math.min(target / 1000, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Conference options.\n         */\n        this._options = options;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (this._options.config?.startBitrate > 0) {\n            startBitrate = this._options.config.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        // TODO - Delete this when all the mobile endpoints switch to using the new Colibri\n        // message format for sending the endpoint stats.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_STATS_RECEIVED,\n            (participant, payload) => {\n                this._updateRemoteStats(participant.getId(), payload);\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === FACE_LANDMARK_MESSAGE_TYPE) {\n                    this.eventEmitter.emit(\n                        ConferenceEvents.FACE_LANDMARK_ADDED,\n                        participant.getId(),\n                        payload);\n                }\n            });\n\n        // Listen to local statistics events originating from the RTC module and update the _localStats field.\n        conference.statistics.addConnectionStatsListener(this._updateLocalStats.bind(this));\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n        conference.rtc.on(\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\n            track => {\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the send video bitrate on the active TPC.\n            const activeTPC = this._conference.getActivePeerConnection();\n\n            if (activeTPC) {\n                const isSimulcastOn = activeTPC.isSimulcastOn();\n                const videoQualitySettings = activeTPC.getTargetVideoBitrates();\n\n                // Add the codec info as well.\n                videoQualitySettings.codec = activeTPC.getConfiguredVideoCodec();\n\n                // Time since sending of video was enabled.\n                const millisSinceStart = window.performance.now()\n                    - Math.max(this._timeVideoUnmuted, this._timeIceConnected);\n                const statsInterval = this._options.config?.pcStatsInterval ?? 10000;\n\n                // Expected sending bitrate in perfect conditions.\n                let target = getTarget(isSimulcastOn, resolution, millisSinceStart, videoQualitySettings);\n\n                target = Math.min(target, MAX_TARGET_BITRATE);\n\n                // Calculate the quality only after the stats are available (after video was enabled).\n                if (millisSinceStart > statsInterval) {\n                    quality = 100 * this._localStats.bitrate.upload / target;\n                }\n            }\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds = (window.performance.now() - this._lastConnectionQualityUpdate) / 1000;\n\n            quality = Math.min(quality, prevConnectionQuality + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion,\n            maxEnabledResolution: this._localStats.maxEnabledResolution,\n            avgAudioLevels: this._localStats.localAvgAudioLevels\n        };\n\n        try {\n            this._conference.sendEndpointStatsMessage(data);\n        } catch (err) {\n            // Ignore the error as we might hit it in the beginning of the call before the channel is ready.\n            // The statistics will be sent again after few seconds and error is logged elseware as well.\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion,\n            maxEnabledResolution: data.maxEnabledResolution,\n            avgAudioLevels: data.avgAudioLevels\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceErrors from '../../JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\n *\n * If ICE restarts are NOT explicitly enabled by the {@code enableIceRestart} config option, then the conference will\n * delay emitting the {@JitsiConferenceErrors.ICE_FAILED} event by 15 seconds. If the network info module reports\n * the internet offline status then the time will start counting after the internet comes back online.\n *\n * If ICE restart are enabled, then a delayed ICE failed notification to Jicofo will be sent, only if the ICE connection\n * does not recover soon after or before the XMPP connection is restored (if it was ever broken). If ICE fails while\n * the XMPP connection is not broken then the notifications will be sent after 2 seconds delay.\n */\nexport default class IceFailedHandling {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * After making sure there's no way for the ICE connection to recover this method either sends ICE failed\n     * notification to Jicofo or emits the ice failed conference event.\n     * @private\n     * @returns {void}\n     */\n    _actOnIceFailed() {\n        if (!this._conference.room) {\n            return;\n        }\n\n        const { enableForcedReload, enableIceRestart } = this._conference.options.config;\n        const explicitlyDisabled = typeof enableIceRestart !== 'undefined' && !enableIceRestart;\n        const supportsRestartByTerminate = this._conference.room.supportsRestartByTerminate();\n        const useTerminateForRestart = supportsRestartByTerminate && !enableIceRestart;\n\n        logger.info('ICE failed,'\n            + ` enableForcedReload: ${enableForcedReload},`\n            + ` enableIceRestart: ${enableIceRestart},`\n            + ` supports restart by terminate: ${supportsRestartByTerminate}`);\n\n        if (explicitlyDisabled || (!enableIceRestart && !supportsRestartByTerminate) || enableForcedReload) {\n            logger.info('ICE failed, but ICE restarts are disabled');\n            const reason = enableForcedReload\n                ? JitsiConferenceErrors.CONFERENCE_RESTARTED\n                : JitsiConferenceErrors.ICE_FAILED;\n\n            this._conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, reason);\n\n            return;\n        }\n\n        const jvbConnection = this._conference.jvbJingleSession;\n        const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\n\n        if (!jvbConnection) {\n            logger.warn('Not sending ICE failed - no JVB connection');\n        } else if (jvbConnIceState === 'connected') {\n            logger.info('ICE connection restored - not sending ICE failed');\n        } else {\n            logger.info('Sending ICE failed - the connection did not recover, '\n                + `ICE state: ${jvbConnIceState}, `\n                + `use 'session-terminate': ${useTerminateForRestart}`);\n            if (useTerminateForRestart) {\n                this._conference.jvbJingleSession.terminate(\n                    () => {\n                        logger.info('session-terminate for ice restart - done');\n                    },\n                    error => {\n                        logger.error(`session-terminate for ice restart - error: ${error.message}`);\n                    }, {\n                        reason: 'connectivity-error',\n                        reasonDescription: 'ICE FAILED',\n                        requestRestart: true,\n                        sendSessionTerminate: true\n                    });\n            } else {\n                this._conference.jvbJingleSession.sendIceFailedNotification();\n            }\n        }\n    }\n\n    /**\n     * Starts the task.\n     */\n    start() {\n        //  Using xmpp.ping allows to handle both XMPP being disconnected and internet offline cases. The ping function\n        // uses sendIQ2 method which is resilient to XMPP connection disconnected state and will patiently wait until it\n        // gets reconnected.\n        //  This also handles the case about waiting for the internet to come back online, because ping\n        // will only succeed when the internet is online and then there's a chance for the ICE to recover from FAILED to\n        // CONNECTED which is the extra 2 second timeout after ping.\n        //  The 65 second timeout is given on purpose as there's no chance for XMPP to recover after 65 seconds of no\n        // communication with the server. Such resume attempt will result in unrecoverable conference failed event due\n        // to 'item-not-found' error returned by the server.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (!this._canceled) {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        this._iceFailedTimeout = undefined;\n                        this._actOnIceFailed();\n                    }, 2000);\n                }\n            },\n            error => {\n                logger.error('PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        window.clearTimeout(this._iceFailedTimeout);\n    }\n}\n","export enum DetectionEvents {\n    /**\n     * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\n     * versa.\n     * @event\n     * @type {boolean} - true when service has changed to active false otherwise.\n     */\n    DETECTOR_STATE_CHANGE = 'detector_state_change',\n\n    /** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\n     * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\n     * it starts receiving audio levels !== 0 after being in a state of no audio.\n     * @event\n     * @type {boolean} - true when the current conference audio track has audio input false otherwise.\n     */\n    AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed',\n\n    /** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\n     * for a period of time, meaning that the device is either broken or hardware/software muted.\n     * @event\n     * @type {void}\n     */\n    NO_AUDIO_INPUT = 'no_audio_input_detected',\n\n    /**\n     *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\n     *  @event\n     *  @type {Object}\n     */\n    VAD_NOISY_DEVICE = 'detection.vad_noise_device',\n\n    /**\n     * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\n     * The generated objects are of type Array<Object>, one score for each monitored device.\n     * @event VAD_REPORT_PUBLISHED\n     * @type Array<Object> with the following structure:\n     * @property {Date} timestamp - Timestamp at which the compute took place.\n     * @property {number} avgVAD - Average VAD score over monitored period of time.\n     * @property {string} deviceId - Associate local audio device ID.\n     */\n    VAD_REPORT_PUBLISHED = 'vad-report-published',\n\n    /**\n     * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\n     *\n     * @event\n     * @type {Object}\n     * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\n     * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @property {string} deviceId - Device id of the associated track.\n     */\n    VAD_SCORE_PUBLISHED = 'detection.vad_score_published',\n\n    /**\n     *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\n     *\n     *  @event\n     *  @type {Object}\n     */\n    VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted'\n};\n\n// exported for backward compatibility\nexport const DETECTOR_STATE_CHANGE = DetectionEvents.DETECTOR_STATE_CHANGE;\nexport const AUDIO_INPUT_STATE_CHANGE = DetectionEvents.AUDIO_INPUT_STATE_CHANGE;\nexport const NO_AUDIO_INPUT = DetectionEvents.NO_AUDIO_INPUT;\nexport const VAD_NOISY_DEVICE = DetectionEvents.VAD_NOISY_DEVICE;\nexport const VAD_REPORT_PUBLISHED = DetectionEvents.VAD_REPORT_PUBLISHED;\nexport const VAD_SCORE_PUBLISHED = DetectionEvents.VAD_SCORE_PUBLISHED;\nexport const VAD_TALK_WHILE_MUTED = DetectionEvents.VAD_TALK_WHILE_MUTED;\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport browser from '../browser';\n\nimport * as DetectionEvents from './DetectionEvents';\n\n// We wait a certain time interval for constant silence input from the current device to account for\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\n// an audio track is added to the tcr.\n// Potential improvement - add this as a configurable parameter.\nconst SILENCE_PERIOD_MS = 4000;\n\n/**\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\n * state must be constant for a configured amount of time in order for the event to be triggered.\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n * @fires DetectionEvents.NO_AUDIO_INPUT\n */\nexport default class NoAudioSignalDetection extends EventEmitter {\n    /**\n     * Creates new NoAudioSignalDetection.\n     *\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        super();\n\n        this._conference = conference;\n        this._timeoutTrigger = null;\n        this._hasAudioInput = null;\n\n        if (!browser.supportsReceiverStats()) {\n            conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\n        }\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n    }\n\n    /**\n     * Clear the timeout state.\n     */\n    _clearTriggerTimeout() {\n        clearTimeout(this._timeoutTrigger);\n        this._timeoutTrigger = null;\n    }\n\n\n    /**\n     * Generated event triggered by a change in the current conference audio input state.\n     *\n     * @param {*} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n     */\n    _handleAudioInputStateChange(audioLevel) {\n        // Current audio input state of the active local track in the conference, true for audio input false for no\n        // audio input.\n        const status = audioLevel !== 0;\n\n        // If this is the first audio event picked up or the current status is different from the previous trigger\n        // the event.\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\n            this._hasAudioInput = status;\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\n        }\n    }\n\n    /**\n     * Generate event triggered by a prolonged period of no audio input.\n     *\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.NO_AUDIO_INPUT\n     */\n    _handleNoAudioInputDetection(audioLevel) {\n        if (this._eventFired) {\n            return;\n        }\n\n        if (audioLevel === 0 && !this._timeoutTrigger) {\n            this._timeoutTrigger = setTimeout(() => {\n                this._eventFired = true;\n\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\n            }, SILENCE_PERIOD_MS);\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\n            this._clearTriggerTimeout();\n        }\n    }\n\n    /**\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\n     *\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\n     * being reported.\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio streams\n        if (!isLocal || !this._audioTrack) {\n            return;\n        }\n\n        // Get currently active local tracks from the TraceablePeerConnection\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\n\n        // Only target the current active track in the tpc. For some reason audio levels for previous\n        // devices are also picked up from the PeerConnection so we filter them out.\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\n            return;\n        }\n\n        // First handle audio input state change. In case the state changed to no input the no audio input event\n        // can try to fire again.\n        this._handleAudioInputStateChange(audioLevel);\n        this._handleNoAudioInputDetection(audioLevel);\n    }\n\n    /**\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\n     * Only take into account local audio tracks.\n     *\n     * @param {JitsiTrack} track - The added JitsiTrack.\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Reset state for the new track.\n            this._audioTrack = track;\n            this._eventFired = false;\n            this._clearTriggerTimeout();\n\n            // Listen for the audio levels on the newly added audio track\n            if (browser.supportsReceiverStats()) {\n                track.on(\n                    JitsiTrackEvents.NO_AUDIO_INPUT,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                    }\n                );\n                track.on(\n                    JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                        this._handleAudioInputStateChange(audioLevel);\n                    }\n                );\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.rtc.eventEmitter.emit(\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","/**\n * Adapter that creates AudioContext objects depending on the browser.\n *\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\n */\nexport function createAudioContext(options) {\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\n\n    if (!AudioContextImpl) {\n        return undefined;\n    }\n\n    return new AudioContextImpl(options);\n}\n","import EventEmitter from 'events';\n\nimport RTC from '../RTC/RTC';\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\n\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\n\n/**\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\n * score is published to consumers via an EventEmitter.\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\n *\n * @fires VAD_SCORE_PUBLISHED\n */\nexport default class TrackVADEmitter extends EventEmitter {\n    /**\n     * Constructor.\n     *\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\n     */\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\n        super();\n\n        /**\n         * Sample rate of the ScriptProcessorNode.\n         */\n        this._procNodeSampleRate = procNodeSampleRate;\n\n        /**\n         * VAD Processor that allows us to calculate VAD score for PCM samples\n         */\n        this._vadProcessor = vadProcessor;\n\n        /**\n         * The JitsiLocalTrack instance.\n         */\n        this._localTrack = jitsiLocalTrack;\n\n        /**\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\n         */\n        this._bufferResidue = new Float32Array([]);\n\n        /**\n         * The AudioContext instance with the preferred sample frequency.\n         */\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\n\n        /**\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\n         * saves a couple of function calls.\n         */\n        this._vadSampleSize = vadProcessor.getSampleLength();\n\n        /**\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\n         * sample rate.\n         */\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n\n        this._initializeAudioContext();\n    }\n\n    /**\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\n     *\n     * @param {string} micDeviceId - Target microphone device id.\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\n     * The processor needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\n     */\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\n        return RTC.obtainAudioAndVideoPermissions({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(localTrack => {\n            // We only expect one audio track when specifying a device id.\n            if (!localTrack[0]) {\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\n            }\n\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\n\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\n            // life cycle is handled by whoever created this instance.\n        });\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _initializeAudioContext() {\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\n\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\n        // with audio worklet when it's mature enough and has more browser support.\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\n    }\n\n    /**\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\n     *\n     *\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\n     * @returns {void}\n     * @fires VAD_SCORE_PUBLISHED\n     */\n    _onAudioProcess(audioEvent) {\n        // Prepend the residue PCM buffer from the previous process callback.\n        const inData = audioEvent.inputBuffer.getChannelData(0);\n        const completeInData = [ ...this._bufferResidue, ...inData ];\n        const sampleTimestamp = Date.now();\n\n        let i = 0;\n\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\n\n            // The VAD processor might change the values inside the array so we make a copy.\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\n\n            this.emit(VAD_SCORE_PUBLISHED, {\n                timestamp: sampleTimestamp,\n                score: vadScore,\n                pcmData: pcmSample,\n                deviceId: this._localTrack.getDeviceId()\n            });\n        }\n\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\n    }\n\n    /**\n     * Connects the nodes in the AudioContext to start the flow of audio data.\n     *\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\n        // resulting in calls with and uninitialized context.\n        // eslint-disable-next-line no-empty-function\n        this._audioProcessingNode.onaudioprocess = () => {};\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Cleanup potentially acquired resources.\n     *\n     * @returns {void}\n     */\n    _cleanupResources() {\n        this._disconnectAudioGraph();\n        this._localTrack.stopStream();\n    }\n\n    /**\n     * Get the associated track device ID.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._localTrack.getDeviceId();\n    }\n\n\n    /**\n     * Get the associated track label.\n     *\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this._localTrack.getDeviceLabel();\n    }\n\n    /**\n     * Start the emitter by connecting the audio graph.\n     *\n     * @returns {void}\n     */\n    start() {\n        this._connectAudioGraph();\n    }\n\n    /**\n     * Stops the emitter by disconnecting the audio graph.\n     *\n     * @returns {void}\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._bufferResidue = [];\n    }\n\n    /**\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\n     *\n     * @returns {void}\n     */\n    destroy() {\n        if (this._destroyed) {\n            return;\n        }\n\n        this._cleanupResources();\n        this._destroyed = true;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { EventEmitter } from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { DETECTOR_STATE_CHANGE, VAD_SCORE_PUBLISHED } from './DetectionEvents';\nimport TrackVADEmitter from './TrackVADEmitter';\n\nconst logger = getLogger(__filename);\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\n\n/**\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\n */\nexport default class VADAudioAnalyser extends EventEmitter {\n    /**\n     * Creates <tt>VADAudioAnalyser</tt>\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\n     * needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @constructor\n     */\n    constructor(conference, createVADProcessor) {\n        super();\n\n        /**\n         * Member function that instantiates a VAD processor.\n         */\n        this._createVADProcessor = createVADProcessor;\n\n        /**\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\n         * period voice probability scores.\n         */\n        this._vadEmitter = null;\n\n        /**\n         * Current state of the _vadEmitter\n         */\n        this._isVADEmitterRunning = false;\n\n        /**\n         * Array of currently attached VAD processing services.\n         */\n        this._detectionServices = [];\n\n        /**\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\n         * coming from the conference.\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\n         * i.e. (TRACK_MUTE_CHANGED event callback).\n         */\n        this._vadInitTracker = Promise.resolve();\n\n        /**\n         * Listens for {@link TrackVADEmitter} events and processes them.\n         */\n        this._processVADScore = this._processVADScore.bind(this);\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Attach a VAD detector service to the analyser and handle it's state changes.\n     *\n     * @param {Object} vadTMDetector\n     */\n    addVADDetectionService(vadService) {\n        this._detectionServices.push(vadService);\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\n            // When the state of a detector changes check if there are any active detectors attached so that\n            // the _vadEmitter doesn't run needlessly.\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\n\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\n            // that needs it.\n            if (!activeDetector.length && this._isVADEmitterRunning) {\n                this._stopVADEmitter();\n            } else if (!this._isVADEmitterRunning) {\n                this._startVADEmitter();\n            }\n        });\n    }\n\n    /**\n     * Start the {@link TrackVADEmitter} and attach the event listener.\n     * @returns {void}\n     */\n    _startVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.start();\n            this._isVADEmitterRunning = true;\n        }\n    }\n\n    /**\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\n     * @returns {void}\n     */\n    _stopVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.stop();\n        }\n        this._isVADEmitterRunning = false;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    _processVADScore(vadScore) {\n        for (const detector of this._detectionServices) {\n            detector.processVADScore(vadScore);\n        }\n    }\n\n    /**\n     * Change the isMuted state of all attached detection services.\n     *\n     * @param {boolean} isMuted\n     */\n    _changeDetectorsMuteState(isMuted) {\n        for (const detector of this._detectionServices) {\n            detector.changeMuteState(isMuted);\n        }\n    }\n\n    /**\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\n     * Only take into account local audio tracks.\n     * @param {JitsiTrack} track - The added track.\n     * @returns {void}\n     * @listens TRACK_ADDED\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\n            // destroy/create the processing context in the proper order.\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\n                .then(vadProcessor =>\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\n                )\n                .then(vadEmitter => {\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\n\n                    this._vadEmitter = vadEmitter;\n\n                    // Iterate through the detection services and set their appropriate mute state, depending on\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\n                    this._changeDetectorsMuteState(track.isMuted());\n                })\n                .catch(error => {\n                    logger.warn('Failed to start VADAudioAnalyser', error);\n                });\n        }\n    }\n\n    /**\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\n     * local audio tracks.\n     * @param {JitsiTrack} track - The track whose mute state has changed.\n     * @returns {void}\n     * @listens TRACK_MUTE_CHANGED\n     */\n    _trackMuteChanged(track) {\n        if (track.isLocalAudioTrack()) {\n            // On a mute toggle reset the state.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                // Set mute status for the attached detection services.\n                this._changeDetectorsMuteState(track.isMuted());\n            });\n        }\n    }\n\n    /**\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\n     *\n     * @param {JitsiTrack} track - The removed track.\n     * @returns {void}\n     * @listens TRACK_REMOVED\n     */\n    _trackRemoved(track) {\n        if (track.isLocalAudioTrack()) {\n            // Use the promise to make sure operations are in sequence.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\n\n                // Track was removed, clean up and set appropriate states.\n                if (this._vadEmitter) {\n                    this._stopVADEmitter();\n                    this._vadEmitter.destroy();\n                    this._vadEmitter = null;\n                }\n\n                // Reset state of detectors when active track is removed.\n                for (const detector of this._detectionServices) {\n                    detector.reset();\n                }\n            });\n        }\n    }\n\n\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\n\nimport { DETECTOR_STATE_CHANGE, VAD_NOISY_DEVICE } from './DetectionEvents';\n\n/**\n * The average value VAD needs to be under over a period of time to be considered noise.\n * @type {number}\n */\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\n\n/**\n * The average values that audio input need to be over to be considered loud.\n * @type {number}\n */\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst VAD_SCORE_TRIGGER = 0.2;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\n\n/**\n * Detect if provided VAD score and PCM data is considered noise.\n */\nexport default class VADNoiseDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADNoiseDetection</tt>\n     *\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Buffer that keeps audio level samples for a period of time.\n         */\n        this._audioLvlArray = [];\n\n        /**\n         * Current state of the service, if it's not active no processing will occur.\n         */\n        this._active = false;\n\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * If the score is above the set threshold fire the event.\n     * @returns {void}\n     * @fires VAD_NOISY_DEVICE\n     */\n    _calculateNoisyScore() {\n        const scoreAvg = calculateAverage(this._scoreArray);\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\n\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\n            this.emit(VAD_NOISY_DEVICE);\n\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Record the vad score and average volume in the appropriate buffers.\n     *\n     * @param {number} vadScore\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\n     */\n    _recordValues(vadScore, avgAudioLvl) {\n        this._scoreArray.push(vadScore);\n        this._audioLvlArray.push(avgAudioLvl);\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is not muted.\n        this._setActiveState(!isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        this._audioLvlArray = [];\n        clearTimeout(this._processTimeout);\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            // Filter and calculate sample average so we don't have to process one large array at a time.\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\n\n            return;\n        }\n\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\n        // noise\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n            const avgAudioLvl = calculateAverage(posAudioLevels);\n\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\n                this._processing = true;\n                this._recordValues(vadScore.score, avgAudioLvl);\n\n                // Once the preset timeout executes the final score will be calculated.\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\n            }\n        }\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage } from '../util/MathUtil';\n\nimport { DETECTOR_STATE_CHANGE, VAD_TALK_WHILE_MUTED } from './DetectionEvents';\n\n\n/**\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\n * @type {number}\n */\nconst VAD_AVG_THRESHOLD = 0.6;\n\n/**\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\n * @type {number}\n */\nconst VAD_VOICE_LEVEL = 0.9;\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\n\n/**\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\n */\nexport default class VADTalkMutedDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADTalkMutedDetection</tt>\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Current mute state of the audio track being monitored.\n         */\n        this._active = false;\n\n        this._calculateVADScore = this._calculateVADScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * @returns {void}\n     * @fires VAD_TALK_WHILE_MUTED\n     */\n    _calculateVADScore() {\n        const score = calculateAverage(this._scoreArray);\n\n        if (score > VAD_AVG_THRESHOLD) {\n            this.emit(VAD_TALK_WHILE_MUTED);\n\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is muted.\n        this._setActiveState(isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            this._scoreArray.push(vadScore.score);\n\n            return;\n        }\n\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\n        // there is no need to check for rogue events.\n        if (vadScore.score > VAD_VOICE_LEVEL) {\n            this._processing = true;\n            this._scoreArray.push(vadScore.score);\n\n            // Start gathering VAD scores for the configured period of time.\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\n        }\n    }\n\n    /**\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        clearTimeout(this._processTimeout);\n    }\n}\n","export enum E2ePingEvents {\n    /**\n     * Indicates that the end-to-end round-trip-time for a participant has changed.\n     */\n    E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed'\n};\n\n// exported for backward compatibility\nexport const E2E_RTT_CHANGED = E2ePingEvents.E2E_RTT_CHANGED;\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiE2EPingEvents from '../../service/e2eping/E2ePingEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * The number of requests to wait for before emitting an RTT value.\n */\nconst DEFAULT_NUM_REQUESTS = 5;\n\n/**\n * The maximum number of messages per second to aim for. This is for the entire\n * conference, with the assumption that all endpoints join at once.\n */\nconst DEFAULT_MAX_MESSAGES_PER_SECOND = 250;\n\n/**\n * The conference size beyond which e2e pings will be disabled.\n */\nconst DEFAULT_MAX_CONFERENCE_SIZE = 200;\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeLogRttAndStop = this.maybeLogRttAndStop.bind(this);\n        this.scheduleNext = this.scheduleNext.bind(this);\n        this.stop = this.stop.bind(this);\n        this.getDelay = this.getDelay.bind(this);\n        this.timeout = this.scheduleNext();\n    }\n\n    /**\n     * Schedule the next ping to be sent.\n     */\n    scheduleNext() {\n        return window.setTimeout(this.sendRequest, this.getDelay());\n    }\n\n    /**\n     * Stop pinging this participant, canceling a scheduled ping, if any.\n     */\n    stop() {\n        if (this.timeout) {\n            window.clearTimeout(this.timeout);\n        }\n        this.e2eping.removeParticipant(this.id);\n    }\n\n    /**\n     * Get the delay until the next ping in milliseconds.\n     */\n    getDelay() {\n        const conferenceSize = this.e2eping.conference.getParticipants().length;\n        const endpointPairs = conferenceSize * (conferenceSize - 1) / 2;\n        const totalMessages = endpointPairs * this.e2eping.numRequests;\n        const totalSeconds = totalMessages / this.e2eping.maxMessagesPerSecond;\n\n        // Randomize between .5 and 1.5\n        const r = 1.5 - Math.random();\n        const delayBetweenMessages = r * Math.max(1000 * (totalSeconds / this.e2eping.numRequests), 1000);\n\n        return delayBetweenMessages;\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n        }\n        this.maybeLogRttAndStop();\n    }\n\n    /**\n     * Check if we've received the pre-configured number of responses, and if\n     * so log the measured RTT and stop sending requests.\n     * @type {*}\n     */\n    maybeLogRttAndStop() {\n        // The RTT we'll report is the minimum RTT measured\n        let rtt = Infinity;\n        let request, requestId;\n        let numRequestsWithResponses = 0;\n        let totalNumRequests = 0;\n\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                totalNumRequests++;\n                if (request.rtt) {\n                    numRequestsWithResponses++;\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (numRequestsWithResponses >= this.e2eping.numRequests) {\n            logger.info(`Measured RTT=${rtt} ms to ${this.id} (in ${this.participant.getProperty('region')})`);\n            this.stop();\n\n            this.e2eping.conference.eventEmitter.emit(\n                JitsiE2EPingEvents.E2E_RTT_CHANGED, this.participant, rtt);\n\n            return;\n        } else if (totalNumRequests > 2 * this.e2eping.numRequests) {\n            logger.info(`Stopping e2eping for ${this.id} because we sent ${totalNumRequests} with only `\n                + `${numRequestsWithResponses} responses.`);\n            this.stop();\n\n            return;\n        }\n\n        this.timeout = this.scheduleNext();\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        this.numRequests = DEFAULT_NUM_REQUESTS;\n        this.maxConferenceSize = DEFAULT_MAX_CONFERENCE_SIZE;\n        this.maxMessagesPerSecond = DEFAULT_MAX_MESSAGES_PER_SECOND;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.numRequests === 'number') {\n                this.numRequests = options.e2eping.numRequests;\n            }\n            if (typeof options.e2eping.maxConferenceSize === 'number') {\n                this.maxConferenceSize = options.e2eping.maxConferenceSize;\n            }\n            if (typeof options.e2eping.maxMessagesPerSecond === 'number') {\n                this.maxMessagesPerSecond = options.e2eping.maxMessagesPerSecond;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping with numRequests=${this.numRequests}, maxConferenceSize=${this.maxConferenceSize}, `\n            + `maxMessagesPerSecond=${this.maxMessagesPerSecond}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(JitsiConferenceEvents.USER_LEFT, this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this.messageReceived);\n\n        this.conferenceJoined = this.conferenceJoined.bind(this);\n        conference.on(JitsiConferenceEvents.CONFERENCE_JOINED, this.conferenceJoined);\n    }\n\n    /**\n     * Delay processing USER_JOINED events until the MUC is fully joined,\n     * otherwise the apparent conference size will be wrong.\n     */\n    conferenceJoined() {\n        this.conference.getParticipants().forEach(p => this.participantJoined(p.getId(), p));\n        this.conference.on(JitsiConferenceEvents.USER_JOINED, this.participantJoined);\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.participants[id]) {\n            logger.info(`Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].stop();\n        }\n\n        if (this.conference.getParticipants().length > this.maxConferenceSize) {\n            return;\n        }\n\n        // We don't need to send e2eping in both directions for a pair of\n        // endpoints. Force only one direction with just string comparison of\n        // the IDs.\n        if (this.conference.myUserId() > id) {\n            logger.info(`Starting e2eping for participant ${id}`);\n            this.participants[id] = new ParticipantWrapper(participant, this);\n        }\n    }\n\n    /**\n     * Remove a participant without calling \"stop\".\n     */\n    removeParticipant(id) {\n        if (this.participants[id]) {\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.participants[id]) {\n            this.participants[id].stop();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(`Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(JitsiConferenceEvents.USER_JOINED, this.participantJoined);\n        this.conference.off(JitsiConferenceEvents.USER_LEFT, this.participantLeft);\n        this.conference.off(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this.messageReceived);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].stop();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\nconst MAX_HEIGHT_ONSTAGE = 2160;\nconst MAX_HEIGHT_THUMBNAIL = 180;\nconst LASTN_UNLIMITED = -1;\n\n/**\n * This class translates the legacy signaling format between the client and the bridge (that affects bandwidth\n * allocation) to the new format described here https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md\n */\nclass ReceiverVideoConstraints {\n    /**\n     * Creates a new instance.\n     */\n    constructor() {\n        // Default constraints used for endpoints that are not explicitly included in constraints.\n        // These constraints are used for endpoints that are thumbnails in the stage view.\n        this._defaultConstraints = { 'maxHeight': MAX_HEIGHT_THUMBNAIL };\n\n        // The number of videos requested from the bridge.\n        this._lastN = LASTN_UNLIMITED;\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._receiverVideoConstraints = {\n            constraints: {},\n            defaultConstraints: this.defaultConstraints,\n            lastN: this._lastN,\n            onStageEndpoints: [],\n            selectedEndpoints: this._selectedEndpoints\n        };\n    }\n\n    /**\n     * Returns the receiver video constraints that need to be sent on the bridge channel.\n     */\n    get constraints() {\n        this._receiverVideoConstraints.lastN = this._lastN;\n\n        if (!this._selectedEndpoints.length) {\n            return this._receiverVideoConstraints;\n        }\n\n        // The client is assumed to be in TileView if it has selected more than one endpoint, otherwise it is\n        // assumed to be in StageView.\n        this._receiverVideoConstraints.constraints = {};\n        if (this._selectedEndpoints.length > 1) {\n            /**\n             * Tile view.\n             * Only the default constraints are specified here along with lastN (if it is set).\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'defaultConstraints': { 'maxHeight': 360 }\n             * }\n             */\n            this._receiverVideoConstraints.defaultConstraints = { 'maxHeight': this._maxFrameHeight };\n            this._receiverVideoConstraints.onStageEndpoints = [];\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        } else {\n            /**\n             * Stage view.\n             * The participant on stage is specified in onStageEndpoints and a higher maxHeight is specified\n             * for that endpoint while a default maxHeight of 180 is applied to all the other endpoints.\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'onStageEndpoints': ['A'],\n             *  'defaultConstraints': { 'maxHeight':  180 },\n             *  'constraints': {\n             *      'A': { 'maxHeight': 720 }\n             *   }\n             * }\n             */\n            this._receiverVideoConstraints.constraints[this._selectedEndpoints[0]] = {\n                'maxHeight': this._maxFrameHeight\n            };\n            this._receiverVideoConstraints.defaultConstraints = this._defaultConstraints;\n            this._receiverVideoConstraints.onStageEndpoints = this._selectedEndpoints;\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        }\n\n        return this._receiverVideoConstraints;\n    }\n\n    /**\n     * Updates the lastN field of the ReceiverVideoConstraints sent to the bridge.\n     *\n     * @param {number} value\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateLastN(value) {\n        const changed = this._lastN !== value;\n\n        if (changed) {\n            this._lastN = value;\n            logger.debug(`Updating ReceiverVideoConstraints lastN(${value})`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the resolution (height requested) in the contraints field of the ReceiverVideoConstraints\n     * sent to the bridge.\n     *\n     * @param {number} maxFrameHeight\n     * @requires {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiveResolution(maxFrameHeight) {\n        const changed = this._maxFrameHeight !== maxFrameHeight;\n\n        if (changed) {\n            this._maxFrameHeight = maxFrameHeight;\n            logger.debug(`Updating receive maxFrameHeight: ${maxFrameHeight}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the receiver constraints sent to the bridge.\n     *\n     * @param {Object} videoConstraints\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiverVideoConstraints(videoConstraints) {\n        const changed = !isEqual(this._receiverVideoConstraints, videoConstraints);\n\n        if (changed) {\n            this._receiverVideoConstraints = videoConstraints;\n            logger.debug(`Updating ReceiverVideoConstraints ${JSON.stringify(videoConstraints)}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the list of selected endpoints.\n     *\n     * @param {Array<string>} ids\n     * @returns {void}\n     */\n    updateSelectedEndpoints(ids) {\n        logger.debug(`Updating selected endpoints: ${JSON.stringify(ids)}`);\n        this._selectedEndpoints = ids;\n    }\n}\n\n/**\n * This class manages the receive video contraints for a given {@link JitsiConference}. These constraints are\n * determined by the application based on how the remote video streams need to be displayed. This class is responsible\n * for communicating these constraints to the bridge over the bridge channel.\n */\nexport default class ReceiveVideoController {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance for which the new instance will be managing\n     * the receive video quality constraints.\n     * @param {RTC} rtc the rtc instance which is responsible for initializing the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._rtc = rtc;\n\n        const { config } = conference.options;\n\n        // The number of videos requested from the bridge, -1 represents unlimited or all available videos.\n        this._lastN = config?.startLastN ?? (config?.channelLastN || LASTN_UNLIMITED);\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        /**\n         * The map that holds the max frame height requested for each remote source when source-name signaling is\n         * enabled.\n         *\n         * @type Map<string, number>\n         */\n        this._sourceReceiverConstraints = new Map();\n\n        // Enable new receiver constraints by default unless it is explicitly disabled through config.js.\n        const useNewReceiverConstraints = config?.useNewBandwidthAllocationStrategy ?? true;\n\n        if (useNewReceiverConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n            const lastNUpdated = this._receiverVideoConstraints.updateLastN(this._lastN);\n\n            lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        } else {\n            this._rtc.setLastN(this._lastN);\n        }\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Returns a map of all the remote source names and the corresponding max frame heights.\n     *\n     * @param {number} maxFrameHeight\n     * @returns\n     */\n    _getDefaultSourceReceiverConstraints(mediaSession, maxFrameHeight) {\n        if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n            return null;\n        }\n        const remoteVideoTracks = mediaSession.peerconnection?.getRemoteTracks(null, MediaType.VIDEO) || [];\n        const receiverConstraints = new Map();\n\n        for (const track of remoteVideoTracks) {\n            receiverConstraints.set(track.getSourceName(), maxFrameHeight);\n        }\n\n        return receiverConstraints;\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. The preferred receive frameHeight is applied on the media session.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        if (mediaSession.isP2P || !this._receiverVideoConstraints) {\n            mediaSession.setReceiverVideoConstraint(this._maxFrameHeight, this._sourceReceiverConstraints);\n        } else {\n            this._receiverVideoConstraints.updateReceiveResolution(this._maxFrameHeight);\n            this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        }\n    }\n\n    /**\n     * Returns the lastN value for the conference.\n     *\n     * @returns {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected participants in order to always receive video\n     * for this participant (even when last n is enabled).\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._receiverVideoConstraints) {\n            // Filter out the local endpointId from the list of selected endpoints.\n            const remoteEndpointIds = ids.filter(id => id !== this._conference.myUserId());\n            const oldConstraints = JSON.parse(JSON.stringify(this._receiverVideoConstraints.constraints));\n\n            remoteEndpointIds.length && this._receiverVideoConstraints.updateSelectedEndpoints(remoteEndpointIds);\n            const newConstraints = this._receiverVideoConstraints.constraints;\n\n            // Send bridge message only when the constraints change.\n            if (!isEqual(newConstraints, oldConstraints)) {\n                this._rtc.setNewReceiverVideoConstraints(newConstraints);\n            }\n\n            return;\n        }\n        this._rtc.selectEndpoints(ids);\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going to be delivered after the value is\n     * in effect. Set to -1 for unlimited or all available videos.\n     *\n     * @param {number} value the new value for lastN.\n     * @returns {void}\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n\n            if (this._receiverVideoConstraints) {\n                const lastNUpdated = this._receiverVideoConstraints.updateLastN(value);\n\n                // Send out the message on the bridge channel if lastN was updated.\n                lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n\n                return;\n            }\n            this._rtc.setLastN(value);\n        }\n    }\n\n    /**\n     * Sets the maximum video resolution the local participant should receive from remote participants.\n     *\n     * @param {number|undefined} maxFrameHeight - the new value.\n     * @returns {void}\n     */\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        for (const session of this._conference.getMediaSessions()) {\n            if (session.isP2P || !this._receiverVideoConstraints) {\n                session.setReceiverVideoConstraint(\n                    maxFrameHeight,\n                    this._getDefaultSourceReceiverConstraints(this._maxFrameHeight));\n            } else {\n                const resolutionUpdated = this._receiverVideoConstraints.updateReceiveResolution(maxFrameHeight);\n\n                resolutionUpdated\n                    && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n            }\n        }\n    }\n\n    /**\n     * Sets the receiver constraints for the conference.\n     *\n     * @param {Object} constraints The video constraints.\n     */\n    setReceiverConstraints(constraints) {\n        if (!this._receiverVideoConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n        }\n\n        const isEndpointsFormat = Object.keys(constraints).includes('onStageEndpoints', 'selectedEndpoints');\n        const isSourcesFormat = Object.keys(constraints).includes('onStageSources', 'selectedSources');\n\n        if (!FeatureFlags.isSourceNameSignalingEnabled() && isSourcesFormat) {\n            throw new Error(\n                '\"onStageSources\" and \"selectedSources\" are not supported when sourceNameSignaling is disabled.'\n            );\n        }\n\n        if (FeatureFlags.isSourceNameSignalingEnabled() && isEndpointsFormat) {\n            throw new Error(\n                '\"onStageEndpoints\" and \"selectedEndpoints\" are not supported when sourceNameSignaling is enabled.'\n            );\n        }\n        const constraintsChanged = this._receiverVideoConstraints.updateReceiverVideoConstraints(constraints);\n\n        if (constraintsChanged) {\n            this._lastN = constraints.lastN ?? this._lastN;\n            this._selectedEndpoints = constraints.selectedEndpoints ?? this._selectedEndpoints;\n            this._rtc.setNewReceiverVideoConstraints(constraints);\n\n            const p2pSession = this._conference.getMediaSessions().find(session => session.isP2P);\n\n            if (!p2pSession) {\n                return;\n            }\n\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                const mappedConstraints = Array.from(Object.entries(constraints.constraints))\n                    .map(constraint => {\n                        constraint[1] = constraint[1].maxHeight;\n\n                        return constraint;\n                    });\n\n                this._sourceReceiverConstraints = new Map(mappedConstraints);\n\n                // Send the receiver constraints to the peer through a \"content-modify\" message.\n                p2pSession.setReceiverVideoConstraint(null, this._sourceReceiverConstraints);\n            } else {\n                let maxFrameHeight = Object.values(constraints.constraints)[0]?.maxHeight;\n\n                if (!maxFrameHeight) {\n                    maxFrameHeight = constraints.defaultConstraints?.maxHeight;\n                }\n                maxFrameHeight && p2pSession.setReceiverVideoConstraint(maxFrameHeight);\n            }\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\n\nconst logger = getLogger(__filename);\nconst MAX_LOCAL_RESOLUTION = 2160;\n\n/**\n * The class manages send video constraints across media sessions({@link JingleSessionPC}) which belong to\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\n * different.\n */\nexport default class SendVideoController {\n    /**\n     * Creates new instance for a given conference.\n     *\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\n     * the send video quality constraints.\n     * @param {RTC} rtc - the rtc instance that is responsible for sending the messages on the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._preferredSendMaxFrameHeight = MAX_LOCAL_RESOLUTION;\n        this._rtc = rtc;\n\n        /**\n         * Source name based sender constraints.\n         * @type {Map<string, number>};\n         */\n\n        this._sourceSenderConstraints = new Map();\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n            () => this._configureConstraintsForLocalSources());\n        this._rtc.on(\n            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED,\n            videoConstraints => this._onSenderConstraintsReceived(videoConstraints));\n    }\n\n    /**\n     * Configures the video encodings on the local sources when a media connection is established or becomes active.\n     *\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _configureConstraintsForLocalSources() {\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            for (const track of this._rtc.getLocalVideoTracks()) {\n                const sourceName = track.getSourceName();\n\n                sourceName && this._propagateSendMaxFrameHeight(sourceName);\n            }\n        } else {\n            this._propagateSendMaxFrameHeight();\n        }\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\n     * the conference has entered the p2p mode already.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            mediaSession.addListener(\n                MediaSessionEvents.REMOTE_SOURCE_CONSTRAINTS_CHANGED,\n                (session, sourceConstraints) => {\n                    session === this._conference.getActiveMediaSession()\n                        && sourceConstraints.forEach(constraint => this._onSenderConstraintsReceived(constraint));\n                });\n        } else {\n            mediaSession.addListener(\n                MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED,\n                session => session === this._conference.getActiveMediaSession()\n                    && this._configureConstraintsForLocalSources());\n        }\n    }\n\n    /**\n     * Propagates the video constraints if they have changed.\n     *\n     * @param {Object} videoConstraints - The sender video constraints received from the bridge.\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _onSenderConstraintsReceived(videoConstraints) {\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            const { maxHeight, sourceName } = videoConstraints;\n            const localVideoTracks = this._conference.getLocalVideoTracks() ?? [];\n\n            for (const track of localVideoTracks) {\n                // Propagate the sender constraint only if it has changed.\n                if (track.getSourceName() === sourceName\n                    && (!this._sourceSenderConstraints.has(sourceName)\n                    || this._sourceSenderConstraints.get(sourceName) !== maxHeight)) {\n                    this._sourceSenderConstraints.set(sourceName, maxHeight);\n                    logger.debug(`Sender constraints for source:${sourceName} changed to maxHeight:${maxHeight}`);\n                    this._propagateSendMaxFrameHeight(sourceName);\n                }\n            }\n        } else if (this._senderVideoConstraints?.idealHeight !== videoConstraints.idealHeight) {\n            this._senderVideoConstraints = videoConstraints;\n            this._propagateSendMaxFrameHeight();\n        }\n    }\n\n    /**\n     * Figures out the send video constraint as specified by {@link _selectSendMaxFrameHeight} and sets it on all media\n     * sessions for the reasons mentioned in this class description.\n     *\n     * @param {string} sourceName - The source for which sender constraints have changed.\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _propagateSendMaxFrameHeight(sourceName = null) {\n        if (FeatureFlags.isSourceNameSignalingEnabled() && !sourceName) {\n            throw new Error('sourceName missing for calculating the sendMaxHeight for video tracks');\n        }\n        const sendMaxFrameHeight = this._selectSendMaxFrameHeight(sourceName);\n        const promises = [];\n\n        if (sendMaxFrameHeight >= 0) {\n            for (const session of this._conference.getMediaSessions()) {\n                promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight, sourceName));\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\n     * the active media session's receive preference set by the remote party.\n     *\n     * @param {string} sourceName - The source for which sender constraints have changed.\n     * @returns {number|undefined}\n     * @private\n     */\n    _selectSendMaxFrameHeight(sourceName = null) {\n        if (FeatureFlags.isSourceNameSignalingEnabled() && !sourceName) {\n            throw new Error('sourceName missing for calculating the sendMaxHeight for video tracks');\n        }\n        const activeMediaSession = this._conference.getActiveMediaSession();\n        const remoteRecvMaxFrameHeight = activeMediaSession\n            ? activeMediaSession.isP2P\n                ? sourceName\n                    ? this._sourceSenderConstraints.get(sourceName)\n                    : activeMediaSession.getRemoteRecvMaxFrameHeight()\n                : sourceName ? this._sourceSenderConstraints.get(sourceName) : this._senderVideoConstraints?.idealHeight\n            : undefined;\n\n        if (this._preferredSendMaxFrameHeight >= 0 && remoteRecvMaxFrameHeight >= 0) {\n            return Math.min(this._preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\n        } else if (remoteRecvMaxFrameHeight >= 0) {\n            return remoteRecvMaxFrameHeight;\n        }\n\n        return this._preferredSendMaxFrameHeight;\n    }\n\n    /**\n     * Sets local preference for max send video frame height.\n     *\n     * @param {number} maxFrameHeight - the new value to set.\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\n     */\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\n        this._preferredSendMaxFrameHeight = maxFrameHeight;\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            const promises = [];\n\n            for (const sourceName of this._sourceSenderConstraints.keys()) {\n                promises.push(this._propagateSendMaxFrameHeight(sourceName));\n            }\n\n            return Promise.allSettled(promises);\n        }\n\n        return this._propagateSendMaxFrameHeight();\n    }\n}\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            initiator: jibriStatus.getAttribute('initiator'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the initiator of the session instance.\n     *\n     * @returns {JitsiParticipant|string} The participant that started the session.\n     */\n    getInitiator() {\n        return this._initiator;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * Returns the jid of the participant that stopped the session.\n     *\n     * @returns {JitsiParticipant|string} The participant that stopped the session.\n     */\n    getTerminator() {\n        return this._terminator;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Sets the participant that started the session.\n     * @param {JitsiParticipant | string} participant - The participant or resource id\n     * if local participant.\n     */\n    setInitiator(participant) {\n        this._initiator = participant;\n    }\n\n    /**\n     * Sets the participant that stopped the session.\n     * @param {JitsiParticipant | string} participant - The participant or the resource id\n     * if local participant.\n     */\n    setTerminator(participant) {\n        this._terminator = participant;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': appData,\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\n     */\n    _emitSessionUpdate(session, initiator) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatus(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session, initiator);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, '', mode);\n        }\n\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import { getLogger } from '@jitsi/logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\n\nimport Statistics from './statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Number of local samples that will be used for comparison before and after the remote sample is received.\n */\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\n\n/**\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\n * participant and compares them to detect potential audio problem for a participant.\n */\nexport default class AudioOutputProblemDetector {\n\n    /**\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\n     *\n     * @param {JitsiConference} conference - The conference instance to be monitored.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._localAudioLevelCache = {};\n        this._reportedParticipants = [];\n        this._audioProblemCandidates = {};\n        this._numberOfRemoteAudioLevelsReceived = {};\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\n        this._clearUserData = this._clearUserData.bind(this);\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\n    }\n\n    /**\n     * A listener for audio level data received by a remote participant.\n     *\n     * @param {string} userID - The user id of the participant that sent the data.\n     * @param {number} audioLevel - The average audio level value.\n     * @returns {void}\n     */\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\n\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\n\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\n            return;\n        }\n\n        const participant = this._conference.getParticipantById(userID);\n\n        if (participant) {\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\n\n            if (tracks.length > 0 && participant.isAudioMuted()) {\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\n                // zero values for muted track.\n                return;\n            }\n        }\n\n        const localAudioLevels = this._localAudioLevelCache[userID];\n\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\n            this._audioProblemCandidates[userID] = {\n                remoteAudioLevels: avgAudioLevels,\n                localAudioLevels: []\n            };\n        }\n    }\n\n    /**\n     * A listener for audio level data retrieved by the local stats.\n     *\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\n     * @returns {void}\n     */\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        Object.keys(avgAudioLevels).forEach(userID => {\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\n                return;\n            }\n\n            const localAudioLevels = this._localAudioLevelCache[userID];\n\n            if (!Array.isArray(localAudioLevels)) {\n                this._localAudioLevelCache[userID] = [ ];\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\n                localAudioLevels.shift();\n            }\n\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\n        });\n\n\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\n\n            localAudioLevels.push(avgAudioLevels[userID]);\n\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\n\n                    Statistics.sendAnalytics(\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\n                        remoteAudioLevels}`);\n                    this._reportedParticipants.push(userID);\n                    this._clearUserData(userID);\n                }\n\n                delete this._audioProblemCandidates[userID];\n            }\n        });\n    }\n\n    /**\n     * Clears the data stored for a participant.\n     *\n     * @param {string} userID - The id of the participant.\n     * @returns {void}\n     */\n    _clearUserData(userID) {\n        delete this._localAudioLevelCache[userID];\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._localAudioLevelCache = undefined;\n        this._audioProblemCandidates = undefined;\n        this._reportedParticipants = undefined;\n        this._numberOfRemoteAudioLevelsReceived = undefined;\n        this._conference = undefined;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport {\n    createRtpStatsEvent,\n    createTransportStatsEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nimport Statistics from './statistics';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue === 'undefined') {\n            return;\n        }\n\n        if (typeof nextValue !== 'number') {\n            logger.error(`${this.name} - invalid value for idx: ${this.count}`, nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._cachedTransportStats = undefined;\n\n        this._onLocalStatsUpdated = data => {\n            this._calculateAvgStats(data);\n            this._maybeSendTransportAnalyticsEvent(data);\n        };\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Sends the 'transport.stats' analytics event whenever we detect that\n     * there is a change in the local or remote candidate type on the transport\n     * that is currently selected.\n     * @param {*} data\n     * @private\n     */\n    _maybeSendTransportAnalyticsEvent(data) {\n        if (!data || !data.transport || !data.transport.length) {\n            return;\n        }\n        const transportStats = {\n            p2p: data.transport[0].p2p,\n            'local_candidate_type': data.transport[0].localCandidateType,\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\n            'transport_type': data.transport[0].type\n        };\n\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\n            this._cachedTransportStats = transportStats;\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\n        }\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport SpeakerStats from './SpeakerStats';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.FACE_LANDMARK_ADDED,\n            this._onFaceLandmarkAdd.bind(this));\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new dominant speaker.\n     * @param {Array[string]} previous - The array with previous speakers.\n     * @param {boolean} silence - Indecates whether the dominant speaker is silent or not.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId, previous, silence) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true, silence);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        if (participant.isHidden()) {\n            return;\n        }\n\n        if (!this.stats.users[userId]) {\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Processes a new face landmark object of a remote user.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @param {Object} data - The face landmark object.\n     * @returns {void}\n     * @private\n     */\n    _onFaceLandmarkAdd(userId, data) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser && data.faceExpression) {\n            savedUser.addFaceExpression(data.faceExpression, data.duration);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n            const newParticipant = this.conference.getParticipantById(userId);\n\n            // we want to ignore hidden participants\n            if (!newParticipant || !newParticipant.isHidden()) {\n                if (this.stats.users[userId]) {\n                    speakerStatsToUpdate = this.stats.users[userId];\n\n                    if (!speakerStatsToUpdate.getDisplayName()) {\n                        speakerStatsToUpdate\n                            .setDisplayName(newStats[userId].displayName);\n                    }\n                } else {\n                    speakerStatsToUpdate = new SpeakerStats(\n                        userId, newStats[userId].displayName);\n                    this.stats.users[userId] = speakerStatsToUpdate;\n                    speakerStatsToUpdate.markAsHasLeft();\n                }\n\n                speakerStatsToUpdate.totalDominantSpeakerTime\n                    = newStats[userId].totalDominantSpeakerTime;\n\n                speakerStatsToUpdate.setFaceExpressions(newStats[userId].faceExpressions);\n            }\n        }\n    }\n}\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n */\nexport default class RecordingResult {\n    /**\n     * @param blob the recording audio stream as a single blob\n     * @param name the name of the person of the audio stream\n     * @param startTime the time in UTC when recording of the audiostream started\n     * @param wordArray the recorder audio stream transcribed as an array of Word objects\n     */\n    constructor(blob, name, startTime, wordArray) {\n        this.blob = blob;\n        this.name = name;\n        this.startTime = startTime;\n        this.wordArray = wordArray;\n    }\n}\n","/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nexport default class TrackRecorder {\n    /**\n     * @param track The JitsiTrack the object is going to hold\n     */\n    constructor(track) {\n        // The JitsiTrack holding the stream\n        this.track = track;\n\n        // The MediaRecorder recording the stream\n        this.recorder = null;\n\n        // The array of data chunks recorded from the stream\n        // acts as a buffer until the data is stored on disk\n        this.data = null;\n\n        // the name of the person of the JitsiTrack. This can be undefined and/or\n        // not unique\n        this.name = null;\n\n        // the time of the start of the recording\n        this.startTime = null;\n    }\n}\n","import RecordingResult from './recordingResult';\nimport TrackRecorder from './trackRecorder';\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = new MediaStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * export the main object AudioRecorder\n */\nexport default AudioRecorder;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nexport default class Word {\n    /**\n     * @param word the word\n     * @param begin the time the word was started being uttered\n     * @param end the time the word stopped being uttered\n     */\n    constructor(word, begin, end) {\n        this.word = word;\n        this.begin = begin;\n        this.end = end;\n    }\n\n    /**\n     * Get the string representation of the word\n     * @returns {*} the word as a string\n     */\n    getWord() {\n        return this.word;\n    }\n\n    /**\n     * Get the time the word started being uttered\n     * @returns {*} the start time as an integer\n     */\n    getBeginTime() {\n        return this.begin;\n    }\n\n    /**\n     * Get the time the word stopped being uttered\n     * @returns {*} the end time as an integer\n     */\n    getEndTime() {\n        return this.end;\n    }\n}\n","/* global config */\n\nimport Word from '../word';\n\nimport audioRecorder from './../audioRecorder';\nimport AbstractTranscriptionService from './AbstractTranscriptionService';\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nexport default class SphinxService extends AbstractTranscriptionService {\n    /**\n     * Implements a TranscriptionService for a Sphinx4 http server\n     */\n    constructor() {\n        super();\n\n        // set the correct url\n        this.url = getURL();\n    }\n\n    /**\n     * Overrides the sendRequest method from AbstractTranscriptionService\n     * it will send the audio stream the a Sphinx4 server to get the transcription\n     *\n     * @param audioFileBlob the recorder audio stream an a single Blob\n     * @param callback the callback function retrieving the server response\n     */\n    sendRequest(audioFileBlob, callback) {\n        console.log(`sending an audio file  to ${this.url}`);\n        console.log(`the audio file being sent: ${audioFileBlob}`);\n        const request = new XMLHttpRequest();\n\n        request.onreadystatechange = function() {\n            if (request.readyState === XMLHttpRequest.DONE\n                && request.status === 200) {\n                callback(request.responseText);\n            } else if (request.readyState === XMLHttpRequest.DONE) {\n                throw new Error(\n                    `unable to accept response from sphinx server. status: ${request.status}`);\n            }\n\n            // if not ready no point to throw an error\n        };\n        request.open('POST', this.url);\n        request.setRequestHeader('Content-Type',\n            audioRecorder.determineCorrectFileType());\n        request.send(audioFileBlob);\n        console.log(`send ${audioFileBlob}`);\n    }\n\n    /**\n     * Overrides the formatResponse method from AbstractTranscriptionService\n     * It will parse the answer from the server in the expected format\n     *\n     * @param response the JSON body retrieved from the Sphinx4 server\n     */\n    formatResponse(response) {\n        const result = JSON.parse(response).objects;\n\n        // make sure to delete the session id object, which is always\n        // the first value in the JSON array\n        result.shift();\n        const array = [];\n\n        result.forEach(\n            word => word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n        return array;\n    }\n\n    /**\n     * checks wether the reply is empty, or doesn't contain a correct JSON object\n     * @param response the server response\n     * @return {boolean} whether the response is valid\n     */\n    verify(response) {\n        console.log(`response from server:${response.toString()}`);\n\n        // test if server responded with a string object\n        if (typeof response !== 'string') {\n            return false;\n        }\n\n        // test if the string can be parsed into valid JSON\n        let json;\n\n        try {\n            json = JSON.parse(response);\n        } catch (error) {\n            console.log(error);\n\n            return false;\n        }\n\n        // check if the JSON has a \"objects\" value\n        if (json.objects === undefined) {\n            return false;\n        }\n\n        // get the \"objects\" value and check for a session ID\n        const array = json.objects;\n\n        if (!(array[0] && array[0]['session-id'])) {\n            return false;\n        }\n\n        // everything seems to be in order\n        return true;\n    }\n}\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nexport default class TranscriptionService {\n    /**\n     * Abstract class representing an interface to implement a speech-to-text\n     * service on.\n     */\n    constructor() {\n        throw new Error('TranscriptionService is abstract and cannot be created');\n    }\n\n    /**\n     * This method can be used to send the recorder audio stream and\n     * retrieve the answer from the transcription service from the callback\n     *\n     * @param {RecordingResult} recordingResult a recordingResult object which\n     * includes the recorded audio stream as a blob\n     * @param {Function} callback  which will retrieve the a RecordingResult with\n     *        the answer as a WordArray\n     */\n    send(recordingResult, callback) {\n        this.sendRequest(recordingResult.blob, response => {\n            if (this.verify(response)) {\n                recordingResult.wordArray = this.formatResponse(response);\n            } else {\n                console.log('the retrieved response from the server is not valid!');\n                recordingResult.wordArray = [];\n            }\n            callback(recordingResult);\n        });\n    }\n\n    /**\n     * Abstract method which will rend the recorder audio stream to the implemented\n     * transcription service and will retrieve an answer, which will be\n     * called on the given callback method\n     *\n     * @param {Blob} audioBlob the recorded audio stream as a single Blob\n     * @param {function} callback function which will retrieve the answer\n     *                            from the service\n     */\n    sendRequest(audioBlob, callback) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.sendRequest is abstract');\n    }\n\n    /**\n     * Abstract method which will parse the output from the implemented\n     * transcription service to the expected format\n     *\n     * The transcriber class expect an array of word objects, where each word\n     * object is one transcribed word by the service.\n     *\n     * The expected output of this method is an array of word objects, in\n     * the correct order. That is, the first object in the array is the first word\n     * being said, and the last word in the array is the last word being said\n     *\n     * @param response the answer from the speech-to-text server which needs to be\n     *                 formatted\n     * @return {Array<Word>} an array of Word objects\n     */\n    formatResponse(response) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.format is abstract');\n    }\n\n    /**\n     * Abstract method which will verify that the response from the server is valid\n     *\n     * @param response the response from the server\n     * @return {boolean} true if response is valid, false otherwise\n     */\n    verify(response) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.verify is abstract');\n    }\n}\n","import AudioRecorder from './audioRecorder';\nimport SphinxService from './transcriptionServices/SphinxTranscriptionService';\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio to the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nexport default Transcriber;\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processVersions.bind(this));\n}\n\nComponentsVersions.prototype.processVersions\n    = function(versions, mucResource, mucJid) {\n        if (!this.conference.isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${versions}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        versions.children.forEach(component => {\n\n            const name = component.attributes.name;\n            const version = component.value;\n\n            if (this.versions[name] !== version) {\n                this.versions[name] = version;\n                logger.info(`Got ${name} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: name,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","export enum VideoSIPGWStatusConstants {\n    /**\n     * Status that video SIP GW service is available.\n     */\n    STATUS_AVAILABLE = 'available',\n\n    /**\n     * Status that video SIP GW service is not available.\n     */\n    STATUS_UNDEFINED = 'undefined',\n\n    /**\n     * Status that video SIP GW service is available but there are no free nodes\n     * at the moment to serve new requests.\n     */\n    STATUS_BUSY = 'busy'\n};\n\nexport enum VideoSIPGWStateConstants {\n    /**\n     * Video SIP GW session state, currently running.\n     */\n    STATE_ON = 'on',\n\n    /**\n     * Video SIP GW session state, currently stopped and not running.\n     */\n    STATE_OFF = 'off',\n\n    /**\n     * Video SIP GW session state, currently is starting.\n     */\n    STATE_PENDING = 'pending',\n\n    /**\n     * Video SIP GW session state, has observed some issues and is retrying at the\n     * moment.\n     */\n    STATE_RETRYING = 'retrying',\n\n    /**\n     * Video SIP GW session state, tried to start but it failed.\n     */\n    STATE_FAILED = 'failed'\n};\n\nexport enum VideoSIPGWErrorConstants {\n    /**\n     * Error on trying to create video SIP GW session in conference where\n     * there is no room connection (hasn't joined or has left the room).\n     */\n    ERROR_NO_CONNECTION = 'error_no_connection',\n\n    /**\n     * Error on trying to create video SIP GW session with address for which\n     * there is an already created session.\n     */\n    ERROR_SESSION_EXISTS = 'error_session_already_exists'\n};\n\n// exported for backward compatibility\nexport const STATUS_AVAILABLE = VideoSIPGWStatusConstants.STATUS_AVAILABLE;\nexport const STATUS_UNDEFINED = VideoSIPGWStatusConstants.STATUS_UNDEFINED;\nexport const STATUS_BUSY = VideoSIPGWStatusConstants.STATUS_BUSY;\n\nexport const STATE_ON = VideoSIPGWStateConstants.STATE_ON;\nexport const STATE_OFF = VideoSIPGWStateConstants.STATE_OFF;\nexport const STATE_PENDING = VideoSIPGWStateConstants.STATE_PENDING;\nexport const STATE_RETRYING = VideoSIPGWStateConstants.STATE_RETRYING;\nexport const STATE_FAILED = VideoSIPGWStateConstants.STATE_FAILED;\n\nexport const ERROR_NO_CONNECTION = VideoSIPGWErrorConstants.ERROR_NO_CONNECTION;\nexport const ERROR_SESSION_EXISTS = VideoSIPGWErrorConstants.ERROR_SESSION_EXISTS;\n","import { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer, { getMediaTypeFromSourceName } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { filterNodeFromPresenceJSON } from './ChatRoom';\n\nconst logger = getLogger(__filename);\n\nexport const SOURCE_INFO_PRESENCE_ELEMENT = 'SourceInfo';\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n\n        /**\n         * @type {Map<SourceName, SourceInfo>}\n         * @private\n         */\n        this._localSourceState = { };\n\n        /**\n         * @type {Map<EndpointId, Map<SourceName, SourceInfo>>}\n         * @private\n         */\n        this._remoteSourceState = { };\n\n        /**\n         * A map that stores the source name of a track identified by it's ssrc.\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to source name\n         */\n        this._sourceNames = new Map();\n    }\n\n    /**\n     * Adds <SourceInfo> element to the local presence.\n     *\n     * @returns {void}\n     * @private\n     */\n    _addLocalSourceInfoToPresence() {\n        if (this.chatRoom) {\n            return this.chatRoom.addOrReplaceInPresence(\n                SOURCE_INFO_PRESENCE_ELEMENT,\n                { value: JSON.stringify(this._localSourceState) });\n        }\n\n        return false;\n    }\n\n    /**\n     * Check is given endpoint has advertised <SourceInfo/> in it's presence which means that the source name signaling\n     * is used by this endpoint.\n     *\n     * @param {EndpointId} endpointId\n     * @returns {boolean}\n     */\n    _doesEndpointSendNewSourceInfo(endpointId) {\n        const presence = this.chatRoom?.getLastPresence(endpointId);\n\n        return Boolean(presence && presence.find(node => node.tagName === SOURCE_INFO_PRESENCE_ELEMENT));\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                this._sourceInfoHandler\n                    && oldChatRoom.removePresenceListener(\n                        SOURCE_INFO_PRESENCE_ELEMENT, this._sourceInfoHandler);\n                this._memberLeftHandler\n                    && oldChatRoom.removeEventListener(\n                        XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n            }\n        }\n        if (room) {\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                this._bindChatRoomEventHandlers(room);\n                this._addLocalSourceInfoToPresence();\n            } else {\n                // TODO the logic below has been duplicated in _bindChatRoomEventHandlers, clean this up once\n                //  the new impl has been tested well enough\n                // SignalingEvents\n                this._audioMuteHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_MUTED_CHANGED,\n                        from, MediaType.AUDIO, node.value === 'true');\n                };\n                room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n                this._videoMuteHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_MUTED_CHANGED,\n                        from, MediaType.VIDEO, node.value === 'true');\n                };\n                room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n                this._videoTypeHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                        from, node.value);\n                };\n                room.addPresenceListener('videoType', this._videoTypeHandler);\n            }\n        }\n    }\n\n    /**\n     * Binds event listeners to the chat room instance.\n     * @param {ChatRoom} room\n     * @private\n     * @returns {void}\n     */\n    _bindChatRoomEventHandlers(room) {\n        const emitAudioMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.AUDIO,\n                muted);\n        };\n        const emitVideoMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.VIDEO,\n                muted);\n        };\n\n        // SignalingEvents\n        this._audioMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitAudioMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n        this._videoMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n        const emitVideoTypeEvent = (endpointId, videoType) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                endpointId, videoType);\n        };\n\n        this._videoTypeHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoTypeEvent(from, node.value);\n            }\n        };\n\n        if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n            room.addPresenceListener('videoType', this._videoTypeHandler);\n        }\n\n        this._sourceInfoHandler = (node, mucNick) => {\n            const endpointId = mucNick;\n            const { value } = node;\n            const sourceInfoJSON = JSON.parse(value);\n            const emitEventsFromHere = this._doesEndpointSendNewSourceInfo(endpointId);\n            const endpointSourceState\n                = this._remoteSourceState[endpointId] || (this._remoteSourceState[endpointId] = {});\n\n            for (const sourceName of Object.keys(sourceInfoJSON)) {\n                const mediaType = getMediaTypeFromSourceName(sourceName);\n                const newMutedState = Boolean(sourceInfoJSON[sourceName].muted);\n                const oldSourceState = endpointSourceState[sourceName]\n                    || (endpointSourceState[sourceName] = { sourceName });\n\n                if (oldSourceState.muted !== newMutedState) {\n                    oldSourceState.muted = newMutedState;\n                    if (emitEventsFromHere && !this._localSourceState[sourceName]) {\n                        this.eventEmitter.emit(SignalingEvents.SOURCE_MUTED_CHANGED, sourceName, newMutedState);\n                    }\n                }\n\n                // Assume a default videoType of 'camera' for video sources.\n                const newVideoType = mediaType === MediaType.VIDEO\n                    ? sourceInfoJSON[sourceName].videoType ?? VideoType.CAMERA\n                    : undefined;\n\n                if (oldSourceState.videoType !== newVideoType) {\n                    oldSourceState.videoType = newVideoType;\n\n                    // Since having a mix of eps that do/don't support multi-stream in the same call is supported, emit\n                    // SOURCE_VIDEO_TYPE_CHANGED event when the remote source changes videoType.\n                    if (emitEventsFromHere && !this._localSourceState[sourceName]) {\n                        this.eventEmitter.emit(SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED, sourceName, newVideoType);\n                    }\n                }\n            }\n\n            // Cleanup removed source names\n            const newSourceNames = Object.keys(sourceInfoJSON);\n\n            for (const sourceName of Object.keys(endpointSourceState)) {\n                if (newSourceNames.indexOf(sourceName) === -1) {\n                    delete endpointSourceState[sourceName];\n                }\n            }\n        };\n        room.addPresenceListener('SourceInfo', this._sourceInfoHandler);\n\n        // Cleanup when participant leaves\n        this._memberLeftHandler = jid => {\n            const endpointId = Strophe.getResourceFromJid(jid);\n\n            delete this._remoteSourceState[endpointId];\n\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                for (const [ key, value ] of this.ssrcOwners.entries()) {\n                    if (value === endpointId) {\n                        delete this._sourceNames[key];\n                    }\n                }\n            }\n        };\n\n        room.addEventListener(XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n    }\n\n    /**\n     * Finds the first source of given media type for the given endpoint.\n     * @param endpointId\n     * @param mediaType\n     * @returns {SourceInfo|null}\n     * @private\n     */\n    _findEndpointSourceInfoForMediaType(endpointId, mediaType) {\n        const remoteSourceState = this._remoteSourceState[endpointId];\n\n        if (!remoteSourceState) {\n            return null;\n        }\n\n        for (const sourceInfo of Object.values(remoteSourceState)) {\n            const _mediaType = getMediaTypeFromSourceName(sourceInfo.sourceName);\n\n            if (_mediaType === mediaType) {\n                return sourceInfo;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType, sourceName) {\n        const legacyGetPeerMediaInfo = () => {\n            if (this.chatRoom) {\n                return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n            }\n            logger.warn('Requested peer media info, before room was set');\n        };\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            const lastPresence = this.chatRoom?.getLastPresence(owner);\n\n            if (!lastPresence) {\n                logger.warn(`getPeerMediaInfo - no presence stored for: ${owner}`);\n\n                return;\n            }\n            if (!this._doesEndpointSendNewSourceInfo(owner)) {\n                return legacyGetPeerMediaInfo();\n            }\n\n            if (sourceName) {\n                return this.getPeerSourceInfo(owner, sourceName);\n            }\n\n            /**\n             * @type {PeerMediaInfo}\n             */\n            const mediaInfo = {};\n            const endpointMediaSource = this._findEndpointSourceInfoForMediaType(owner, mediaType);\n\n            // The defaults are provided only, because getPeerMediaInfo is a legacy method. This will be eventually\n            // changed into a getSourceInfo method which returns undefined if there's no source. Also there will be\n            // no mediaType argument there.\n            if (mediaType === MediaType.AUDIO) {\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\n            } else if (mediaType === MediaType.VIDEO) {\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\n                mediaInfo.videoType = endpointMediaSource ? endpointMediaSource.videoType : undefined;\n\n                const codecTypeNode = filterNodeFromPresenceJSON(lastPresence, 'jitsi_participant_codecType');\n\n                if (codecTypeNode.length > 0) {\n                    mediaInfo.codecType = codecTypeNode[0].value;\n                }\n            } else {\n                throw new Error(`Unsupported media type: ${mediaType}`);\n            }\n\n            return mediaInfo;\n        }\n\n        return legacyGetPeerMediaInfo();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerSourceInfo(owner, sourceName) {\n        const mediaInfo = {\n            muted: true, // muted by default\n            videoType: VideoType.CAMERA // 'camera' by default\n        };\n\n        return this._remoteSourceState[owner]\n            ? this._remoteSourceState[owner][sourceName] ?? mediaInfo\n            : undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingOwner = this.ssrcOwners.get(ssrc);\n\n        if (existingOwner && existingOwner !== endpointId) {\n            logger.error(`SSRC owner re-assigned from ${existingOwner} to ${endpointId}`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackMuteStatus(sourceName, muted) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        this._localSourceState[sourceName].muted = muted;\n\n        if (this.chatRoom) {\n            // FIXME This only adjusts the presence, but doesn't actually send it. Here we temporarily rely on\n            // the legacy signaling part to send the presence. Remember to add \"send presence\" here when the legacy\n            // signaling is removed.\n            return this._addLocalSourceInfoToPresence();\n        }\n\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackVideoType(sourceName, videoType) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        if (this._localSourceState[sourceName].videoType !== videoType) {\n            // Include only if not a camera (default)\n            this._localSourceState[sourceName].videoType = videoType === VideoType.CAMERA ? undefined : videoType;\n\n            // NOTE this doesn't send the actual presence, because is called from the same place where the legacy video\n            // type is emitted which does the actual sending. A send presence statement needs to be added when\n            // the legacy part is removed.\n            return this._addLocalSourceInfoToPresence();\n        }\n\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getTrackSourceName(ssrc) {\n        return this._sourceNames.get(ssrc);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackSourceName(ssrc, sourceName) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingName = this._sourceNames.get(ssrc);\n\n        if (existingName && existingName !== sourceName) {\n            logger.error(`SSRC(${ssrc}) sourceName re-assigned from ${existingName} to ${sourceName}`);\n        }\n\n        this._sourceNames.set(ssrc, sourceName);\n    }\n\n}\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\nimport $ from 'jquery';\nimport isEqual from 'lodash.isequal';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport { CodecSelection } from './modules/RTC/CodecSelection';\nimport RTC from './modules/RTC/RTC';\nimport { SS_DEFAULT_FRAME_RATE } from './modules/RTC/ScreenObtainer';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedHandling\n    from './modules/connectivity/IceFailedHandling';\nimport ParticipantConnectionStatusHandler\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport ReceiveVideoController from './modules/qualitycontrol/ReceiveVideoController';\nimport SendVideoController from './modules/qualitycontrol/SendVideoController';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport Settings from './modules/settings/Settings';\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport RandomUtil from './modules/util/RandomUtil';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport SignalingLayerImpl from './modules/xmpp/SignalingLayerImpl';\nimport {\n    FEATURE_E2EE,\n    FEATURE_JIGASI,\n    JITSI_MEET_MUC_TYPE\n} from './modules/xmpp/xmpp';\nimport BridgeVideoType from './service/RTC/BridgeVideoType';\nimport CodecMimeType from './service/RTC/CodecMimeType';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport { getSourceNameForJitsiTrack } from './service/RTC/SignalingLayer';\nimport { VideoType } from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_DECLINED,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createConferenceEvent,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\n * restart logic.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name.toString()) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.connection = options.connection;\n    this.xmpp = this.connection?.xmpp;\n\n    if (this.xmpp.isRoomCreated(options.name, options.customDomain)) {\n        const errmsg = 'A conference with the same name has already been created!';\n\n        delete this.connection;\n        delete this.xmpp;\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n    this.participants = {};\n\n    /**\n     * The signaling layer instance.\n     * @type {SignalingLayerImpl}\n     * @private\n     */\n    this._signalingLayer = new SignalingLayerImpl();\n\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // when muted by focus we receive the jid of the initiator of the mute\n    this.mutedByFocusActor = null;\n\n    this.isVideoMutedByFocus = false;\n\n    // when video muted by focus we receive the jid of the initiator of the mute\n    this.mutedVideoByFocusActor = null;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Detects issues with the audio of remote participants.\n     * @type {AudioOutputProblemDetector}\n     */\n    if (!options.config.disableAudioLevels) {\n        this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\n    }\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n\n    /**\n     * If the conference.joined event has been sent this will store the timestamp when it happened.\n     *\n     * @type {undefined|number}\n     * @private\n     */\n    this._conferenceJoinAnalyticsEventSent = undefined;\n\n    /**\n     * End-to-End Encryption. Make it available if supported.\n     */\n    if (this.isE2EESupported()) {\n        logger.info('End-to-End Encryption is supported');\n\n        this._e2eEncryption = new E2EEncryption(this);\n    }\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max audio sender limit has\n     * been reached for the call. Once this is set, unmuting audio will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._audioSenderLimitReached = undefined;\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max video sender limit has\n     * been reached for the call. Once this is set, unmuting video will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._videoSenderLimitReached = undefined;\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Create a resource for the a jid. We use the room nickname (the resource part\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\n * into a 32bit field.\n *\n * @param {string} jid - The id set onto the XMPP connection.\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\n * to the XMPP service with a password.\n * @returns {string}\n * @static\n */\nJitsiConference.resourceCreator = function(jid, isAuthenticatedUser) {\n    let mucNickname;\n\n    if (isAuthenticatedUser) {\n        // For authenticated users generate a random ID.\n        mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n    } else {\n        // We try to use the first part of the node (which for anonymous users\n        // on prosody is a UUID) to match the previous behavior (and maybe make\n        // debugging easier).\n        mucNickname = Strophe.getNodeFromJid(jid)?.substr(0, 8)\n            .toLowerCase();\n\n        // But if this doesn't have the required format we just generate a new\n        // random nickname.\n        const re = /[0-9a-f]{8}/g;\n\n        if (!mucNickname || !re.test(mucNickname)) {\n            mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n        }\n    }\n\n    return mucNickname;\n};\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    this.eventManager.setupXMPPListeners();\n\n    const { config } = this.options;\n\n    // Get the codec preference settings from config.js.\n    // 'preferH264' and 'disableH264' settings have been deprecated for a while,\n    // 'preferredCodec' and 'disabledCodec' will have precedence over them.\n    const codecSettings = {\n        disabledCodec: config.videoQuality\n            ? config.videoQuality.disabledCodec\n            : config.p2p && config.p2p.disableH264 && CodecMimeType.H264,\n        enforcePreferredCodec: config.videoQuality && config.videoQuality.enforcePreferredCodec,\n        jvbCodec: (config.videoQuality && config.videoQuality.preferredCodec)\n            || (config.preferH264 && CodecMimeType.H264),\n        p2pCodec: config.p2p\n            ? config.p2p.preferredCodec || (config.p2p.preferH264 && CodecMimeType.H264)\n            : CodecMimeType.VP8\n    };\n\n    this.codecSelection = new CodecSelection(this, codecSettings);\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\n    this.room = this.xmpp.createRoom(\n        this.options.name, {\n            ...config,\n            statsId: this._statsCurrentId\n        },\n        JitsiConference.resourceCreator\n    );\n\n    this._signalingLayer.setChatRoom(this.room);\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n    this._removeLocalSourceOnReject = this._removeLocalSourceOnReject.bind(this);\n    this._updateRoomPresence = this._updateRoomPresence.bind(this);\n    this.room.addListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    this.room.addListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    if (config.e2eping?.enabled) {\n        this.e2eping = new E2ePing(\n            this,\n            config,\n            (message, to) => {\n                try {\n                    this.sendMessage(message, to, true /* sendThroughVideobridge */);\n                } catch (error) {\n                    logger.warn('Failed to send E2E ping request or response.', error && error.msg);\n                }\n            });\n    }\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            this._registerRtcListeners(this.rtc);\n        }\n    }\n\n    this.receiveVideoController = new ReceiveVideoController(this, this.rtc);\n    this.sendVideoController = new SendVideoController(this, this.rtc);\n\n    // Do not initialize ParticipantConnectionStatusHandler when source-name signaling is enabled.\n    if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n        this.participantConnectionStatus\n        = new ParticipantConnectionStatusHandler(\n            this.rtc,\n            this,\n            {\n                // These options are not public API, leaving it here only as an entry point through config for tuning\n                // up purposes. Default values should be adjusted as soon as optimal values are discovered.\n                p2pRtcMuteTimeout: config._p2pConnStatusRtcMuteTimeout,\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n        this.participantConnectionStatus.init();\n    }\n\n    // Add the ability to enable callStats only on a percentage of users based on config.js settings.\n    let enableCallStats = true;\n\n    if (config.testing && config.testing.callStatsThreshold) {\n        enableCallStats = (Math.random() * 100) <= config.testing.callStatsThreshold;\n    }\n\n    if (!this.statistics) {\n        this.statistics = new Statistics(this.xmpp, {\n            aliasName: this._statsCurrentId,\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\n            siteID: config.siteID,\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\n            enableCallStats,\n            roomName: this.options.name,\n            applicationName: config.applicationName,\n            getWiFiStatsMethod: config.getWiFiStatsMethod,\n            configParams: config.callStatsConfigParams\n        });\n        Statistics.analytics.addPermanentProperties({\n            'callstats_name': this._statsCurrentId\n        });\n\n        // Start performance observer for monitoring long tasks\n        if (config.longTasksStatsInterval) {\n            this.statistics.attachLongTasksStats(this);\n        }\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    // Disable VAD processing on Safari since it causes audio input to\n    // fail on some of the mobile devices.\n    if (config.enableTalkWhileMuted && browser.supportsVADDetection()) {\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\n        // based detection.\n        if (config.createVADProcessor) {\n            logger.info('Using VAD detection for generating talk while muted events');\n\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\n\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\n        }\n    }\n\n    // Disable noisy mic detection on safari since it causes the audio input to\n    // fail on Safari on iPadOS.\n    if (config.enableNoisyMicDetection && browser.supportsVADDetection()) {\n        if (config.createVADProcessor) {\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadNoiseDetection = new VADNoiseDetection();\n\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\n\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\n        }\n    }\n\n    // Generates events based on no audio input detector.\n    if (config.enableNoAudioDetection) {\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\n        });\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\n        });\n    }\n\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n\n    // Publish the codec type to presence.\n    this.setLocalParticipantProperty('codecType', this.codecSelection.getPreferredCodec());\n\n    // Set transcription language presence extension.\n    // In case the language config is undefined or has the default value that the transcriber uses\n    // (in our case Jigasi uses 'en-US'), don't set the participant property in order to avoid\n    // needlessly polluting the presence stanza.\n    if (config && config.transcriptionLanguage && config.transcriptionLanguage !== 'en-US') {\n        this.setLocalParticipantProperty('transcription_language', config.transcriptionLanguage);\n    }\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n * @param replaceParticipant {boolean} whether the current join replaces\n * an existing participant with same jwt from the meeting.\n */\nJitsiConference.prototype.join = function(password, replaceParticipant = false) {\n    if (this.room) {\n        this.room.join(password, replaceParticipant).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\n    return authenticateAndUpgradeRole.call(this, {\n        ...options,\n        onCreateResource: JitsiConference.resourceCreator\n    });\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @param reason {string|undefined} The reason for leaving the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = async function(reason) {\n    if (this.participantConnectionStatus) {\n        this.participantConnectionStatus.dispose();\n        this.participantConnectionStatus = null;\n    }\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this._audioOutputProblemDetector) {\n        this._audioOutputProblemDetector.dispose();\n        this._audioOutputProblemDetector = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n\n    this._sendConferenceLeftAnalyticsEvent();\n\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    this._maybeClearSITimeout();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // Leave the conference. If this.room == null we are calling second time leave().\n    if (!this.room) {\n        throw new Error('You have already left the conference');\n    }\n\n    const room = this.room;\n\n    // Unregister connection state listeners\n    room.removeListener(\n        XMPPEvents.CONNECTION_INTERRUPTED,\n        this._onIceConnectionInterrupted);\n    room.removeListener(\n        XMPPEvents.CONNECTION_RESTORED,\n        this._onIceConnectionRestored);\n    room.removeListener(\n        XMPPEvents.CONNECTION_ESTABLISHED,\n        this._onIceConnectionEstablished);\n\n    room.removeListener(\n        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n    room.removeListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    room.removeListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    this.eventManager.removeXMPPListeners();\n\n    this._signalingLayer.setChatRoom(null);\n\n    this.room = null;\n\n    let leaveError;\n\n    try {\n        await room.leave(reason);\n    } catch (err) {\n        leaveError = err;\n\n        // Remove all participants because currently the conference\n        // won't be usable anyway. This is done on success automatically\n        // by the ChatRoom instance.\n        this.getParticipants().forEach(\n            participant => this.onMemberLeft(participant.getJid()));\n    }\n\n    if (this.rtc) {\n        this.rtc.destroy();\n    }\n\n    if (leaveError) {\n        throw leaveError;\n    }\n};\n\n/**\n * Returns <tt>true</tt> if end conference support is enabled in the backend.\n *\n * @returns {boolean} whether end conference is supported in the backend.\n */\nJitsiConference.prototype.isEndConferenceSupported = function() {\n    return Boolean(this.room && this.room.xmpp.endConferenceComponentAddress);\n};\n\n/**\n * Ends the conference.\n */\nJitsiConference.prototype.end = function() {\n    if (!this.isEndConferenceSupported()) {\n        logger.warn('Cannot end conference: is not supported.');\n\n        return;\n    }\n    if (!this.room) {\n        throw new Error('The conference has been already left');\n    }\n\n    this.room.end();\n};\n\n/**\n * Returns the currently active media session if any.\n *\n * @returns {JingleSessionPC|undefined}\n */\nJitsiConference.prototype.getActiveMediaSession = function() {\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n};\n\n/**\n * Returns an array containing all media sessions existing in this conference.\n *\n * @returns {Array<JingleSessionPC>}\n */\nJitsiConference.prototype.getMediaSessions = function() {\n    const sessions = [];\n\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\n\n    return sessions;\n};\n\n/**\n * Registers event listeners on the RTC instance.\n * @param {RTC} rtc - the RTC module instance used by this conference.\n * @private\n * @returns {void}\n */\nJitsiConference.prototype._registerRtcListeners = function(rtc) {\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        for (const localTrack of this.rtc.localTracks) {\n            localTrack.isVideoTrack() && this._sendBridgeVideoTypeMessage(localTrack);\n        }\n    });\n};\n\n/**\n * Sends the 'VideoTypeMessage' to the bridge on the bridge channel so that the bridge can make bitrate allocation\n * decisions based on the video type of the local source.\n *\n * @param {JitsiLocalTrack} localtrack - The track associated with the local source signaled to the bridge.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._sendBridgeVideoTypeMessage = function(localtrack) {\n    let videoType = !localtrack || localtrack.isMuted() ? BridgeVideoType.NONE : localtrack.getVideoType();\n\n    if (videoType === BridgeVideoType.DESKTOP && this._desktopSharingFrameRate > SS_DEFAULT_FRAME_RATE) {\n        videoType = BridgeVideoType.DESKTOP_HIGH_FPS;\n    }\n\n    if (FeatureFlags.isSourceNameSignalingEnabled() && localtrack) {\n        this.rtc.sendSourceVideoType(localtrack.getSourceName(), videoType);\n    } else if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n        this.rtc.setVideoType(videoType);\n    }\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name.toString();\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Returns all the local video tracks.\n * @returns {Array<JitsiLocalTrack>}\n */\nJitsiConference.prototype.getLocalVideoTracks = function() {\n    return this.rtc ? this.rtc.getLocalVideoTracks() : null;\n};\n\n/**\n * Obtains the performance statistics.\n * @returns {Object|null}\n */\nJitsiConference.prototype.getPerformanceStats = function() {\n    return {\n        longTasksStats: this.statistics.getLongTasksStats()\n    };\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  * @param handler {Function} handler to remove for the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.removePresenceListener(command, handler);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendMessage(message, elementName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addOrReplaceInPresence(name, values) && this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        const nickKey = 'nick';\n\n        // if there is no display name already set, avoid setting an empty one\n        if (!name && !this.room.getFromPresence(nickKey)) {\n            return;\n        }\n\n        this.room.addOrReplaceInPresence(nickKey, {\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n            value: name\n        }) && this.room.sendPresence();\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    } else {\n        logger.warn(`Failed to set subject, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param {JitsiLocalTrack} track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    const mediaType = track.getType();\n    const localTracks = this.rtc.getLocalTracks(mediaType);\n\n    // Ensure there's exactly 1 local track of each media type in the conference.\n    if (localTracks.length > 0) {\n        // Don't be excessively harsh and severe if the API client happens to attempt to add the same local track twice.\n        if (track === localTracks[0]) {\n            return Promise.resolve(track);\n        }\n\n        // Currently, only adding multiple video streams of different video types is supported.\n        // TODO - remove this limitation once issues with jitsi-meet trying to add multiple camera streams is fixed.\n        if (FeatureFlags.isMultiStreamSupportEnabled()\n            && mediaType === MediaType.VIDEO\n            && !localTracks.find(t => t.getVideoType() === track.getVideoType())) {\n            const sourceName = getSourceNameForJitsiTrack(\n                this.myUserId(),\n                mediaType,\n                this.getLocalTracks(mediaType)?.length);\n\n            track.setSourceName(sourceName);\n            const addTrackPromises = [];\n\n            this.p2pJingleSession && addTrackPromises.push(this.p2pJingleSession.addTracks([ track ]));\n            this.jvbJingleSession && addTrackPromises.push(this.jvbJingleSession.addTracks([ track ]));\n\n            return Promise.all(addTrackPromises)\n                .then(() => {\n                    this._setupNewTrack(track);\n                    this._sendBridgeVideoTypeMessage(track);\n                    this._updateRoomPresence(this.getActiveMediaSession());\n\n                    if (this.isMutedByFocus || this.isVideoMutedByFocus) {\n                        this._fireMuteChangeEvent(track);\n                    }\n                });\n        }\n\n        return Promise.reject(new Error(`Cannot add second ${mediaType} track to the conference`));\n    }\n\n    return this.replaceTrack(null, track)\n        .then(() => {\n            // Presence needs to be sent here for desktop track since we need the presence to reach the remote peer\n            // before signaling so that a fake participant tile is created for screenshare. Otherwise, presence will\n            // only be sent after a session-accept or source-add is ack'ed.\n            if (track.getVideoType() === VideoType.DESKTOP && FeatureFlags.isMultiStreamSupportEnabled()) {\n                this._updateRoomPresence(this.getActiveMediaSession());\n            }\n        });\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(audioLevel, tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.AUDIO);\n    } else if (this.isVideoMutedByFocus && track.isVideoTrack() && !track.isMuted()) {\n        this.isVideoMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.VIDEO);\n    }\n\n    let actorParticipant;\n\n    if (this.mutedByFocusActor && track.isAudioTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    } else if (this.mutedVideoByFocusActor && track.isVideoTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedVideoByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    }\n\n    // Send the video type message to the bridge if the track is not removed/added to the pc as part of\n    // the mute/unmute operation. This currently happens only on Firefox.\n    if (track.isVideoTrack() && !browser.doesVideoMuteByStreamRemove()) {\n        this._sendBridgeVideoTypeMessage(track);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\n};\n\n/**\n * Returns the list of local tracks that need to be added to the peerconnection on join.\n * This takes the startAudioMuted/startVideoMuted flags into consideration since we do not\n * want to add the tracks if the user joins the call audio/video muted. The tracks will be\n * added when the user unmutes for the first time.\n * @returns {Array<JitsiLocalTrack>} - list of local tracks that are unmuted.\n */\nJitsiConference.prototype._getInitialLocalTracks = function() {\n    // Always add the audio track on certain platforms:\n    //  * Safari / WebKit: because of a known issue where audio playout doesn't happen\n    //    if the user joins audio and video muted.\n    //  * React Native: after iOS 15, if a user joins muted they won't be able to unmute.\n    return this.getLocalTracks()\n        .filter(track => {\n            const trackType = track.getType();\n\n            if (trackType === MediaType.AUDIO\n                    && (!this.isStartAudioMuted() || browser.isWebKitBased() || browser.isReactNative())) {\n                return true;\n            } else if (trackType === MediaType.VIDEO && !this.isStartVideoMuted()) {\n                return true;\n            }\n\n            return false;\n        });\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track.setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, track.muteHandler);\n    if (track.isAudioTrack()) {\n        track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, track.audioLevelHandler);\n    }\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    const oldVideoType = oldTrack?.getVideoType();\n    const mediaType = oldTrack?.getType() || newTrack?.getType();\n    const newVideoType = newTrack?.getVideoType();\n\n    if (FeatureFlags.isMultiStreamSupportEnabled() && oldTrack && newTrack && oldVideoType !== newVideoType) {\n        throw new Error(`Replacing a track of videoType=${oldVideoType} with a track of videoType=${newVideoType} is`\n            + ' not supported in this mode.');\n    }\n\n    if (FeatureFlags.isSourceNameSignalingEnabled() && newTrack) {\n        if (oldTrack) {\n            newTrack.setSourceName(oldTrack.getSourceName());\n        } else {\n            const sourceName = getSourceNameForJitsiTrack(\n                this.myUserId(),\n                mediaType,\n                this.getLocalTracks(mediaType)?.length);\n\n            newTrack.setSourceName(sourceName);\n        }\n    }\n    const oldTrackBelongsToConference = this === oldTrack?.conference;\n\n    if (oldTrackBelongsToConference && oldTrack.disposed) {\n        return Promise.reject(new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n    }\n    if (newTrack?.disposed) {\n        return Promise.reject(new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n    }\n\n    if (oldTrack && !oldTrackBelongsToConference) {\n        logger.warn(`JitsiConference.replaceTrack oldTrack (${oldTrack} does not belong to this conference`);\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrackBelongsToConference ? oldTrack : null, newTrack)\n        .then(() => {\n            oldTrackBelongsToConference && this.onLocalTrackRemoved(oldTrack);\n            newTrack && this._setupNewTrack(newTrack);\n\n            // Send 'VideoTypeMessage' on the bridge channel when a video track is added/removed.\n            if ((oldTrackBelongsToConference && oldTrack?.isVideoTrack()) || newTrack?.isVideoTrack()) {\n                this._sendBridgeVideoTypeMessage(newTrack);\n            }\n            this._updateRoomPresence(this.getActiveMediaSession());\n            if (newTrack !== null && (this.isMutedByFocus || this.isVideoMutedByFocus)) {\n                this._fireMuteChangeEvent(newTrack);\n            }\n\n            return Promise.resolve();\n        })\n        .catch(error => {\n            logger.error(`replaceTrack failed: ${error?.stack}`);\n\n            return Promise.reject(error);\n        });\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Handler for when a source-add for a local source is rejected by Jicofo.\n *\n * @param {JingleSessionPC} jingleSession - The media session.\n * @param {Error} error - The error message.\n * @param {MediaType} mediaType - The media type of the track associated with the source that was rejected.\n * @returns {void}\n */\nJitsiConference.prototype._removeLocalSourceOnReject = function(jingleSession, error, mediaType) {\n    if (!jingleSession) {\n        return;\n    }\n    logger.warn(`Source-add rejected on ${jingleSession}, reason=\"${error?.reason}\", message=\"${error?.msg}\"`);\n    const track = this.getLocalTracks(mediaType)[0];\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_UNMUTE_REJECTED, track);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    const mediaType = newTrack.getType();\n\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack() && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device = devices\n            .find(d => d.kind === `${newTrack.getTrack().kind}input` && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    // Create a source name for this track if it doesn't exist.\n    if (FeatureFlags.isSourceNameSignalingEnabled() && !newTrack.getSourceName()) {\n        const sourceName = getSourceNameForJitsiTrack(\n            this.myUserId(),\n            mediaType,\n            this.getLocalTracks(mediaType)?.length);\n\n        newTrack.setSourceName(sourceName);\n    }\n\n    this.rtc.addLocalTrack(newTrack);\n    newTrack.setConference(this);\n\n    // Add event handlers.\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.addEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, newTrack.muteHandler);\n\n    if (newTrack.isAudioTrack()) {\n        newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n        newTrack.addEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, newTrack.audioLevelHandler);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Sets the video type.\n * @param track\n * @return <tt>true</tt> if video type was changed in presence.\n * @private\n */\nJitsiConference.prototype._setNewVideoType = function(track) {\n    let videoTypeChanged = false;\n\n    if (FeatureFlags.isSourceNameSignalingEnabled() && track) {\n        videoTypeChanged = this._signalingLayer.setTrackVideoType(track.getSourceName(), track.videoType);\n    }\n\n    if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n        const videoTypeTagName = 'videoType';\n\n        // If track is missing we revert to default type Camera, the case where we screenshare and\n        // we return to be video muted.\n        const trackVideoType = track ? track.videoType : VideoType.CAMERA;\n\n        // If video type is camera and there is no videoType in presence, we skip adding it, as this is the default one\n        if (trackVideoType !== VideoType.CAMERA || this.room.getFromPresence(videoTypeTagName)) {\n            // We will not use this.sendCommand here to avoid sending the presence immediately, as later we may also\n            // set the mute status.\n            const legacyTypeChanged = this.room.addOrReplaceInPresence(videoTypeTagName, { value: trackVideoType });\n\n            videoTypeChanged = videoTypeChanged || legacyTypeChanged;\n        }\n    }\n\n    return videoTypeChanged;\n};\n\n/**\n * Sets mute status.\n * @param mediaType\n * @param localTrack\n * @param isMuted\n * @param <tt>true</tt> when presence was changed, <tt>false</tt> otherwise.\n * @private\n */\nJitsiConference.prototype._setTrackMuteStatus = function(mediaType, localTrack, isMuted) {\n    let presenceChanged = false;\n\n    if (FeatureFlags.isSourceNameSignalingEnabled() && localTrack) {\n        presenceChanged = this._signalingLayer.setTrackMuteStatus(localTrack.getSourceName(), isMuted);\n    }\n\n    // Add the 'audioMuted' and 'videoMuted' tags when source name signaling is enabled for backward compatibility.\n    // It won't be used anymore when multiple stream support is enabled.\n    if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n        let audioMuteChanged, videoMuteChanged;\n\n        if (!this.room) {\n            return false;\n        }\n\n        if (mediaType === MediaType.AUDIO) {\n            audioMuteChanged = this.room.addAudioInfoToPresence(isMuted);\n        } else {\n            videoMuteChanged = this.room.addVideoInfoToPresence(isMuted);\n        }\n\n        presenceChanged = presenceChanged || audioMuteChanged || videoMuteChanged;\n    }\n\n    return presenceChanged;\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} in order to add the underlying MediaStream to the RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} track the local track that will be added to the pc.\n * @return {Promise} resolved when the process is done or rejected with a string which describes the error.\n */\nJitsiConference.prototype._addLocalTrackToPc = function(track) {\n    const addPromises = [];\n\n    if (this.jvbJingleSession) {\n        addPromises.push(this.jvbJingleSession.addTrackToPc(track));\n    } else {\n        logger.debug('Add local MediaStream - no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addPromises.push(this.p2pJingleSession.addTrackToPc(track));\n    } else {\n        logger.debug('Add local MediaStream - no P2P Jingle session started yet');\n    }\n\n    return Promise.allSettled(addPromises);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} in order to remove the underlying MediaStream from the\n * RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise} resolved when the process is done or rejected with a string which describes the error.\n */\nJitsiConference.prototype._removeLocalTrackFromPc = function(track) {\n    const removePromises = [];\n\n    if (this.jvbJingleSession) {\n        removePromises.push(this.jvbJingleSession.removeTrackFromPc(track));\n    } else {\n        logger.debug('Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removePromises.push(this.p2pJingleSession.removeTrackFromPc(track));\n    } else {\n        logger.debug('Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.allSettled(removePromises);\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Returns whether or not the current conference has been joined as a hidden\n * user.\n *\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\n * no connection is active.\n */\nJitsiConference.prototype.isHidden = function() {\n    if (!this.connection) {\n        return null;\n    }\n\n    return Strophe.getDomainFromJid(this.connection.getJid())\n        === this.options.config.hiddenDomain;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject(new Error('You are not moderator.'));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Elects the participant with the given id to be the selected participant in\n * order to receive higher video quality (if simulcast is enabled).\n * Or cache it if channel is not created and send it once channel is available.\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipant = function(participantId) {\n    this.selectParticipants([ participantId ]);\n};\n\n/*\n * Elects participants with given ids to be the selected participants in order\n * to receive higher video quality (if simulcast is enabled). The argument\n * should be an array of participant id strings or an empty array; an error will\n * be thrown if a non-array is passed in. The error is thrown as a layer of\n * protection against passing an invalid argument, as the error will happen in\n * the bridge and may not be visible in the client.\n *\n * @param {Array<strings>} participantIds - An array of identifiers for\n * participants.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipants = function(participantIds) {\n    if (!Array.isArray(participantIds)) {\n        throw new Error('Invalid argument; participantIds must be an array.');\n    }\n\n    this.receiveVideoController.selectEndpoints(participantIds);\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.receiveVideoController.getLastN();\n};\n\n/**\n * Obtains the forwarded sources list in this conference.\n * @return {Array<string>|null}\n */\nJitsiConference.prototype.getForwardedSources = function() {\n    return this.rtc.getForwardedSources();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.receiveVideoController.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets\n    // established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    `Failed to adjust video transfer status (${isVideoActive})`,\n                    error);\n            });\n    }\n};\n\n/**\n * Checks if the participant given by participantId is currently included in\n * the last N.\n * @param {string} participantId the identifier of the participant we would\n * like to check.\n * @return {boolean} true if the participant with id is in the last N set or\n * if there's no last N set, false otherwise.\n * @deprecated this method should never be used to figure out the UI, but\n * {@link ParticipantConnectionStatus} should be used instead.\n */\nJitsiConference.prototype.isInLastN = function(participantId) {\n    return this.rtc.isInLastN(participantId);\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Object.values(this.participants);\n};\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount = function(countHidden = false) {\n    let participants = this.getParticipants();\n\n    if (!countHidden) {\n        participants = participants.filter(p => !p.isHidden());\n    }\n\n    // Add one for the local participant.\n    return participants.length + 1;\n};\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants[id];\n};\n\n/**\n * Grant owner rights to the participant.\n * @param {string} id id of the participant to grant owner rights to.\n */\nJitsiConference.prototype.grantOwner = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.setAffiliation(participant.getConnectionJid(), 'owner');\n};\n\n/**\n * Revoke owner rights to the participant or local Participant as\n * the user might want to refuse to be a moderator.\n * @param {string} id id of the participant to revoke owner rights to.\n */\nJitsiConference.prototype.revokeOwner = function(id) {\n    const participant = this.getParticipantById(id);\n    const isMyself = this.myUserId() === id;\n    const role = this.isMembersOnly() ? 'member' : 'none';\n\n    if (isMyself) {\n        this.room.setAffiliation(this.connection.getJid(), role);\n    } else if (participant) {\n        this.room.setAffiliation(participant.getConnectionJid(), role);\n    }\n};\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n * @param {string} reason reason of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id, reason) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid(), reason);\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id, mediaType) {\n    const muteMediaType = mediaType ? mediaType : MediaType.AUDIO;\n\n    if (muteMediaType !== MediaType.AUDIO && muteMediaType !== MediaType.VIDEO) {\n        logger.error(`Unsupported media type: ${muteMediaType}`);\n\n        return;\n    }\n\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true, muteMediaType);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n * @param fullJid the member full jid, if any\n * @param features the member botType, if any\n * @param isReplaceParticipant whether this join replaces a participant with\n * the same jwt.\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType, fullJid, features, isReplaceParticipant) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\n\n    participant.setConnectionJid(fullJid);\n    participant.setRole(role);\n    participant.setBotType(botType);\n    participant.setFeatures(features);\n    participant.setIsReplacing(isReplaceParticipant);\n\n    this.participants[id] = participant;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n\n    this._updateFeatures(participant);\n\n    // maybeStart only if we had finished joining as then we will have information for the number of participants\n    if (this.isJoined()) {\n        this._maybeStartOrStopP2P();\n    }\n\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Get notified when we joined the room.\n *\n * FIXME This should NOT be exposed!\n *\n * @private\n */\nJitsiConference.prototype._onMucJoined = function() {\n    this._maybeStartOrStopP2P();\n};\n\n/**\n * Updates features for a participant.\n * @param {JitsiParticipant} participant - The participant to query for features.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._updateFeatures = function(participant) {\n    participant.getFeatures()\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n\n            if (features.has(FEATURE_JIGASI)) {\n                participant.setProperty('features_jigasi', true);\n            }\n\n            if (features.has(FEATURE_E2EE)) {\n                participant.setProperty('features_e2ee', true);\n            }\n        })\n        .catch(() => false);\n};\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant.setBotType(botType);\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant.getBotType()) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid, reason) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant = this.participants[id];\n    const mediaSessions = this.getMediaSessions();\n    let tracksToBeRemoved = [];\n\n    for (const session of mediaSessions) {\n        const remoteTracks = session.peerconnection.getRemoteTracks(id);\n\n        remoteTracks && (tracksToBeRemoved = [ ...tracksToBeRemoved, ...remoteTracks ]);\n\n        // Remove the ssrcs from the remote description and renegotiate.\n        session.removeRemoteStreamsOnLeave(id);\n    }\n\n    // Fire the event before renegotiation is done so that the thumbnails can be removed immediately.\n    tracksToBeRemoved.forEach(track => {\n        this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n    });\n\n    if (participant) {\n        delete this.participants[id];\n        this.eventEmitter.emit(JitsiConferenceEvents.USER_LEFT, id, participant, reason);\n    }\n\n    if (this.room !== null) { // Skip if we have left the room already.\n        this._maybeStartOrStopP2P(true /* triggered by user left event */);\n        this._maybeClearSITimeout();\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Designates an event indicating that we were kicked from the XMPP MUC.\n * @param {boolean} isSelfPresence - whether it is for local participant\n * or another participant.\n * @param {string} actorId - the id of the participant who was initiator\n * of the kick.\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\n * this is the id of the participant which was kicked.\n * @param {string} reason - reason of the participant to kick\n * @param {boolean?} isReplaceParticipant - whether this is a server initiated kick in order\n * to replace it with a participant with same jwt.\n */\nJitsiConference.prototype.onMemberKicked = function(\n        isSelfPresence,\n        actorId,\n        kickedParticipantId,\n        reason,\n        isReplaceParticipant) {\n    // This check which be true when we kick someone else. With the introduction of lobby\n    // the ChatRoom KICKED event is now also emitted for ourselves (the kicker) so we want to\n    // avoid emitting an event where `undefined` kicked someone.\n    if (actorId === this.myUserId()) {\n        return;\n    }\n\n    const actorParticipant = this.participants[actorId];\n\n    if (isSelfPresence) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.KICKED, actorParticipant, reason, isReplaceParticipant);\n\n        this.leave();\n\n        return;\n    }\n\n    const kickedParticipant = this.participants[kickedParticipantId];\n\n    kickedParticipant.setIsReplaced(isReplaceParticipant);\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant, reason);\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant.setRole(role);\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added to the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this JitsiConference.\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info('Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info('Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        logger.error(`No participant found for id: ${id}`);\n\n        return;\n    }\n\n    // Add track to JitsiParticipant.\n    participant._tracks.push(track);\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.isAudioTrack() && track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED, id, audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n\n        this.p2pJingleSession.setAnswer(answer);\n        this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(jingleSession, jingleOffer) {\n    let rejectReason;\n    const usesUnifiedPlan = browser.supportsUnifiedPlan()\n        && (!browser.isChromiumBased() || (this.options.config.enableUnifiedOnChrome ?? true));\n    const contentName = jingleOffer.find('>content').attr('name');\n    const peerUsesUnifiedPlan = contentName === '0' || contentName === '1';\n\n    // Reject P2P between endpoints that are not running in the same mode w.r.t to SDPs (plan-b and unified plan).\n    if (usesUnifiedPlan !== peerUsesUnifiedPlan) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P across two endpoints in different SDP modes is disabled'\n        };\n    } else if ((!this.isP2PEnabled() && !this.isP2PTestModeEnabled())\n        || browser.isFirefox()\n        || browser.isWebKitBased()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration or browser unsupported'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    } else if (!this._shouldBeInP2PMode()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P requirements not met',\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\n        };\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(jingleSession, jingleOffer, now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(jingleSession, jingleOffer, now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(JitsiConferenceEvents.SERVER_REGION_CHANGED, serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n\n    try {\n        jingleSession.initialize(\n            this.room,\n            this.rtc,\n            this._signalingLayer,\n            {\n                ...this.options.config,\n                enableInsertableStreams: this.isE2EEEnabled()\n            });\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n        logger.error(error);\n\n        return;\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    const localTracks = this._getInitialLocalTracks();\n\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n\n                this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, jingleSession);\n                if (!this.isP2PActive()) {\n                    this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED, jingleSession);\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to accept incoming Jingle session', error);\n            },\n            localTracks\n        );\n\n        // Enable or disable simulcast for plan-b screensharing based on the capture fps if it is set through the UI.\n        this._desktopSharingFrameRate\n            && jingleSession.peerconnection.setDesktopSharingFrameRate(this._desktopSharingFrameRate);\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    let wsUrl = null;\n    const webSocket\n        = $(offerIq)\n            .find('>content>transport>web-socket')\n            .first();\n\n    if (webSocket.length === 1) {\n        wsUrl = webSocket[0].getAttribute('url');\n    }\n\n    if (wsUrl) {\n        // If the offer contains a websocket use it.\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    } else {\n        // Otherwise, fall back to an attempt to use SCTP.\n        this.rtc.initializeBridgeChannel(pc, null);\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(jingleSession, options) {\n    if (options?.errorMsg) {\n        logger.warn(options.errorMsg);\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(jingleSession, reasonCondition, reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        const stopOptions = {};\n\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        } else if (reasonCondition === 'success' && reasonText === 'restart') {\n            // When we are restarting media sessions we don't want to switch the tracks\n            // to the JVB just yet.\n            stopOptions.requestRestart = true;\n        }\n        this._stopP2PSession(stopOptions);\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    const peerConnection = this.getActivePeerConnection();\n\n    if (peerConnection) {\n        peerConnection.sendTones(tones, duration, pause);\n    } else {\n        logger.warn('cannot sendTones: no peer connection');\n    }\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    if (this.room) {\n        return this.room.isSIPCallingSupported();\n    }\n\n    return false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Returns the meeting unique ID if any.\n *\n * @returns {string|undefined}\n */\nJitsiConference.prototype.getMeetingUniqueId = function() {\n    if (this.room) {\n        return this.room.getMeetingId();\n    }\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    const session = this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n\n    return session ? session.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        logger.warn(`Failed to set start muted policy, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n\n        return;\n    }\n    this.startMutedPolicy = policy;\n    this.room.addOrReplaceInPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    }) && this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n * @returns {Promise} Resolves if feedback is submitted successfully.\n */\nJitsiConference.prototype.sendFeedback = function(overallFeedback, detailedFeedback) {\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n/**\n * Finds the SSRC of a given track\n *\n * @param track\n * @returns {number|undefined} the SSRC of the specificed track, otherwise undefined.\n */\nJitsiConference.prototype.getSsrcByTrack = function(track) {\n    return track.isLocal() ? this.getActivePeerConnection()?.getLocalSSRC(track) : track.getSSRC();\n};\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis.\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype.isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends local stats via the bridge channel which then forwards to other endpoints selectively.\n * @param {Object} payload The payload of the message.\n * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n */\nJitsiConference.prototype.sendEndpointStatsMessage = function(payload) {\n    this.rtc.sendEndpointStatsMessage(payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(message, to = '', sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTARTED} event. This happens when the bridge goes down\n * and Jicofo moves conferences away to a different bridge.\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onConferenceRestarted = function(session) {\n    if (!session.isP2P && this.options.config.enableForcedReload) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, JitsiConferenceErrors.CONFERENCE_RESTARTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession({\n            reason: 'connectivity-error',\n            reasonDescription: 'ICE FAILED'\n        });\n    } else if (session && this.jvbJingleSession === session) {\n        this._delayedIceFailed = new IceFailedHandling(this);\n        this._delayedIceFailed.start(session);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(jingleSession, jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n\n            this.eventEmitter.emit(\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                jingleSession);\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks('JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks('P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log\n * messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Adding remote ${logName} track: ${track}`);\n        this.onRemoteTrackAdded(track);\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(jingleSession) {\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession({\n            reason: 'decline',\n            reasonDescription: 'force JVB121'\n        });\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(JitsiConferenceEvents.PROPERTIES_CHANGED, this.properties);\n\n        const audioLimitReached = this.properties['audio-limit-reached'] === 'true';\n        const videoLimitReached = this.properties['video-limit-reached'] === 'true';\n\n        if (this._audioSenderLimitReached !== audioLimitReached) {\n            this._audioSenderLimitReached = audioLimitReached;\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_UNMUTE_PERMISSIONS_CHANGED, audioLimitReached);\n            logger.info(`Audio unmute permissions set by Jicofo to ${audioLimitReached}`);\n        }\n\n        if (this._videoSenderLimitReached !== videoLimitReached) {\n            this._videoSenderLimitReached = videoLimitReached;\n            this.eventEmitter.emit(JitsiConferenceEvents.VIDEO_UNMUTE_PERMISSIONS_CHANGED, videoLimitReached);\n            logger.info(`Video unmute permissions set by Jicofo to ${videoLimitReached}`);\n        }\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count',\n\n            // The conference creation time (set by jicofo).\n            'created-ms'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(sessionNickname, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.onRemoteTrackRemoved(track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\n        () => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        },\n        error => {\n            logger.error(\n                'Failed to resume media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.getLastN() !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    'Failed to sync up P2P video transfer status'\n                        + `(${isVideoActive})`, error);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n    this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED, this.getActiveMediaSession());\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\n        () => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        },\n        error => {\n            logger.error(\n                'Failed to suspend media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!this.isP2PEnabled()\n            || this.isP2PTestModeEnabled()\n            || browser.isFirefox()\n            || browser.isWebKitBased()\n            || this.isE2EEEnabled()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = this._shouldBeInP2PMode();\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (!this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n\n        const myId = this.myUserId();\n        const peersId = peer.getId();\n\n        if (myId > peersId) {\n            logger.debug(\n                'I\\'m the bigger peersId - '\n                + 'the other peer should start P2P', myId, peersId);\n\n            return;\n        } else if (myId === peersId) {\n            logger.error('The same IDs ? ', myId, peersId);\n\n            return;\n        }\n\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Tells whether or not this conference should be currently in the P2P mode.\n *\n * @private\n * @returns {boolean}\n */\nJitsiConference.prototype._shouldBeInP2PMode = function() {\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const hasBotPeer = peers.find(p => p.getBotType() === 'poltergeist' || p.hasFeature(FEATURE_JIGASI)) !== undefined;\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\n\n    return shouldBeInP2P;\n};\n\n/**\n * Stops the current P2P session.\n * @param {Object} options - Options for stopping P2P.\n * @param {string} options.reason - One of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} options.reasonDescription - Text\n * description that will be included in the session terminate message\n * @param {boolean} requestRestart - Whether this is due to a session restart, in which case\n * media will not be resumed on the JVB.\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(options = {}) {\n    const {\n        reason = 'success',\n        reasonDescription = 'Turning off P2P session',\n        requestRestart = false\n    } = options;\n\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession && !requestRestart) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE: whilst this is an error callback,  'success' as a reason is\n            // considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason !== 'success') {\n                logger.error('An error occurred while trying to terminate P2P Jingle session', error);\n            }\n        }, {\n            reason,\n            reasonDescription,\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession && !requestRestart) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Updates room presence if needed and send the packet in case of a modification.\n * @param {JingleSessionPC} jingleSession the session firing the event, contains the peer connection which\n * tracks we will check.\n * @param {Object|null} ctx a context object we can distinguish multiple calls of the same pass of updating tracks.\n */\nJitsiConference.prototype._updateRoomPresence = function(jingleSession, ctx) {\n    if (!jingleSession) {\n        return;\n    }\n\n    // skips sending presence twice for the same pass of updating ssrcs\n    if (ctx) {\n        if (ctx.skip) {\n            return;\n        }\n        ctx.skip = true;\n    }\n\n    let presenceChanged = false;\n    let muteStatusChanged, videoTypeChanged;\n    const localTracks = jingleSession.peerconnection.getLocalTracks();\n    const localAudioTracks = localTracks.filter(track => track.getType() === MediaType.AUDIO);\n    const localVideoTracks = localTracks.filter(track => track.getType() === MediaType.VIDEO);\n\n    // Set presence for all the available local tracks.\n    for (const track of localTracks) {\n        muteStatusChanged = this._setTrackMuteStatus(track.getType(), track, track.isMuted());\n        if (track.getType() === MediaType.VIDEO) {\n            videoTypeChanged = this._setNewVideoType(track);\n        }\n        presenceChanged = presenceChanged || muteStatusChanged || videoTypeChanged;\n    }\n\n    // Set the presence in the legacy format if there are no local tracks and multi stream support is not enabled.\n    if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n        let audioMuteStatusChanged, videoMuteStatusChanged;\n\n        if (!localAudioTracks?.length) {\n            audioMuteStatusChanged = this._setTrackMuteStatus(MediaType.AUDIO, undefined, true);\n        }\n        if (!localVideoTracks?.length) {\n            videoMuteStatusChanged = this._setTrackMuteStatus(MediaType.VIDEO, undefined, true);\n            videoTypeChanged = this._setNewVideoType();\n        }\n\n        presenceChanged = presenceChanged || audioMuteStatusChanged || videoMuteStatusChanged || videoTypeChanged;\n    }\n\n    presenceChanged && this.room.sendPresence();\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n/**\n * Configures the peerconnection so that a given framre rate can be achieved for desktop share.\n *\n * @param {number} maxFps The capture framerate to be used for desktop tracks.\n * @returns {boolean} true if the operation is successful, false otherwise.\n */\nJitsiConference.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    if (typeof maxFps !== 'number' || isNaN(maxFps)) {\n        logger.error(`Invalid value ${maxFps} specified for desktop capture frame rate`);\n\n        return false;\n    }\n\n    this._desktopSharingFrameRate = maxFps;\n\n    // Enable or disable simulcast for plan-b screensharing based on the capture fps.\n    this.jvbJingleSession && this.jvbJingleSession.peerconnection.setDesktopSharingFrameRate(maxFps);\n\n    // Set the capture rate for desktop sharing.\n    this.rtc.setDesktopSharingFrameRate(maxFps);\n\n    return true;\n};\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.stopP2PSession = function(options) {\n    this._stopP2PSession(options);\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sends a face landmarks object to the xmpp server.\n * @param {Object} payload\n */\nJitsiConference.prototype.sendFaceLandmarks = function(payload) {\n    if (payload.faceExpression) {\n        this.xmpp.sendFaceExpressionEvent(this.room.roomjid, payload);\n    }\n};\n\n/**\n * Sets the constraints for the video that is requested from the bridge.\n *\n * @param {Object} videoConstraints The constraints which are specified in the\n * following format. The message updates the fields that are present and leaves the\n * rest unchanged on the bridge. Therefore, any field that is not applicable anymore\n * should be cleared by passing an empty object or list (whatever is applicable).\n * {\n *      'lastN': 20,\n *      'selectedEndpoints': ['A', 'B', 'C'],\n *      'onStageEndpoints': ['A'],\n *      'defaultConstraints': { 'maxHeight': 180 },\n *      'constraints': {\n *          'A': { 'maxHeight': 720 }\n *      }\n * }\n */\nJitsiConference.prototype.setReceiverConstraints = function(videoConstraints) {\n    this.receiveVideoController.setReceiverConstraints(videoConstraints);\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\n    this.receiveVideoController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Sets the maximum video size the local participant should send to remote\n * participants.\n * @param {number} maxFrameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\n    return this.sendVideoController.setPreferredSendMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession = function(sipAddress, displayName) {\n    if (!this.room) {\n        return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n    }\n\n    return this.videoSIPGWHandler\n        .createVideoSIPGWSession(sipAddress, displayName);\n};\n\n/**\n * Sends a conference.join analytics event.\n *\n * @returns {void}\n */\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`\n    }));\n    this._conferenceJoinAnalyticsEventSent = Date.now();\n};\n\n/**\n * Sends conference.left analytics event.\n * @private\n */\nJitsiConference.prototype._sendConferenceLeftAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (!meetingId || !this._conferenceJoinAnalyticsEventSent) {\n\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('left', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`,\n        stats: {\n            duration: Math.floor((Date.now() - this._conferenceJoinAnalyticsEventSent) / 1000),\n            perf: this.getPerformanceStats()\n        }\n    }));\n};\n\n/**\n * Restarts all active media sessions.\n *\n * @returns {void}\n */\nJitsiConference.prototype._restartMediaSessions = function() {\n    if (this.p2pJingleSession) {\n        this._stopP2PSession({\n            reasonDescription: 'restart',\n            requestRestart: true\n        });\n    }\n\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.terminate(\n            null /* success callback => we don't care */,\n            error => {\n                logger.warn('An error occurred while trying to terminate the JVB session', error);\n            }, {\n                reason: 'success',\n                reasonDescription: 'restart required',\n                requestRestart: true,\n                sendSessionTerminate: true\n            });\n    }\n\n    this._maybeStartOrStopP2P(false);\n};\n\n/**\n * Returns whether End-To-End encryption is enabled.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EEEnabled = function() {\n    return Boolean(this._e2eEncryption && this._e2eEncryption.isEnabled());\n};\n\n/**\n * Returns whether End-To-End encryption is supported. Note that not all participants\n * in the conference may support it.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EESupported = function() {\n    return E2EEncryption.isSupported(this.options.config);\n};\n\n/**\n * Enables / disables End-to-End encryption.\n *\n * @param {boolean} enabled whether to enable E2EE or not.\n * @returns {void}\n */\nJitsiConference.prototype.toggleE2EE = function(enabled) {\n    if (!this.isE2EESupported()) {\n        logger.warn('Cannot enable / disable E2EE: platform is not supported.');\n\n        return;\n    }\n\n    this._e2eEncryption.setEnabled(enabled);\n};\n\n/**\n * Sets the key and index for End-to-End encryption.\n *\n * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n * @param {Number} [keyInfo.index] - the index of the encryption key.\n * @returns {void}\n */\nJitsiConference.prototype.setMediaEncryptionKey = function(keyInfo) {\n    this._e2eEncryption.setEncryptionKey(keyInfo);\n};\n\n/**\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\n *\n * @returns {boolean} whether lobby is supported in the backend.\n */\nJitsiConference.prototype.isLobbySupported = function() {\n    return Boolean(this.room && this.room.getLobby().isSupported());\n};\n\n/**\n * Returns <tt>true</tt> if the room has members only enabled.\n *\n * @returns {boolean} whether conference room is members only.\n */\nJitsiConference.prototype.isMembersOnly = function() {\n    return Boolean(this.room && this.room.membersOnlyEnabled);\n};\n\n/**\n * Enables lobby by moderators\n *\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\n */\nJitsiConference.prototype.enableLobby = function() {\n    if (this.room && this.isModerator()) {\n        return this.room.getLobby().enable();\n    }\n\n    return Promise.reject(\n        new Error('The conference not started or user is not moderator'));\n};\n\n/**\n * Disabled lobby by moderators\n *\n * @returns {void}\n */\nJitsiConference.prototype.disableLobby = function() {\n    if (this.room && this.isModerator()) {\n        this.room.getLobby().disable();\n    } else {\n        logger.warn(`Failed to disable lobby, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\n *\n * @param {string} displayName Display name should be set to show it to moderators.\n * @param {string} email Optional email is used to present avatar to the moderator.\n * @returns {Promise<never>}\n */\nJitsiConference.prototype.joinLobby = function(displayName, email) {\n    if (this.room) {\n        return this.room.getLobby().join(displayName, email);\n    }\n\n    return Promise.reject(new Error('The conference not started'));\n};\n\n/**\n * Gets the local id for a participant in a lobby room.\n * Returns undefined when current participant is not in the lobby room.\n * This is used for lobby room private chat messages.\n *\n * @returns {string}\n */\nJitsiConference.prototype.myLobbyUserId = function() {\n    if (this.room) {\n        return this.room.getLobby().getLocalId();\n    }\n};\n\n/**\n * Sends a message to a lobby room.\n * When id is specified it sends a private message.\n * Otherwise it sends the message to all moderators.\n * @param {message} Object The message to send\n * @param {string} id The participant id.\n *\n * @returns {void}\n */\nJitsiConference.prototype.sendLobbyMessage = function(message, id) {\n    if (this.room) {\n        if (id) {\n            return this.room.getLobby().sendPrivateMessage(id, message);\n        }\n\n        return this.room.getLobby().sendMessage(message);\n    }\n};\n\n/**\n * Adds a message listener to the lobby room\n * @param {Function} listener The listener function,\n * called when a new message is received in the lobby room.\n *\n * @returns {Function} Handler returned to be able to remove it later.\n */\nJitsiConference.prototype.addLobbyMessageListener = function(listener) {\n    if (this.room) {\n        return this.room.getLobby().addMessageListener(listener);\n    }\n};\n\n/**\n * Removes a message handler from the lobby room\n * @param {Function} handler The handler function  to remove.\n *\n * @returns {void}\n */\nJitsiConference.prototype.removeLobbyMessageHandler = function(handler) {\n    if (this.room) {\n        return this.room.getLobby().removeMessageHandler(handler);\n    }\n};\n\n/**\n * Denies an occupant in the lobby room access to the conference.\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().denyAccess(id);\n    }\n};\n\n/**\n * Approves the request to join the conference to a participant waiting in the lobby.\n *\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyApproveAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().approveAccess(id);\n    }\n};\n\n/**\n * Returns <tt>true</tt> if AV Moderation support is enabled in the backend.\n *\n * @returns {boolean} whether AV Moderation is supported in the backend.\n */\nJitsiConference.prototype.isAVModerationSupported = function() {\n    return Boolean(this.room && this.room.getAVModeration().isSupported());\n};\n\n/**\n * Enables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.enableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(true, mediaType);\n    } else {\n        logger.warn(`Failed to enable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Disables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.disableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(false, mediaType);\n    } else {\n        logger.warn(`Failed to disable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Approve participant access to certain media, allows unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationApprove = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().approve(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation approve skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Reject participant access to certain media, blocks unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationReject = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().reject(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation reject skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Returns the breakout rooms manager object.\n *\n * @returns {Object} the breakout rooms manager.\n */\nJitsiConference.prototype.getBreakoutRooms = function() {\n    return this.room?.getBreakoutRooms();\n};\n\n/**\n * Returns the metadata handler object.\n *\n * @returns {Object} the room metadata handler.\n */\nJitsiConference.prototype.getMetadataHandler = function() {\n    return this.room?.getMetadataHandler();\n};\n","import JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\nimport {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(appID, token, options) {\n    this.appID = appID;\n    this.token = token;\n    this.options = options;\n    this.xmpp = new XMPP(options, token);\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    return this.xmpp.disconnect(...args);\n};\n\n/**\n * Returns the jid of the participant associated with the XMPP connection.\n *\n * @returns {string} The jid of the participant.\n */\nJitsiConnection.prototype.getJid = function() {\n    return this.xmpp.getJid();\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(name, options) {\n    return new JitsiConference({\n        name,\n        config: options,\n        connection: this\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    this.xmpp.caps.addFeature(feature, submit, true);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    this.xmpp.caps.removeFeature(feature, submit, true);\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConnection.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n","/**\n * The events for the media devices.\n */\n\nexport enum JitsiMediaDevicesEvents {\n    /**\n     * Indicates that the list of available media devices has been changed. The\n     * event provides the following parameters to its listeners:\n     *\n     * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n     *  MediaDeviceInfo-like objects that are currently connected.\n     *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n     */\n    DEVICE_LIST_CHANGED = 'mediaDevices.devicechange',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED = 'rtc.permissions_changed',\n\n    /**\n     * Indicates that the environment is currently showing permission prompt to\n     * access camera and/or microphone. The event provides the following\n     * parameters to its listeners:\n     *\n     * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n     *  |'react-native'|'android'} environmentType - type of browser or\n     *  other execution environment.\n     */\n    PERMISSION_PROMPT_IS_SHOWN = 'mediaDevices.permissionPromptIsShown',\n\n    SLOW_GET_USER_MEDIA = 'mediaDevices.slowGetUserMedia'\n};\n\n// exported for backward compatibility\nexport const DEVICE_LIST_CHANGED = JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED;\nexport const PERMISSIONS_CHANGED = JitsiMediaDevicesEvents.PERMISSIONS_CHANGED;\nexport const PERMISSION_PROMPT_IS_SHOWN = JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN;\nexport const SLOW_GET_USER_MEDIA = JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA;\n","import EventEmitter from 'events';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport Statistics from './modules/statistics/statistics';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._permissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n\n        // We would still want to update the permissions cache in case the permissions API is not supported.\n        RTC.addListener(\n            RTCEvents.PERMISSIONS_CHANGED,\n            permissions => this._handlePermissionsChange(permissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and 'microphone' permissions are\n        // implemented. If supported add onchange listeners.\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            const self = this;\n\n            const promises = [];\n\n            promises.push(navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.VIDEO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.VIDEO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            promises.push(navigator.permissions.query({ name: AUDIO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.AUDIO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.AUDIO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            Promise.all(promises).then(results => resolve(results.every(supported => supported)));\n\n        });\n    }\n\n\n    /**\n     * Parses a PermissionState object and returns true for granted and false otherwise.\n     *\n     * @param {PermissionState} permissionStatus - The PermissionState object retrieved from the Permissions API.\n     * @returns {boolean} - True for granted and false for denied.\n     * @throws {TypeError}\n     */\n    _parsePermissionState(permissionStatus = {}) {\n        // The status attribute is deprecated, and state\n        // should be used instead, but check both for now\n        // for backwards compatibility.\n        const status = permissionStatus.state || permissionStatus.status;\n\n        if (typeof status !== 'string') {\n            throw new TypeError();\n        }\n\n        return status === PERMISSION_GRANTED_STATUS;\n    }\n\n    /**\n     * Updates the local granted/denied permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} permissions - Object with the permissions.\n     */\n    _handlePermissionsChange(permissions) {\n        const hasPermissionsChanged\n            = [ MediaType.AUDIO, MediaType.VIDEO ]\n                .some(type => type in permissions && permissions[type] !== this._permissions[type]);\n\n        if (hasPermissionsChanged) {\n            this._permissions = {\n                ...this._permissions,\n                ...permissions\n            };\n            this._eventEmitter.emit(JitsiMediaDevicesEvents.PERMISSIONS_CHANGED, this._permissions);\n\n            if (this._permissions[MediaType.AUDIO] || this._permissions[MediaType.VIDEO]) {\n                // Triggering device list update when the permissiions are granted in order to update\n                // the labels the devices.\n                // eslint-disable-next-line no-empty-function\n                this.enumerateDevices(() => {});\n            }\n        }\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._permissions) {\n                resolve(this._permissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        try {\n                            return this._parsePermissionState(permissionStatus);\n                        } catch {\n                            return false;\n                        }\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !(\n            (browser.isFirefox() && browser.isVersionLessThan('101'))\n            || browser.isIosBrowser()\n        );\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n}\n\nexport default new JitsiMediaDevices();\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTC from '../RTC/RTC';\nimport Statistics from '../statistics/statistics';\n\n\nconst logger = getLogger(__filename);\n\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\n// i.e. audioLevel > 0.008\nconst DETECTION_TIMEOUT = 3000;\n\n\n/**\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n *\n * @returns Promise<Object> - Object containing information about the found device.\n */\nexport default function getActiveAudioDevice() {\n\n    return new Promise(resolve => {\n        RTC.enumerateDevices(devices => {\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\n            const devicePromiseArray = [];\n\n\n            for (const micDevice of audioDevices) {\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\n\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\n                    // that's  why only take p.value[0].\n                    const track = tracks[0];\n\n                    Statistics.startLocalStats(track, track.setAudioLevel.bind(track));\n\n                    return track;\n                });\n\n                devicePromiseArray.push(devicePromise);\n            }\n\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\n\n\n                const availableDevices = successfulPromises.map(p => p.value);\n                const rejectReasons = rejectedPromises.map(p => p.value);\n\n                for (const reason of rejectReasons) {\n                    logger.error('Failed to acquire audio device with error: ', reason);\n                }\n\n                // Setup event handlers for monitored devices.\n                for (const device of availableDevices) {\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\n                        // no input.\n                        if (audioLevel > 0.008) {\n                            stopActiveDevices(availableDevices);\n                            resolve({ deviceId: device.deviceId,\n                                deviceLabel: device.track.label });\n                        }\n                    });\n                }\n\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\n                setTimeout(() => {\n                    stopActiveDevices(availableDevices);\n                    resolve({\n                        deviceId: '',\n                        deviceLabel: '' }\n                    );\n                }, DETECTION_TIMEOUT);\n\n            });\n\n        });\n    });\n}\n\n/**\n * Stop the streams of the provided JitsiLocalTracks.\n *\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\n * @returns {void}\n */\nfunction stopActiveDevices(deviceList) {\n    for (const device of deviceList) {\n        device.stopStream();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport SignalingLayer from '../../service/RTC/SignalingLayer';\n\n\nconst logger = getLogger(__filename);\n\n\n/**\n * Custom semi-mock implementation for the Proxy connection service.\n */\nexport default class CustomSignalingLayer extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams.\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        this.chatRoom = room;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType, sourceName) { // eslint-disable-line no-unused-vars\n        return {};\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerSourceInfo(owner, sourceName) { // eslint-disable-line no-unused-vars\n        return undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingOwner = this.ssrcOwners.get(ssrc);\n\n        if (existingOwner && existingOwner !== endpointId) {\n            logger.error(`SSRC owner re-assigned from ${existingOwner} to ${endpointId}`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackMuteStatus(sourceName, muted) { // eslint-disable-line no-unused-vars\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackVideoType(sourceName, videoType) { // eslint-disable-line no-unused-vars\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getTrackSourceName(ssrc) { // eslint-disable-line no-unused-vars\n        return undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackSourceName(ssrc, sourceName) { // eslint-disable-line no-unused-vars\n    }\n}\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport enum ACTIONS {\n    ACCEPT = 'session-accept',\n    CONNECTION_ERROR = 'connection-error-encountered',\n    INITIATE = 'session-initiate',\n    TERMINATE = 'session-terminate',\n    TRANSPORT_INFO = 'transport-info',\n    UNAVAILABLE = 'unavailable'\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport RTC from '../RTC/RTC';\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport CustomSignalingLayer from './CustomSignalingLayer';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should send offers. If false, the local\n     * client should send answers. Defaults to false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote media stream has been received\n     * through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which the peer connection is being establish\n     * and which should receive direct messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer connection should accept incoming video\n     * streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            pcConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\n            // spot has no signalling it will not be in a meeting where this is used.\n            connected: true,\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage,\n\n            // Returns empty function, because it does not add any listeners for real\n            // eslint-disable-next-line no-empty-function\n            addEventListener: () => () => { }\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const pcConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.pcConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@link JingleSessionPC} expects an instance of\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addEventListener: () => { /* no op */ },\n            addPresenceListener: () => { /* no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            getMediaPresenceInfo: () => {\n                // Errors occur if this function does not return an object\n\n                return {};\n            },\n            removeEventListener: () => { /* no op */ },\n            removePresenceListener: () => { /* no-op */ },\n            supportsRestartByTerminate: () => false\n        };\n\n        /**\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\n         * @type {Object}\n         */\n        const conferenceStub = {\n            myUserId: () => ''\n        };\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(conferenceStub, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            pcConfigStub, // pcConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        const signalingLayer = new CustomSignalingLayer();\n\n        signalingLayer.setChatRoom(roomStub);\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, signalingLayer, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $iq } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied video should be returned as a desktop\n     * stream. Defaults to false.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The {@code JitsiConnection} which will be used to fetch\n     * TURN credentials for the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote video stream has been received and\n     * converted to a {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out. The\n     * arguments passed in are the jid to send the message to and the message.\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            pcConfig: jitsiConnection && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            pcConfig: this._options.pcConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.createLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","import EventEmitter from 'events';\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst PRECALL_TEST_RESULTS = 'preCallTestResults';\nconst emitter = new EventEmitter();\nlet _initialized = false;\nlet api = null;\n\n/**\n * Loads the callstats io script.\n *\n * @returns {Promise<void>}\n */\nfunction _loadScript(options) {\n    if (browser.isReactNative()) {\n        return;\n    }\n\n    return new Promise(resolve => {\n        ScriptUtil.loadScript(\n            options.callStatsCustomScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ resolve);\n    });\n}\n\n/**\n * Initializes the callstats lib and registers a callback to be invoked\n * when there are 'preCallTestResults'.\n *\n * @typedef PrecallTestOptions\n * @type {Object}\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} statisticsId - The user name to use when initializing callstats.\n * @property {string} statisticsDisplayName - The user display name.\n *\n * @param { PrecallTestOptions} options - The init options.\n * @returns {Promise<void>}\n */\nfunction _initialize(options) {\n    return new Promise((resolve, reject) => {\n        const appId = options.callStatsID;\n        const appSecret = options.callStatsSecret;\n        const userId = options.statisticsId || options.statisticsDisplayName || Settings.callStatsUserName;\n\n        api.initialize(appId, appSecret, userId, (status, message) => {\n            if (status === 'success') {\n                api.on(PRECALL_TEST_RESULTS, (...args) => {\n                    emitter.emit(PRECALL_TEST_RESULTS, ...args);\n                });\n                _initialized = true;\n                resolve();\n            } else {\n                reject({\n                    status,\n                    message\n                });\n            }\n        }, null, { disablePrecalltest: true });\n    });\n}\n\n/**\n * Loads the callstats script and initializes the library.\n *\n * @param {Function} onResult - The callback to be invoked when results are received.\n * @returns {Promise<void>}\n */\nexport async function init(options) {\n    if (_initialized) {\n        throw new Error('Precall Test already initialized');\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests } = options;\n\n    if (!callStatsID || !callStatsSecret || disableThirdPartyRequests) {\n        throw new Error('Callstats is disabled');\n    }\n\n    await _loadScript(options);\n    // eslint-disable-next-line new-cap\n    api = new window.callstats();\n\n    return _initialize(options);\n}\n\n/**\n * Executes a pre call test.\n *\n * @typedef PrecallTestResults\n * @type {Object}\n * @property {boolean} mediaConnectivity - If there is media connectivity or not.\n * @property {number} throughput  - The average throughput.\n * @property {number} fractionalLoss - The packet loss.\n * @property {number} rtt - The round trip time.\n * @property {string} provider - It is usually 'callstats'.\n *\n * @returns {Promise<{PrecallTestResults}>}\n */\nexport function execute() {\n    if (!_initialized) {\n        return Promise.reject('uninitialized');\n    }\n\n    return new Promise((resolve, reject) => {\n        emitter.on(PRECALL_TEST_RESULTS, (status, payload) => {\n            if (status === 'success') {\n                resolve(payload);\n            } else {\n                reject({\n                    status,\n                    payload\n                });\n            }\n\n        });\n\n        api.makePrecallTest();\n    });\n}\n\nexport default {\n    init,\n    execute\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport { createAudioContext } from './WebAudioUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\n * MediaStream.\n */\nexport default class AudioMixer {\n    /**\n     * Create AudioMixer instance.\n     */\n    constructor() {\n        this._started = false;\n        this._streamsToMix = [];\n        this._streamMSSArray = [];\n    }\n\n    /**\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\n     *\n     * @param {MediaStream} stream - MediaStream to be mixed.\n     */\n    addMediaStream(stream) {\n        if (!stream.getAudioTracks()) {\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\n        }\n\n        this._streamsToMix.push(stream);\n    }\n\n    /**\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\n     * it; the resulting mixed MediaStream is returned.\n     *\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\n     * is added.\n     */\n    start() {\n        // If the mixer was already started just return the existing mixed stream.\n        if (this._started) {\n            return this._mixedMSD.stream;\n        }\n\n        this._audioContext = createAudioContext();\n\n        if (!this._streamsToMix.length) {\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\n\n            return null;\n        }\n\n        this._started = true;\n\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\n\n        for (const stream of this._streamsToMix) {\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\n\n            streamMSS.connect(this._mixedMSD);\n\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\n            this._streamMSSArray.push(streamMSS);\n        }\n\n        return this._mixedMSD.stream;\n    }\n\n    /**\n     * Disconnect MediaStreamAudioSourceNode and clear references.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._started = false;\n        this._streamsToMix = [];\n\n        // Clean up created MediaStreamAudioSourceNode.\n        for (const streamMSS of this._streamMSSArray) {\n            streamMSS.disconnect();\n        }\n\n        this._streamMSSArray = [];\n\n        if (this._audioContext) {\n            this._audioContext = undefined;\n        }\n    }\n}\n","import Logger from '@jitsi/logger';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport { TrackStreamingStatus } from './modules/connectivity/TrackStreamingStatus';\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport Settings from './modules/settings/Settings';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport precallTest from './modules/statistics/PrecallTest';\nimport Statistics from './modules/statistics/statistics';\nimport AuthUtil from './modules/util/AuthUtil';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport AudioMixer from './modules/webaudio/AudioMixer';\nimport { MediaType } from './service/RTC/MediaType';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\n\nconst logger = Logger.getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_SLOW_PROMISE_TIMEOUT = 1000;\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes: any = {};\n\n    attributes['audio_requested'] = options.devices.includes('audio');\n    attributes['video_requested'] = options.devices.includes('video');\n    attributes['screen_sharing_requested'] = options.devices.includes('desktop');\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\ninterface ICreateLocalTrackOptions {\n    cameraDeviceId?: string;\n    devices?: any[];\n    firePermissionPromptIsShownEvent?: boolean;\n    fireSlowPromiseEvent?: boolean;\n    micDeviceId?: string;\n    resolution?: string;\n}\n\ninterface IJitsiMeetJSOptions {\n    enableAnalyticsLogging?: boolean;\n    enableUnifiedOnChrome?: boolean;\n    enableWindowOnErrorHandler?: boolean;\n    externalStorage?: Storage;\n    flags?: {\n        enableUnifiedOnChrome?: boolean;\n    }\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\n */\nexport default {\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n\n    constants: {\n        participantConnectionStatus: ParticipantConnectionStatus,\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus,\n        trackStreamingStatus: TrackStreamingStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        detection: DetectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices as unknown,\n    analytics: Statistics.analytics as unknown,\n    init(options: IJitsiMeetJSOptions = {}) {\n        Settings.init(options.externalStorage);\n        Statistics.init(options);\n        const flags = options.flags || {};\n\n        // Multi-stream is supported only on endpoints running in Unified plan mode and the flag to disable unified\n        // plan also needs to be taken into consideration.\n        if (typeof options.enableUnifiedOnChrome !== 'undefined') {\n            flags.enableUnifiedOnChrome = options.enableUnifiedOnChrome;\n        }\n\n        // Configure the feature flags.\n        FeatureFlags.init(flags);\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'lib-jitsi-meet',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    *\n    * @param options\n    * @see Logger.setGlobalOptions\n    */\n    setGlobalLogOptions(options) {\n        Logger.setGlobalOptions(options);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.effects optional effects array for the track\n     * @param {boolean} options.firePermissionPromptIsShownEvent - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param {boolean} options.fireSlowPromiseEvent - if event\n     * JitsiMediaDevicesEvents.USER_MEDIA_SLOW_PROMISE_TIMEOUT should be fired\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @deprecated old firePermissionPromptIsShownEvent\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(options: ICreateLocalTrackOptions = {}, oldfirePermissionPromptIsShownEvent) {\n        let promiseFulfilled = false;\n\n        const { firePermissionPromptIsShownEvent, fireSlowPromiseEvent, ...restOptions } = options;\n        const firePermissionPrompt = firePermissionPromptIsShownEvent || oldfirePermissionPromptIsShownEvent;\n\n        if (firePermissionPrompt && !RTC.arePermissionsGrantedForAvailableDevices()) {\n            // @ts-ignore\n            JitsiMediaDevices.emitEvent(JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN, browser.getName());\n        } else if (fireSlowPromiseEvent) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA);\n                }\n            }, USER_MEDIA_SLOW_PROMISE_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(restOptions)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(restOptions)));\n\n                if (!RTC.options.disableAudioLevels) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(track,\n                                track.setAudioLevel.bind(track));\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                // set the contentHint to \"detail\" for desktop tracks\n                // eslint-disable-next-line prefer-const\n                for (const track of tracks) {\n                    if (track.type === MediaType.VIDEO\n                        && track.videoType === 'desktop') {\n                        this.setVideoTrackContentHints(track.track, 'detail');\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'screensharing_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\n     * order to obtain VAD scores for individual PCM audio samples.\n     * @param {string} localAudioDeviceId - The target local audio device.\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\n     * longer calls, lowers values mean more calls but shorter.\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\n     * to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * i.e. (16KHz, 44.1 KHz etc.)\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>}\n     */\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\n    },\n\n    /**\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\n     * user to mix multiple MediaStreams into a single one.\n     *\n     * @returns {AudioMixer}\n     */\n    createAudioMixer() {\n        return new AudioMixer();\n    },\n\n    /**\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n     *\n     * @returns Promise<Object> - Object containing information about the found device.\n     */\n    getActiveAudioDevice() {\n        return getActiveAudioDevice();\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled\n            && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /**\n     * Informs lib-jitsi-meet about the current network status.\n     *\n     * @param {object} state - The network info state.\n     * @param {boolean} state.isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    setNetworkInfo({ isOnline }) {\n        NetworkInfo.updateNetworkInfo({ isOnline });\n    },\n\n    /**\n     * Set the contentHint on the transmitted stream track to indicate\n     * charaterstics in the video stream, which informs PeerConnection\n     * on how to encode the track (to prefer motion or individual frame detail)\n     * @param {MediaStreamTrack} track - the track that is transmitted\n     * @param {String} hint - contentHint value that needs to be set on the track\n     */\n    setVideoTrackContentHints(track, hint) {\n        if ('contentHint' in track) {\n            track.contentHint = hint;\n            if (track.contentHint !== hint) {\n                logger.debug('Invalid video track contentHint');\n            }\n        } else {\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\n        }\n    },\n\n    precallTest,\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n};\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        UNEXPECTED_REQUEST: 'unexpected-request',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","const ljm = require('./JitsiMeetJS').default;\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.JitsiMeetJS === 'object'\n            ? Object.assign({}, window.JitsiMeetJS, module)\n            : module);\n}\n\nmodule.exports = _mergeNamespaceAndModule(ljm);\n","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._isDominantSpeaker = false;\n        this._isSilent = false;\n        this._hasLeft = false;\n        this._faceExpressions = {\n            happy: 0,\n            neutral: 0,\n            surprised: 0,\n            angry: 0,\n            fearful: 0,\n            disgusted: 0,\n            sad: 0\n        };\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._isDominantSpeaker;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} - If true, the user will being accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @param {boolean} silence - Indecates whether the dominant speaker is silent or not.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker, silence) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker && !silence) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker()) {\n            if (!isNowDominantSpeaker) {\n                if (!this._isSilent) {\n                    const now = Date.now();\n                    const timeElapsed = now - this._dominantSpeakerStart;\n\n                    this.totalDominantSpeakerTime += timeElapsed;\n                    this._dominantSpeakerStart = 0;\n                }\n            } else if (this._isSilent && !silence) {\n                this._dominantSpeakerStart = Date.now();\n            } else if (!this._isSilent && silence) {\n                const now = Date.now();\n                const timeElapsed = now - this._dominantSpeakerStart;\n\n                this.totalDominantSpeakerTime += timeElapsed;\n                this._dominantSpeakerStart = 0;\n            }\n        }\n\n        this._isDominantSpeaker = isNowDominantSpeaker;\n        this._isSilent = silence;\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker() && !this._isSilent) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n\n    /**\n     * Gets the face expressions of the user.\n     *\n     * @returns {Object}\n     */\n    getFaceExpressions() {\n        return this._faceExpressions;\n    }\n\n    /**\n     * Sets the face expressions of the user.\n     *\n     * @param {Object} faceExpressions - object with face expressions.\n     * @returns {void}\n     */\n    setFaceExpressions(faceExpressions) {\n        this._faceExpressions = faceExpressions;\n    }\n\n    /**\n     * Adds a new face expression to speaker stats.\n     *\n     * @param  {string} faceExpression\n     * @param {number} duration\n     */\n    addFaceExpression(faceExpression, duration) {\n        this._faceExpressions[faceExpression] += duration;\n    }\n}\n\nmodule.exports = SpeakerStats;\n","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {boolean} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","/**\n * Implements a simple hash code for a string (see\n * https://en.wikipedia.org/wiki/Java_hashCode()).\n *\n * @param {string} The string to return a hash of.\n * @return {Number} the integer hash code of the string.\n */\nfunction integerHash(string) {\n    if (!string) {\n        return 0;\n    }\n\n    let char, hash = 0, i;\n\n    for (i = 0; i < string.length; i++) {\n        char = string.charCodeAt(i);\n        hash += char * Math.pow(31, string.length - 1 - i);\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\n    }\n\n    return hash;\n}\n\nmodule.exports = { integerHash };\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function () {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return '[object with circular refs?]';\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage = function (\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\n            typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i !== len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var timestamp = arguments[1];\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage = this.queue[this.queue.length - 1];\n        var prevMessageText = prevMessage && prevMessage.text;\n        if (prevMessageText === msg) {\n            prevMessage.count += 1;\n        } else {\n            this.queue.push({\n                text: msg,\n                timestamp: timestamp,\n                count: 1\n            });\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID = window.setTimeout(\n        this._flush.bind(\n            this, false /* do not force */, true /* reschedule */),\n        this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ );\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*jslint latedef:false*/\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 3) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\n            getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            logPrefixes.push(new Date().toISOString());\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            l.bind(t).apply(t, fullLogParts);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{\n    // o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly...\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  // k: [{}], // outdated thing ignored\n  t: [{\n    // t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{\n    // c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{\n    // b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{\n    // m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    {\n      // a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding)\n          ? 'rtpmap:%d %s/%s/%s'\n          : o.rate\n            ? 'rtpmap:%d %s/%s'\n            : 'rtpmap:%d %s';\n      }\n    },\n    {\n      // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      // a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    {\n      // a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    {\n      // a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null)\n          ? 'rtcp:%d %s IP%d %s'\n          : 'rtcp:%d';\n      }\n    },\n    {\n      // a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%s trr-int %d'\n    },\n    {\n      // a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null)\n          ? 'rtcp-fb:%s %s %s'\n          : 'rtcp-fb:%s %s';\n      }\n    },\n    {\n      // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      // a=extmap:1/recvonly URI-gps-string\n      // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],\n      format: function (o) {\n        return (\n          'extmap:%d' +\n          (o.direction ? '/%s' : '%v') +\n          (o['encrypt-uri'] ? ' %s' : '%v') +\n          ' %s' +\n          (o.config ? ' %s' : '')\n        );\n      }\n    },\n    {\n      // a=extmap-allow-mixed\n      name: 'extmapAllowMixed',\n      reg: /^(extmap-allow-mixed)/\n    },\n    {\n      // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null)\n          ? 'crypto:%d %s %s %s'\n          : 'crypto:%d %s %s';\n      }\n    },\n    {\n      // a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    {\n      // a=connection:new\n      name: 'connectionType',\n      reg: /^connection:(new|existing)/,\n      format: 'connection:%s'\n    },\n    {\n      // a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    {\n      // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    {\n      // a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'ptime:%d'\n    },\n    {\n      // a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'maxptime:%d'\n    },\n    {\n      // a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    {\n      // a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    {\n      // a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    {\n      // a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    {\n      // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    {\n      // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    {\n      // a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    {\n      // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    {\n      // a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    {\n      // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_-]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    {\n      // a=ssrc-group:FEC 1 2\n      // a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    {\n      // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    {\n      // a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    {\n      // a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    {\n      // a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    {\n      // a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null)\n          ? 'sctpmap:%s %s %s'\n          : 'sctpmap:%s %s';\n      }\n    },\n    {\n      // a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    {\n      // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    {\n      // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      // a=imageattr:* send [x=800,y=640] recv *\n      // a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        // a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        // send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        // recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      // a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        // a=simulcast:\n        '^simulcast:' +\n        // send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        // space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        // end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // old simulcast draft 03 (implemented by Firefox)\n      //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      // a=simulcast: recv pt=97;98 send pt=97\n      // a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      // a=framerate:25\n      // a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    {\n      // RFC4570\n      // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5\n      name: 'sourceFilter',\n      reg: /^source-filter: *(excl|incl) (\\S*) (IP4|IP6|\\*) (\\S*) (.*)/,\n      names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],\n      format: 'source-filter: %s %s %s %s %s'\n    },\n    {\n      // a=bundle-only\n      name: 'bundleOnly',\n      reg: /^(bundle-only)/\n    },\n    {\n      // a=label:1\n      name: 'label',\n      reg: /^label:(.+)/,\n      format: 'label:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5\n      name: 'sctpPort',\n      reg: /^sctp-port:(\\d+)$/,\n      format: 'sctp-port:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6\n      name: 'maxMessageSize',\n      reg: /^max-message-size:(\\d+)$/,\n      format: 'max-message-size:%s'\n    },\n    {\n      // RFC7273\n      // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37\n      push:'tsRefClocks',\n      reg: /^ts-refclk:([^\\s=]*)(?:=(\\S*))?/,\n      names: ['clksrc', 'clksrcExt'],\n      format: function (o) {\n        return 'ts-refclk:%s' + (o.clksrcExt != null ? '=%s' : '');\n      }\n    },\n    {\n      // RFC7273\n      // a=mediaclk:direct=963214424\n      name:'mediaClk',\n      reg: /^mediaclk:(?:id=(\\S*))? *([^\\s=]*)(?:=(\\S*))?(?: *rate=(\\d+)\\/(\\d+))?/,\n      names: ['id', 'mediaClockName', 'mediaClockValue', 'rateNumerator', 'rateDenominator'],\n      format: function (o) {\n        var str = 'mediaclk:';\n        str += (o.id != null ? 'id=%s %s' : '%v%s');\n        str += (o.mediaClockValue != null ? '=%s' : '');\n        str += (o.rateNumerator != null ? ' rate=%s' : '');\n        str += (o.rateDenominator != null ? '/%s' : '');\n        return str;\n      }\n    },\n    {\n      // a=keywds:keywords\n      name: 'keywords',\n      reg: /^keywds:(.+)$/,\n      format: 'keywds:%s'\n    },\n    {\n      // a=content:main\n      name: 'content',\n      reg: /^content:(.+)/,\n      format: 'content:%s'\n    },\n    // BFCP https://tools.ietf.org/html/rfc4583\n    {\n      // a=floorctrl:c-s\n      name: 'bfcpFloorCtrl',\n      reg: /^floorctrl:(c-only|s-only|c-s)/,\n      format: 'floorctrl:%s'\n    },\n    {\n      // a=confid:1\n      name: 'bfcpConfId',\n      reg: /^confid:(\\d+)/,\n      format: 'confid:%s'\n    },\n    {\n      // a=userid:1\n      name: 'bfcpUserId',\n      reg: /^userid:(\\d+)/,\n      format: 'userid:%s'\n    },\n    {\n      // a=floorid:1\n      name: 'bfcpFloorId',\n      reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,\n      names: ['id', 'mStream'],\n      format: 'floorid:%s mstrm:%s'\n    },\n    {\n      // any a= that we don't understand is kept verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseParams = parser.parseParams;\nexports.parseFmtpConfig = parser.parseFmtpConfig; // Alias of parseParams().\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  } else if (s.length === 1 && expr.length > 1) {\n    acc[s[0]] = undefined;\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.toString().split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || typeof mLine.xGoogleFlag === 'undefined') {\n        return;\n    }\n\n    mLine.xGoogleFlag = undefined;\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @param enableConferenceFlag\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc, enableConferenceFlag) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Add or remove \"x-google-conference\" from the remote description based on whether the client\n        // has enabled simulcast for the local video source. For cases where we disable simulcast for desktop share,\n        // it is necessary to remove the flag so that Chrome stops sending T1 temporal layers. It also fixes other\n        // issues related to screensharing like https://bugs.chromium.org/p/chromium/issues/detail?id=1093819.\n        if (!self.options.usesUnifiedPlan && enableConferenceFlag) {\n            assertGoogConference(mLine);\n        } else {\n            removeGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/*! jQuery v3.6.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-deprecated/ajax-event-alias,-effects,-effects/Tween,-effects/animatedSelector | (c) OpenJS Foundation and other contributors | jquery.org/license */\n!function(e,t){\"use strict\";\"object\"==typeof module&&\"object\"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error(\"jQuery requires a window with a document\");return t(e)}:t(e)}(\"undefined\"!=typeof window?window:this,function(g,e){\"use strict\";var t=[],r=Object.getPrototypeOf,s=t.slice,v=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},u=t.push,i=t.indexOf,n={},o=n.toString,y=n.hasOwnProperty,a=y.toString,l=a.call(Object),m={},b=function(e){return\"function\"==typeof e&&\"number\"!=typeof e.nodeType&&\"function\"!=typeof e.item},x=function(e){return null!=e&&e===e.window},w=g.document,c={type:!0,src:!0,nonce:!0,noModule:!0};function C(e,t,n){var r,i,o=(n=n||w).createElement(\"script\");if(o.text=e,t)for(r in c)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function T(e){return null==e?e+\"\":\"object\"==typeof e||\"function\"==typeof e?n[o.call(e)]||\"object\":typeof e}var f=\"3.6.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-deprecated/ajax-event-alias,-effects,-effects/Tween,-effects/animatedSelector\",E=function(e,t){return new E.fn.init(e,t)};function d(e){var t=!!e&&\"length\"in e&&e.length,n=T(e);return!b(e)&&!x(e)&&(\"array\"===n||0===t||\"number\"==typeof t&&0<t&&t-1 in e)}E.fn=E.prototype={jquery:f,constructor:E,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=E.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return E.each(this,e)},map:function(n){return this.pushStack(E.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(E.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(E.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:t.sort,splice:t.splice},E.extend=E.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for(\"boolean\"==typeof a&&(l=a,a=arguments[s]||{},s++),\"object\"==typeof a||b(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],\"__proto__\"!==t&&a!==r&&(l&&r&&(E.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||E.isPlainObject(n)?n:{},i=!1,a[t]=E.extend(l,o,r)):void 0!==r&&(a[t]=r));return a},E.extend({expando:\"jQuery\"+(f+Math.random()).replace(/\\D/g,\"\"),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||\"[object Object]\"!==o.call(e))&&(!(t=r(e))||\"function\"==typeof(n=y.call(t,\"constructor\")&&t.constructor)&&a.call(n)===l)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){C(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(d(e)){for(n=e.length;r<n;r++)if(!1===t.call(e[r],r,e[r]))break}else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(d(Object(e))?E.merge(n,\"string\"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:i.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(d(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return v(a)},guid:1,support:m}),\"function\"==typeof Symbol&&(E.fn[Symbol.iterator]=t[Symbol.iterator]),E.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"),function(e,t){n[\"[object \"+t+\"]\"]=t.toLowerCase()});var p=function(n){var e,p,x,o,i,h,f,g,w,u,l,C,T,a,E,v,s,c,y,A=\"sizzle\"+1*new Date,d=n.document,N=0,r=0,m=ue(),b=ue(),S=ue(),k=ue(),D=function(e,t){return e===t&&(l=!0),0},L={}.hasOwnProperty,t=[],j=t.pop,q=t.push,O=t.push,P=t.slice,H=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},I=\"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",R=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",B=\"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\"+R+\"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",M=\"\\\\[\"+R+\"*(\"+B+\")(?:\"+R+\"*([*^$|!~]?=)\"+R+\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\"+B+\"))|)\"+R+\"*\\\\]\",W=\":(\"+B+\")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\"+M+\")*)|.*)\\\\)|)\",F=new RegExp(R+\"+\",\"g\"),$=new RegExp(\"^\"+R+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+R+\"+$\",\"g\"),z=new RegExp(\"^\"+R+\"*,\"+R+\"*\"),_=new RegExp(\"^\"+R+\"*([>+~]|\"+R+\")\"+R+\"*\"),U=new RegExp(R+\"|>\"),V=new RegExp(W),X=new RegExp(\"^\"+B+\"$\"),Q={ID:new RegExp(\"^#(\"+B+\")\"),CLASS:new RegExp(\"^\\\\.(\"+B+\")\"),TAG:new RegExp(\"^(\"+B+\"|[*])\"),ATTR:new RegExp(\"^\"+M),PSEUDO:new RegExp(\"^\"+W),CHILD:new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\"+R+\"*(even|odd|(([+-]|)(\\\\d*)n|)\"+R+\"*(?:([+-]|)\"+R+\"*(\\\\d+)|))\"+R+\"*\\\\)|)\",\"i\"),bool:new RegExp(\"^(?:\"+I+\")$\",\"i\"),needsContext:new RegExp(\"^\"+R+\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\"+R+\"*((?:-\\\\d)?\\\\d*)\"+R+\"*\\\\)|)(?=[^-]|$)\",\"i\")},Y=/HTML$/i,G=/^(?:input|select|textarea|button)$/i,K=/^h\\d$/i,J=/^[^{]+\\{\\s*\\[native \\w/,Z=/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,ee=/[+~]/,te=new RegExp(\"\\\\\\\\[\\\\da-fA-F]{1,6}\"+R+\"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\",\"g\"),ne=function(e,t){var n=\"0x\"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,ie=function(e,t){return t?\"\\0\"===e?\"\\ufffd\":e.slice(0,-1)+\"\\\\\"+e.charCodeAt(e.length-1).toString(16)+\" \":\"\\\\\"+e},oe=function(){C()},ae=xe(function(e){return!0===e.disabled&&\"fieldset\"===e.nodeName.toLowerCase()},{dir:\"parentNode\",next:\"legend\"});try{O.apply(t=P.call(d.childNodes),d.childNodes),t[d.childNodes.length].nodeType}catch(e){O={apply:t.length?function(e,t){q.apply(e,P.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function se(t,e,n,r){var i,o,a,s,u,l,c,f=e&&e.ownerDocument,d=e?e.nodeType:9;if(n=n||[],\"string\"!=typeof t||!t||1!==d&&9!==d&&11!==d)return n;if(!r&&(C(e),e=e||T,E)){if(11!==d&&(u=Z.exec(t)))if(i=u[1]){if(9===d){if(!(a=e.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(f&&(a=f.getElementById(i))&&y(e,a)&&a.id===i)return n.push(a),n}else{if(u[2])return O.apply(n,e.getElementsByTagName(t)),n;if((i=u[3])&&p.getElementsByClassName&&e.getElementsByClassName)return O.apply(n,e.getElementsByClassName(i)),n}if(p.qsa&&!k[t+\" \"]&&(!v||!v.test(t))&&(1!==d||\"object\"!==e.nodeName.toLowerCase())){if(c=t,f=e,1===d&&(U.test(t)||_.test(t))){(f=ee.test(t)&&ye(e.parentNode)||e)===e&&p.scope||((s=e.getAttribute(\"id\"))?s=s.replace(re,ie):e.setAttribute(\"id\",s=A)),o=(l=h(t)).length;while(o--)l[o]=(s?\"#\"+s:\":scope\")+\" \"+be(l[o]);c=l.join(\",\")}try{return O.apply(n,f.querySelectorAll(c)),n}catch(e){k(t,!0)}finally{s===A&&e.removeAttribute(\"id\")}}}return g(t.replace($,\"$1\"),e,n,r)}function ue(){var r=[];return function e(t,n){return r.push(t+\" \")>x.cacheLength&&delete e[r.shift()],e[t+\" \"]=n}}function le(e){return e[A]=!0,e}function ce(e){var t=T.createElement(\"fieldset\");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){var n=e.split(\"|\"),r=n.length;while(r--)x.attrHandle[n[r]]=t}function de(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function pe(t){return function(e){return\"input\"===e.nodeName.toLowerCase()&&e.type===t}}function he(n){return function(e){var t=e.nodeName.toLowerCase();return(\"input\"===t||\"button\"===t)&&e.type===n}}function ge(t){return function(e){return\"form\"in e?e.parentNode&&!1===e.disabled?\"label\"in e?\"label\"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ae(e)===t:e.disabled===t:\"label\"in e&&e.disabled===t}}function ve(a){return le(function(o){return o=+o,le(function(e,t){var n,r=a([],e.length,o),i=r.length;while(i--)e[n=r[i]]&&(e[n]=!(t[n]=e[n]))})})}function ye(e){return e&&\"undefined\"!=typeof e.getElementsByTagName&&e}for(e in p=se.support={},i=se.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||\"HTML\")},C=se.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:d;return r!=T&&9===r.nodeType&&r.documentElement&&(a=(T=r).documentElement,E=!i(T),d!=T&&(n=T.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener(\"unload\",oe,!1):n.attachEvent&&n.attachEvent(\"onunload\",oe)),p.scope=ce(function(e){return a.appendChild(e).appendChild(T.createElement(\"div\")),\"undefined\"!=typeof e.querySelectorAll&&!e.querySelectorAll(\":scope fieldset div\").length}),p.attributes=ce(function(e){return e.className=\"i\",!e.getAttribute(\"className\")}),p.getElementsByTagName=ce(function(e){return e.appendChild(T.createComment(\"\")),!e.getElementsByTagName(\"*\").length}),p.getElementsByClassName=J.test(T.getElementsByClassName),p.getById=ce(function(e){return a.appendChild(e).id=A,!T.getElementsByName||!T.getElementsByName(A).length}),p.getById?(x.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute(\"id\")===t}},x.find.ID=function(e,t){if(\"undefined\"!=typeof t.getElementById&&E){var n=t.getElementById(e);return n?[n]:[]}}):(x.filter.ID=function(e){var n=e.replace(te,ne);return function(e){var t=\"undefined\"!=typeof e.getAttributeNode&&e.getAttributeNode(\"id\");return t&&t.value===n}},x.find.ID=function(e,t){if(\"undefined\"!=typeof t.getElementById&&E){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode(\"id\"))&&n.value===e)return[o];i=t.getElementsByName(e),r=0;while(o=i[r++])if((n=o.getAttributeNode(\"id\"))&&n.value===e)return[o]}return[]}}),x.find.TAG=p.getElementsByTagName?function(e,t){return\"undefined\"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):p.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if(\"*\"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},x.find.CLASS=p.getElementsByClassName&&function(e,t){if(\"undefined\"!=typeof t.getElementsByClassName&&E)return t.getElementsByClassName(e)},s=[],v=[],(p.qsa=J.test(T.querySelectorAll))&&(ce(function(e){var t;a.appendChild(e).innerHTML=\"<a id='\"+A+\"'></a><select id='\"+A+\"-\\r\\\\' msallowcapture=''><option selected=''></option></select>\",e.querySelectorAll(\"[msallowcapture^='']\").length&&v.push(\"[*^$]=\"+R+\"*(?:''|\\\"\\\")\"),e.querySelectorAll(\"[selected]\").length||v.push(\"\\\\[\"+R+\"*(?:value|\"+I+\")\"),e.querySelectorAll(\"[id~=\"+A+\"-]\").length||v.push(\"~=\"),(t=T.createElement(\"input\")).setAttribute(\"name\",\"\"),e.appendChild(t),e.querySelectorAll(\"[name='']\").length||v.push(\"\\\\[\"+R+\"*name\"+R+\"*=\"+R+\"*(?:''|\\\"\\\")\"),e.querySelectorAll(\":checked\").length||v.push(\":checked\"),e.querySelectorAll(\"a#\"+A+\"+*\").length||v.push(\".#.+[+~]\"),e.querySelectorAll(\"\\\\\\f\"),v.push(\"[\\\\r\\\\n\\\\f]\")}),ce(function(e){e.innerHTML=\"<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>\";var t=T.createElement(\"input\");t.setAttribute(\"type\",\"hidden\"),e.appendChild(t).setAttribute(\"name\",\"D\"),e.querySelectorAll(\"[name=d]\").length&&v.push(\"name\"+R+\"*[*^$|!~]?=\"),2!==e.querySelectorAll(\":enabled\").length&&v.push(\":enabled\",\":disabled\"),a.appendChild(e).disabled=!0,2!==e.querySelectorAll(\":disabled\").length&&v.push(\":enabled\",\":disabled\"),e.querySelectorAll(\"*,:x\"),v.push(\",.*:\")})),(p.matchesSelector=J.test(c=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&ce(function(e){p.disconnectedMatch=c.call(e,\"*\"),c.call(e,\"[s!='']:x\"),s.push(\"!=\",W)}),v=v.length&&new RegExp(v.join(\"|\")),s=s.length&&new RegExp(s.join(\"|\")),t=J.test(a.compareDocumentPosition),y=t||J.test(a.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},D=t?function(e,t){if(e===t)return l=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!p.sortDetached&&t.compareDocumentPosition(e)===n?e==T||e.ownerDocument==d&&y(d,e)?-1:t==T||t.ownerDocument==d&&y(d,t)?1:u?H(u,e)-H(u,t):0:4&n?-1:1)}:function(e,t){if(e===t)return l=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e==T?-1:t==T?1:i?-1:o?1:u?H(u,e)-H(u,t):0;if(i===o)return de(e,t);n=e;while(n=n.parentNode)a.unshift(n);n=t;while(n=n.parentNode)s.unshift(n);while(a[r]===s[r])r++;return r?de(a[r],s[r]):a[r]==d?-1:s[r]==d?1:0}),T},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(C(e),p.matchesSelector&&E&&!k[t+\" \"]&&(!s||!s.test(t))&&(!v||!v.test(t)))try{var n=c.call(e,t);if(n||p.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){k(t,!0)}return 0<se(t,T,null,[e]).length},se.contains=function(e,t){return(e.ownerDocument||e)!=T&&C(e),y(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=T&&C(e);var n=x.attrHandle[t.toLowerCase()],r=n&&L.call(x.attrHandle,t.toLowerCase())?n(e,t,!E):void 0;return void 0!==r?r:p.attributes||!E?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},se.escape=function(e){return(e+\"\").replace(re,ie)},se.error=function(e){throw new Error(\"Syntax error, unrecognized expression: \"+e)},se.uniqueSort=function(e){var t,n=[],r=0,i=0;if(l=!p.detectDuplicates,u=!p.sortStable&&e.slice(0),e.sort(D),l){while(t=e[i++])t===e[i]&&(r=n.push(i));while(r--)e.splice(n[r],1)}return u=null,e},o=se.getText=function(e){var t,n=\"\",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if(\"string\"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else while(t=e[r++])n+=o(t);return n},(x=se.selectors={cacheLength:50,createPseudo:le,match:Q,attrHandle:{},find:{},relative:{\">\":{dir:\"parentNode\",first:!0},\" \":{dir:\"parentNode\"},\"+\":{dir:\"previousSibling\",first:!0},\"~\":{dir:\"previousSibling\"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||\"\").replace(te,ne),\"~=\"===e[2]&&(e[3]=\" \"+e[3]+\" \"),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),\"nth\"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*(\"even\"===e[3]||\"odd\"===e[3])),e[5]=+(e[7]+e[8]||\"odd\"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Q.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||\"\":n&&V.test(n)&&(t=h(n,!0))&&(t=n.indexOf(\")\",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return\"*\"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=m[e+\" \"];return t||(t=new RegExp(\"(^|\"+R+\")\"+e+\"(\"+R+\"|$)\"))&&m(e,function(e){return t.test(\"string\"==typeof e.className&&e.className||\"undefined\"!=typeof e.getAttribute&&e.getAttribute(\"class\")||\"\")})},ATTR:function(n,r,i){return function(e){var t=se.attr(e,n);return null==t?\"!=\"===r:!r||(t+=\"\",\"=\"===r?t===i:\"!=\"===r?t!==i:\"^=\"===r?i&&0===t.indexOf(i):\"*=\"===r?i&&-1<t.indexOf(i):\"$=\"===r?i&&t.slice(-i.length)===i:\"~=\"===r?-1<(\" \"+t.replace(F,\" \")+\" \").indexOf(i):\"|=\"===r&&(t===i||t.slice(0,i.length+1)===i+\"-\"))}},CHILD:function(h,e,t,g,v){var y=\"nth\"!==h.slice(0,3),m=\"last\"!==h.slice(-4),b=\"of-type\"===e;return 1===g&&0===v?function(e){return!!e.parentNode}:function(e,t,n){var r,i,o,a,s,u,l=y!==m?\"nextSibling\":\"previousSibling\",c=e.parentNode,f=b&&e.nodeName.toLowerCase(),d=!n&&!b,p=!1;if(c){if(y){while(l){a=e;while(a=a[l])if(b?a.nodeName.toLowerCase()===f:1===a.nodeType)return!1;u=l=\"only\"===h&&!u&&\"nextSibling\"}return!0}if(u=[m?c.firstChild:c.lastChild],m&&d){p=(s=(r=(i=(o=(a=c)[A]||(a[A]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===N&&r[1])&&r[2],a=s&&c.childNodes[s];while(a=++s&&a&&a[l]||(p=s=0)||u.pop())if(1===a.nodeType&&++p&&a===e){i[h]=[N,s,p];break}}else if(d&&(p=s=(r=(i=(o=(a=e)[A]||(a[A]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===N&&r[1]),!1===p)while(a=++s&&a&&a[l]||(p=s=0)||u.pop())if((b?a.nodeName.toLowerCase()===f:1===a.nodeType)&&++p&&(d&&((i=(o=a[A]||(a[A]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]=[N,p]),a===e))break;return(p-=v)===g||p%g==0&&0<=p/g}}},PSEUDO:function(e,o){var t,a=x.pseudos[e]||x.setFilters[e.toLowerCase()]||se.error(\"unsupported pseudo: \"+e);return a[A]?a(o):1<a.length?(t=[e,e,\"\",o],x.setFilters.hasOwnProperty(e.toLowerCase())?le(function(e,t){var n,r=a(e,o),i=r.length;while(i--)e[n=H(e,r[i])]=!(t[n]=r[i])}):function(e){return a(e,0,t)}):a}},pseudos:{not:le(function(e){var r=[],i=[],s=f(e.replace($,\"$1\"));return s[A]?le(function(e,t,n,r){var i,o=s(e,null,r,[]),a=e.length;while(a--)(i=o[a])&&(e[a]=!(t[a]=i))}):function(e,t,n){return r[0]=e,s(r,null,n,i),r[0]=null,!i.pop()}}),has:le(function(t){return function(e){return 0<se(t,e).length}}),contains:le(function(t){return t=t.replace(te,ne),function(e){return-1<(e.textContent||o(e)).indexOf(t)}}),lang:le(function(n){return X.test(n||\"\")||se.error(\"unsupported lang: \"+n),n=n.replace(te,ne).toLowerCase(),function(e){var t;do{if(t=E?e.lang:e.getAttribute(\"xml:lang\")||e.getAttribute(\"lang\"))return(t=t.toLowerCase())===n||0===t.indexOf(n+\"-\")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===a},focus:function(e){return e===T.activeElement&&(!T.hasFocus||T.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&!!e.checked||\"option\"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return K.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&\"button\"===e.type||\"button\"===t},text:function(e){var t;return\"input\"===e.nodeName.toLowerCase()&&\"text\"===e.type&&(null==(t=e.getAttribute(\"type\"))||\"text\"===t.toLowerCase())},first:ve(function(){return[0]}),last:ve(function(e,t){return[t-1]}),eq:ve(function(e,t,n){return[n<0?n+t:n]}),even:ve(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:ve(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:ve(function(e,t,n){for(var r=n<0?n+t:t<n?t:n;0<=--r;)e.push(r);return e}),gt:ve(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=x.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[e]=pe(e);for(e in{submit:!0,reset:!0})x.pseudos[e]=he(e);function me(){}function be(e){for(var t=0,n=e.length,r=\"\";t<n;t++)r+=e[t].value;return r}function xe(s,e,t){var u=e.dir,l=e.next,c=l||u,f=t&&\"parentNode\"===c,d=r++;return e.first?function(e,t,n){while(e=e[u])if(1===e.nodeType||f)return s(e,t,n);return!1}:function(e,t,n){var r,i,o,a=[N,d];if(n){while(e=e[u])if((1===e.nodeType||f)&&s(e,t,n))return!0}else while(e=e[u])if(1===e.nodeType||f)if(i=(o=e[A]||(e[A]={}))[e.uniqueID]||(o[e.uniqueID]={}),l&&l===e.nodeName.toLowerCase())e=e[u]||e;else{if((r=i[c])&&r[0]===N&&r[1]===d)return a[2]=r[2];if((i[c]=a)[2]=s(e,t,n))return!0}return!1}}function we(i){return 1<i.length?function(e,t,n){var r=i.length;while(r--)if(!i[r](e,t,n))return!1;return!0}:i[0]}function Ce(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),l&&t.push(s)));return a}function Te(p,h,g,v,y,e){return v&&!v[A]&&(v=Te(v)),y&&!y[A]&&(y=Te(y,e)),le(function(e,t,n,r){var i,o,a,s=[],u=[],l=t.length,c=e||function(e,t,n){for(var r=0,i=t.length;r<i;r++)se(e,t[r],n);return n}(h||\"*\",n.nodeType?[n]:n,[]),f=!p||!e&&h?c:Ce(c,s,p,n,r),d=g?y||(e?p:l||v)?[]:t:f;if(g&&g(f,d,n,r),v){i=Ce(d,u),v(i,[],n,r),o=i.length;while(o--)(a=i[o])&&(d[u[o]]=!(f[u[o]]=a))}if(e){if(y||p){if(y){i=[],o=d.length;while(o--)(a=d[o])&&i.push(f[o]=a);y(null,d=[],i,r)}o=d.length;while(o--)(a=d[o])&&-1<(i=y?H(e,a):s[o])&&(e[i]=!(t[i]=a))}}else d=Ce(d===t?d.splice(l,d.length):d),y?y(null,t,d,r):O.apply(t,d)})}function Ee(e){for(var i,t,n,r=e.length,o=x.relative[e[0].type],a=o||x.relative[\" \"],s=o?1:0,u=xe(function(e){return e===i},a,!0),l=xe(function(e){return-1<H(i,e)},a,!0),c=[function(e,t,n){var r=!o&&(n||t!==w)||((i=t).nodeType?u(e,t,n):l(e,t,n));return i=null,r}];s<r;s++)if(t=x.relative[e[s].type])c=[xe(we(c),t)];else{if((t=x.filter[e[s].type].apply(null,e[s].matches))[A]){for(n=++s;n<r;n++)if(x.relative[e[n].type])break;return Te(1<s&&we(c),1<s&&be(e.slice(0,s-1).concat({value:\" \"===e[s-2].type?\"*\":\"\"})).replace($,\"$1\"),t,s<n&&Ee(e.slice(s,n)),n<r&&Ee(e=e.slice(n)),n<r&&be(e))}c.push(t)}return we(c)}return me.prototype=x.filters=x.pseudos,x.setFilters=new me,h=se.tokenize=function(e,t){var n,r,i,o,a,s,u,l=b[e+\" \"];if(l)return t?0:l.slice(0);a=e,s=[],u=x.preFilter;while(a){for(o in n&&!(r=z.exec(a))||(r&&(a=a.slice(r[0].length)||a),s.push(i=[])),n=!1,(r=_.exec(a))&&(n=r.shift(),i.push({value:n,type:r[0].replace($,\" \")}),a=a.slice(n.length)),x.filter)!(r=Q[o].exec(a))||u[o]&&!(r=u[o](r))||(n=r.shift(),i.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?se.error(e):b(e,s).slice(0)},f=se.compile=function(e,t){var n,v,y,m,b,r,i=[],o=[],a=S[e+\" \"];if(!a){t||(t=h(e)),n=t.length;while(n--)(a=Ee(t[n]))[A]?i.push(a):o.push(a);(a=S(e,(v=o,m=0<(y=i).length,b=0<v.length,r=function(e,t,n,r,i){var o,a,s,u=0,l=\"0\",c=e&&[],f=[],d=w,p=e||b&&x.find.TAG(\"*\",i),h=N+=null==d?1:Math.random()||.1,g=p.length;for(i&&(w=t==T||t||i);l!==g&&null!=(o=p[l]);l++){if(b&&o){a=0,t||o.ownerDocument==T||(C(o),n=!E);while(s=v[a++])if(s(o,t||T,n)){r.push(o);break}i&&(N=h)}m&&((o=!s&&o)&&u--,e&&c.push(o))}if(u+=l,m&&l!==u){a=0;while(s=y[a++])s(c,f,t,n);if(e){if(0<u)while(l--)c[l]||f[l]||(f[l]=j.call(r));f=Ce(f)}O.apply(r,f),i&&!e&&0<f.length&&1<u+y.length&&se.uniqueSort(r)}return i&&(N=h,w=d),c},m?le(r):r))).selector=e}return a},g=se.select=function(e,t,n,r){var i,o,a,s,u,l=\"function\"==typeof e&&e,c=!r&&h(e=l.selector||e);if(n=n||[],1===c.length){if(2<(o=c[0]=c[0].slice(0)).length&&\"ID\"===(a=o[0]).type&&9===t.nodeType&&E&&x.relative[o[1].type]){if(!(t=(x.find.ID(a.matches[0].replace(te,ne),t)||[])[0]))return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}i=Q.needsContext.test(e)?0:o.length;while(i--){if(a=o[i],x.relative[s=a.type])break;if((u=x.find[s])&&(r=u(a.matches[0].replace(te,ne),ee.test(o[0].type)&&ye(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&be(o)))return O.apply(n,r),n;break}}}return(l||f(e,c))(r,t,!E,n,!t||ee.test(e)&&ye(t.parentNode)||t),n},p.sortStable=A.split(\"\").sort(D).join(\"\")===A,p.detectDuplicates=!!l,C(),p.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(T.createElement(\"fieldset\"))}),ce(function(e){return e.innerHTML=\"<a href='#'></a>\",\"#\"===e.firstChild.getAttribute(\"href\")})||fe(\"type|href|height|width\",function(e,t,n){if(!n)return e.getAttribute(t,\"type\"===t.toLowerCase()?1:2)}),p.attributes&&ce(function(e){return e.innerHTML=\"<input/>\",e.firstChild.setAttribute(\"value\",\"\"),\"\"===e.firstChild.getAttribute(\"value\")})||fe(\"value\",function(e,t,n){if(!n&&\"input\"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute(\"disabled\")})||fe(I,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),se}(g);E.find=p,E.expr=p.selectors,E.expr[\":\"]=E.expr.pseudos,E.uniqueSort=E.unique=p.uniqueSort,E.text=p.getText,E.isXMLDoc=p.isXML,E.contains=p.contains,E.escapeSelector=p.escape;var h=function(e,t,n){var r=[],i=void 0!==n;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&E(e).is(n))break;r.push(e)}return r},A=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},N=E.expr.match.needsContext;function S(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var k=/^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i;function D(e,n,r){return b(n)?E.grep(e,function(e,t){return!!n.call(e,t,e)!==r}):n.nodeType?E.grep(e,function(e){return e===n!==r}):\"string\"!=typeof n?E.grep(e,function(e){return-1<i.call(n,e)!==r}):E.filter(n,e,r)}E.filter=function(e,t,n){var r=t[0];return n&&(e=\":not(\"+e+\")\"),1===t.length&&1===r.nodeType?E.find.matchesSelector(r,e)?[r]:[]:E.find.matches(e,E.grep(t,function(e){return 1===e.nodeType}))},E.fn.extend({find:function(e){var t,n,r=this.length,i=this;if(\"string\"!=typeof e)return this.pushStack(E(e).filter(function(){for(t=0;t<r;t++)if(E.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)E.find(e,i[t],n);return 1<r?E.uniqueSort(n):n},filter:function(e){return this.pushStack(D(this,e||[],!1))},not:function(e){return this.pushStack(D(this,e||[],!0))},is:function(e){return!!D(this,\"string\"==typeof e&&N.test(e)?E(e):e||[],!1).length}});var L,j=/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/;(E.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||L,\"string\"==typeof e){if(!(r=\"<\"===e[0]&&\">\"===e[e.length-1]&&3<=e.length?[null,e,null]:j.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof E?t[0]:t,E.merge(this,E.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:w,!0)),k.test(r[1])&&E.isPlainObject(t))for(r in t)b(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=w.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):b(e)?void 0!==n.ready?n.ready(e):e(E):E.makeArray(e,this)}).prototype=E.fn,L=E(w);var q=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};function P(e,t){while((e=e[t])&&1!==e.nodeType);return e}E.fn.extend({has:function(e){var t=E(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(E.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a=\"string\"!=typeof e&&E(e);if(!N.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&E.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?E.uniqueSort(o):o)},index:function(e){return e?\"string\"==typeof e?i.call(E(e),this[0]):i.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),E.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return h(e,\"parentNode\")},parentsUntil:function(e,t,n){return h(e,\"parentNode\",n)},next:function(e){return P(e,\"nextSibling\")},prev:function(e){return P(e,\"previousSibling\")},nextAll:function(e){return h(e,\"nextSibling\")},prevAll:function(e){return h(e,\"previousSibling\")},nextUntil:function(e,t,n){return h(e,\"nextSibling\",n)},prevUntil:function(e,t,n){return h(e,\"previousSibling\",n)},siblings:function(e){return A((e.parentNode||{}).firstChild,e)},children:function(e){return A(e.firstChild)},contents:function(e){return null!=e.contentDocument&&r(e.contentDocument)?e.contentDocument:(S(e,\"template\")&&(e=e.content||e),E.merge([],e.childNodes))}},function(r,i){E.fn[r]=function(e,t){var n=E.map(this,i,e);return\"Until\"!==r.slice(-5)&&(t=e),t&&\"string\"==typeof t&&(n=E.filter(t,n)),1<this.length&&(O[r]||E.uniqueSort(n),q.test(r)&&n.reverse()),this.pushStack(n)}});var H=/[^\\x20\\t\\r\\n\\f]+/g;function I(e){return e}function R(e){throw e}function B(e,t,n,r){var i;try{e&&b(i=e.promise)?i.call(e).done(t).fail(n):e&&b(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}E.Callbacks=function(r){var e,n;r=\"string\"==typeof r?(e=r,n={},E.each(e.match(H)||[],function(e,t){n[t]=!0}),n):E.extend({},r);var i,t,o,a,s=[],u=[],l=-1,c=function(){for(a=a||r.once,o=i=!0;u.length;l=-1){t=u.shift();while(++l<s.length)!1===s[l].apply(t[0],t[1])&&r.stopOnFalse&&(l=s.length,t=!1)}r.memory||(t=!1),i=!1,a&&(s=t?[]:\"\")},f={add:function(){return s&&(t&&!i&&(l=s.length-1,u.push(t)),function n(e){E.each(e,function(e,t){b(t)?r.unique&&f.has(t)||s.push(t):t&&t.length&&\"string\"!==T(t)&&n(t)})}(arguments),t&&!i&&c()),this},remove:function(){return E.each(arguments,function(e,t){var n;while(-1<(n=E.inArray(t,s,n)))s.splice(n,1),n<=l&&l--}),this},has:function(e){return e?-1<E.inArray(e,s):0<s.length},empty:function(){return s&&(s=[]),this},disable:function(){return a=u=[],s=t=\"\",this},disabled:function(){return!s},lock:function(){return a=u=[],t||i||(s=t=\"\"),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],u.push(t),i||c()),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!o}};return f},E.extend({Deferred:function(e){var o=[[\"notify\",\"progress\",E.Callbacks(\"memory\"),E.Callbacks(\"memory\"),2],[\"resolve\",\"done\",E.Callbacks(\"once memory\"),E.Callbacks(\"once memory\"),0,\"resolved\"],[\"reject\",\"fail\",E.Callbacks(\"once memory\"),E.Callbacks(\"once memory\"),1,\"rejected\"]],i=\"pending\",a={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},\"catch\":function(e){return a.then(null,e)},pipe:function(){var i=arguments;return E.Deferred(function(r){E.each(o,function(e,t){var n=b(i[t[4]])&&i[t[4]];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&b(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+\"With\"](this,n?[e]:arguments)})}),i=null}).promise()},then:function(t,n,r){var u=0;function l(i,o,a,s){return function(){var n=this,r=arguments,e=function(){var e,t;if(!(i<u)){if((e=a.apply(n,r))===o.promise())throw new TypeError(\"Thenable self-resolution\");t=e&&(\"object\"==typeof e||\"function\"==typeof e)&&e.then,b(t)?s?t.call(e,l(u,o,I,s),l(u,o,R,s)):(u++,t.call(e,l(u,o,I,s),l(u,o,R,s),l(u,o,I,o.notifyWith))):(a!==I&&(n=void 0,r=[e]),(s||o.resolveWith)(n,r))}},t=s?e:function(){try{e()}catch(e){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(e,t.stackTrace),u<=i+1&&(a!==R&&(n=void 0,r=[e]),o.rejectWith(n,r))}};i?t():(E.Deferred.getStackHook&&(t.stackTrace=E.Deferred.getStackHook()),g.setTimeout(t))}}return E.Deferred(function(e){o[0][3].add(l(0,e,b(r)?r:I,e.notifyWith)),o[1][3].add(l(0,e,b(t)?t:I)),o[2][3].add(l(0,e,b(n)?n:R))}).promise()},promise:function(e){return null!=e?E.extend(e,a):a}},s={};return E.each(o,function(e,t){var n=t[2],r=t[5];a[t[1]]=n.add,r&&n.add(function(){i=r},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+\"With\"](this===s?void 0:this,arguments),this},s[t[0]+\"With\"]=n.fireWith}),a.promise(s),e&&e.call(s,s),s},when:function(e){var n=arguments.length,t=n,r=Array(t),i=s.call(arguments),o=E.Deferred(),a=function(t){return function(e){r[t]=this,i[t]=1<arguments.length?s.call(arguments):e,--n||o.resolveWith(r,i)}};if(n<=1&&(B(e,o.done(a(t)).resolve,o.reject,!n),\"pending\"===o.state()||b(i[t]&&i[t].then)))return o.then();while(t--)B(i[t],a(t),o.reject);return o.promise()}});var M=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(e,t){g.console&&g.console.warn&&e&&M.test(e.name)&&g.console.warn(\"jQuery.Deferred exception: \"+e.message,e.stack,t)},E.readyException=function(e){g.setTimeout(function(){throw e})};var W=E.Deferred();function F(){w.removeEventListener(\"DOMContentLoaded\",F),g.removeEventListener(\"load\",F),E.ready()}E.fn.ready=function(e){return W.then(e)[\"catch\"](function(e){E.readyException(e)}),this},E.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--E.readyWait:E.isReady)||(E.isReady=!0)!==e&&0<--E.readyWait||W.resolveWith(w,[E])}}),E.ready.then=W.then,\"complete\"===w.readyState||\"loading\"!==w.readyState&&!w.documentElement.doScroll?g.setTimeout(E.ready):(w.addEventListener(\"DOMContentLoaded\",F),g.addEventListener(\"load\",F));var $=function(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if(\"object\"===T(n))for(s in i=!0,n)$(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,b(r)||(a=!0),l&&(a?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(E(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:l?t.call(e):u?t(e[0],n):o},z=/^-ms-/,_=/-([a-z])/g;function U(e,t){return t.toUpperCase()}function V(e){return e.replace(z,\"ms-\").replace(_,U)}var X=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=E.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},X(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if(\"string\"==typeof t)i[V(t)]=n;else for(r in t)i[V(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][V(t)]},access:function(e,t,n){return void 0===t||t&&\"string\"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(V):(t=V(t))in r?[t]:t.match(H)||[]).length;while(n--)delete r[t[n]]}(void 0===t||E.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!E.isEmptyObject(t)}};var Y=new Q,G=new Q,K=/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,J=/[A-Z]/g;function Z(e,t,n){var r,i;if(void 0===n&&1===e.nodeType)if(r=\"data-\"+t.replace(J,\"-$&\").toLowerCase(),\"string\"==typeof(n=e.getAttribute(r))){try{n=\"true\"===(i=n)||\"false\"!==i&&(\"null\"===i?null:i===+i+\"\"?+i:K.test(i)?JSON.parse(i):i)}catch(e){}G.set(e,t,n)}else n=void 0;return n}E.extend({hasData:function(e){return G.hasData(e)||Y.hasData(e)},data:function(e,t,n){return G.access(e,t,n)},removeData:function(e,t){G.remove(e,t)},_data:function(e,t,n){return Y.access(e,t,n)},_removeData:function(e,t){Y.remove(e,t)}}),E.fn.extend({data:function(n,e){var t,r,i,o=this[0],a=o&&o.attributes;if(void 0===n){if(this.length&&(i=G.get(o),1===o.nodeType&&!Y.get(o,\"hasDataAttrs\"))){t=a.length;while(t--)a[t]&&0===(r=a[t].name).indexOf(\"data-\")&&(r=V(r.slice(5)),Z(o,r,i[r]));Y.set(o,\"hasDataAttrs\",!0)}return i}return\"object\"==typeof n?this.each(function(){G.set(this,n)}):$(this,function(e){var t;if(o&&void 0===e)return void 0!==(t=G.get(o,n))?t:void 0!==(t=Z(o,n))?t:void 0;this.each(function(){G.set(this,n,e)})},null,e,1<arguments.length,null,!0)},removeData:function(e){return this.each(function(){G.remove(this,e)})}}),E.extend({queue:function(e,t,n){var r;if(e)return t=(t||\"fx\")+\"queue\",r=Y.get(e,t),n&&(!r||Array.isArray(n)?r=Y.access(e,t,E.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||\"fx\";var n=E.queue(e,t),r=n.length,i=n.shift(),o=E._queueHooks(e,t);\"inprogress\"===i&&(i=n.shift(),r--),i&&(\"fx\"===t&&n.unshift(\"inprogress\"),delete o.stop,i.call(e,function(){E.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+\"queueHooks\";return Y.get(e,n)||Y.access(e,n,{empty:E.Callbacks(\"once memory\").add(function(){Y.remove(e,[t+\"queue\",n])})})}}),E.fn.extend({queue:function(t,n){var e=2;return\"string\"!=typeof t&&(n=t,t=\"fx\",e--),arguments.length<e?E.queue(this[0],t):void 0===n?this:this.each(function(){var e=E.queue(this,t,n);E._queueHooks(this,t),\"fx\"===t&&\"inprogress\"!==e[0]&&E.dequeue(this,t)})},dequeue:function(e){return this.each(function(){E.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||\"fx\",[])},promise:function(e,t){var n,r=1,i=E.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};\"string\"!=typeof e&&(t=e,e=void 0),e=e||\"fx\";while(a--)(n=Y.get(o[a],e+\"queueHooks\"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var ee=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,te=new RegExp(\"^(?:([+-])=|)(\"+ee+\")([a-z%]*)$\",\"i\"),ne=[\"Top\",\"Right\",\"Bottom\",\"Left\"],re=w.documentElement,ie=function(e){return E.contains(e.ownerDocument,e)},oe={composed:!0};re.getRootNode&&(ie=function(e){return E.contains(e.ownerDocument,e)||e.getRootNode(oe)===e.ownerDocument});var ae=function(e,t){return\"none\"===(e=t||e).style.display||\"\"===e.style.display&&ie(e)&&\"none\"===E.css(e,\"display\")};var se={};function ue(e,t){for(var n,r,i,o,a,s,u,l=[],c=0,f=e.length;c<f;c++)(r=e[c]).style&&(n=r.style.display,t?(\"none\"===n&&(l[c]=Y.get(r,\"display\")||null,l[c]||(r.style.display=\"\")),\"\"===r.style.display&&ae(r)&&(l[c]=(u=a=o=void 0,a=(i=r).ownerDocument,s=i.nodeName,(u=se[s])||(o=a.body.appendChild(a.createElement(s)),u=E.css(o,\"display\"),o.parentNode.removeChild(o),\"none\"===u&&(u=\"block\"),se[s]=u)))):\"none\"!==n&&(l[c]=\"none\",Y.set(r,\"display\",n)));for(c=0;c<f;c++)null!=l[c]&&(e[c].style.display=l[c]);return e}E.fn.extend({show:function(){return ue(this,!0)},hide:function(){return ue(this)},toggle:function(e){return\"boolean\"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?E(this).show():E(this).hide()})}});var le,ce,fe=/^(?:checkbox|radio)$/i,de=/<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i,pe=/^$|^module$|\\/(?:java|ecma)script/i;le=w.createDocumentFragment().appendChild(w.createElement(\"div\")),(ce=w.createElement(\"input\")).setAttribute(\"type\",\"radio\"),ce.setAttribute(\"checked\",\"checked\"),ce.setAttribute(\"name\",\"t\"),le.appendChild(ce),m.checkClone=le.cloneNode(!0).cloneNode(!0).lastChild.checked,le.innerHTML=\"<textarea>x</textarea>\",m.noCloneChecked=!!le.cloneNode(!0).lastChild.defaultValue,le.innerHTML=\"<option></option>\",m.option=!!le.lastChild;var he={thead:[1,\"<table>\",\"</table>\"],col:[2,\"<table><colgroup>\",\"</colgroup></table>\"],tr:[2,\"<table><tbody>\",\"</tbody></table>\"],td:[3,\"<table><tbody><tr>\",\"</tr></tbody></table>\"],_default:[0,\"\",\"\"]};function ge(e,t){var n;return n=\"undefined\"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||\"*\"):\"undefined\"!=typeof e.querySelectorAll?e.querySelectorAll(t||\"*\"):[],void 0===t||t&&S(e,t)?E.merge([e],n):n}function ve(e,t){for(var n=0,r=e.length;n<r;n++)Y.set(e[n],\"globalEval\",!t||Y.get(t[n],\"globalEval\"))}he.tbody=he.tfoot=he.colgroup=he.caption=he.thead,he.th=he.td,m.option||(he.optgroup=he.option=[1,\"<select multiple='multiple'>\",\"</select>\"]);var ye=/<|&#?\\w+;/;function me(e,t,n,r,i){for(var o,a,s,u,l,c,f=t.createDocumentFragment(),d=[],p=0,h=e.length;p<h;p++)if((o=e[p])||0===o)if(\"object\"===T(o))E.merge(d,o.nodeType?[o]:o);else if(ye.test(o)){a=a||f.appendChild(t.createElement(\"div\")),s=(de.exec(o)||[\"\",\"\"])[1].toLowerCase(),u=he[s]||he._default,a.innerHTML=u[1]+E.htmlPrefilter(o)+u[2],c=u[0];while(c--)a=a.lastChild;E.merge(d,a.childNodes),(a=f.firstChild).textContent=\"\"}else d.push(t.createTextNode(o));f.textContent=\"\",p=0;while(o=d[p++])if(r&&-1<E.inArray(o,r))i&&i.push(o);else if(l=ie(o),a=ge(f.appendChild(o),\"script\"),l&&ve(a),n){c=0;while(o=a[c++])pe.test(o.type||\"\")&&n.push(o)}return f}var be=/^([^.]*)(?:\\.(.+)|)/;function xe(){return!0}function we(){return!1}function Ce(e,t){return e===function(){try{return w.activeElement}catch(e){}}()==(\"focus\"===t)}function Te(e,t,n,r,i,o){var a,s;if(\"object\"==typeof t){for(s in\"string\"!=typeof n&&(r=r||n,n=void 0),t)Te(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&(\"string\"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=we;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return E().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=E.guid++)),e.each(function(){E.event.add(this,t,i,r,n)})}function Ee(e,i,o){o?(Y.set(e,i,!1),E.event.add(e,i,{namespace:!1,handler:function(e){var t,n,r=Y.get(this,i);if(1&e.isTrigger&&this[i]){if(r.length)(E.event.special[i]||{}).delegateType&&e.stopPropagation();else if(r=s.call(arguments),Y.set(this,i,r),t=o(this,i),this[i](),r!==(n=Y.get(this,i))||t?Y.set(this,i,!1):n={},r!==n)return e.stopImmediatePropagation(),e.preventDefault(),n&&n.value}else r.length&&(Y.set(this,i,{value:E.event.trigger(E.extend(r[0],E.Event.prototype),r.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Y.get(e,i)&&E.event.add(e,i,xe)}E.event={global:{},add:function(t,e,n,r,i){var o,a,s,u,l,c,f,d,p,h,g,v=Y.get(t);if(X(t)){n.handler&&(n=(o=n).handler,i=o.selector),i&&E.find.matchesSelector(re,i),n.guid||(n.guid=E.guid++),(u=v.events)||(u=v.events=Object.create(null)),(a=v.handle)||(a=v.handle=function(e){return\"undefined\"!=typeof E&&E.event.triggered!==e.type?E.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||\"\").match(H)||[\"\"]).length;while(l--)p=g=(s=be.exec(e[l])||[])[1],h=(s[2]||\"\").split(\".\").sort(),p&&(f=E.event.special[p]||{},p=(i?f.delegateType:f.bindType)||p,f=E.event.special[p]||{},c=E.extend({type:p,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&E.expr.match.needsContext.test(i),namespace:h.join(\".\")},o),(d=u[p])||((d=u[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,h,a)||t.addEventListener&&t.addEventListener(p,a)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?d.splice(d.delegateCount++,0,c):d.push(c),E.event.global[p]=!0)}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,f,d,p,h,g,v=Y.hasData(e)&&Y.get(e);if(v&&(u=v.events)){l=(t=(t||\"\").match(H)||[\"\"]).length;while(l--)if(p=g=(s=be.exec(t[l])||[])[1],h=(s[2]||\"\").split(\".\").sort(),p){f=E.event.special[p]||{},d=u[p=(r?f.delegateType:f.bindType)||p]||[],s=s[2]&&new RegExp(\"(^|\\\\.)\"+h.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"),a=o=d.length;while(o--)c=d[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&(\"**\"!==r||!c.selector)||(d.splice(o,1),c.selector&&d.delegateCount--,f.remove&&f.remove.call(e,c));a&&!d.length&&(f.teardown&&!1!==f.teardown.call(e,h,v.handle)||E.removeEvent(e,p,v.handle),delete u[p])}else for(p in u)E.event.remove(e,p+t[l],n,r,!0);E.isEmptyObject(u)&&Y.remove(e,\"handle events\")}},dispatch:function(e){var t,n,r,i,o,a,s=new Array(arguments.length),u=E.event.fix(e),l=(Y.get(this,\"events\")||Object.create(null))[u.type]||[],c=E.event.special[u.type]||{};for(s[0]=u,t=1;t<arguments.length;t++)s[t]=arguments[t];if(u.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,u)){a=E.event.handlers.call(this,u,l),t=0;while((i=a[t++])&&!u.isPropagationStopped()){u.currentTarget=i.elem,n=0;while((o=i.handlers[n++])&&!u.isImmediatePropagationStopped())u.rnamespace&&!1!==o.namespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,void 0!==(r=((E.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,u),u.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!(\"click\"===e.type&&1<=e.button))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&(\"click\"!==e.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+\" \"]&&(a[i]=r.needsContext?-1<E(i,this).index(l):E.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<t.length&&s.push({elem:l,handlers:t.slice(u)}),s},addProp:function(t,e){Object.defineProperty(E.Event.prototype,t,{enumerable:!0,configurable:!0,get:b(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[E.expando]?e:new E.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return fe.test(t.type)&&t.click&&S(t,\"input\")&&Ee(t,\"click\",xe),!1},trigger:function(e){var t=this||e;return fe.test(t.type)&&t.click&&S(t,\"input\")&&Ee(t,\"click\"),!0},_default:function(e){var t=e.target;return fe.test(t.type)&&t.click&&S(t,\"input\")&&Y.get(t,\"click\")||S(t,\"a\")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},E.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},E.Event=function(e,t){if(!(this instanceof E.Event))return new E.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?xe:we,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&E.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:we,isPropagationStopped:we,isImmediatePropagationStopped:we,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=xe,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=xe,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=xe,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,\"char\":!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},E.event.addProp),E.each({focus:\"focusin\",blur:\"focusout\"},function(t,e){E.event.special[t]={setup:function(){return Ee(this,t,Ce),!1},trigger:function(){return Ee(this,t),!0},_default:function(e){return Y.get(e.target,t)},delegateType:e}}),E.each({mouseenter:\"mouseover\",mouseleave:\"mouseout\",pointerenter:\"pointerover\",pointerleave:\"pointerout\"},function(e,i){E.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||E.contains(this,n))||(e.type=r.origType,t=r.handler.apply(this,arguments),e.type=i),t}}}),E.fn.extend({on:function(e,t,n,r){return Te(this,e,t,n,r)},one:function(e,t,n,r){return Te(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,E(e.delegateTarget).off(r.namespace?r.origType+\".\"+r.namespace:r.origType,r.selector,r.handler),this;if(\"object\"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&\"function\"!=typeof t||(n=t,t=void 0),!1===n&&(n=we),this.each(function(){E.event.remove(this,e,n,t)})}});var Ae=/<script|<style|<link/i,Ne=/checked\\s*(?:[^=]|=\\s*.checked.)/i,Se=/^\\s*<!\\[CDATA\\[|\\]\\]>\\s*$/g;function ke(e,t){return S(e,\"table\")&&S(11!==t.nodeType?t:t.firstChild,\"tr\")&&E(e).children(\"tbody\")[0]||e}function De(e){return e.type=(null!==e.getAttribute(\"type\"))+\"/\"+e.type,e}function Le(e){return\"true/\"===(e.type||\"\").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute(\"type\"),e}function je(e,t){var n,r,i,o,a,s;if(1===t.nodeType){if(Y.hasData(e)&&(s=Y.get(e).events))for(i in Y.remove(t,\"handle events\"),s)for(n=0,r=s[i].length;n<r;n++)E.event.add(t,i,s[i][n]);G.hasData(e)&&(o=G.access(e),a=E.extend({},o),G.set(t,a))}}function qe(n,r,i,o){r=v(r);var e,t,a,s,u,l,c=0,f=n.length,d=f-1,p=r[0],h=b(p);if(h||1<f&&\"string\"==typeof p&&!m.checkClone&&Ne.test(p))return n.each(function(e){var t=n.eq(e);h&&(r[0]=p.call(this,e,t.html())),qe(t,r,i,o)});if(f&&(t=(e=me(r,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(s=(a=E.map(ge(e,\"script\"),De)).length;c<f;c++)u=e,c!==d&&(u=E.clone(u,!0,!0),s&&E.merge(a,ge(u,\"script\"))),i.call(n[c],u,c);if(s)for(l=a[a.length-1].ownerDocument,E.map(a,Le),c=0;c<s;c++)u=a[c],pe.test(u.type||\"\")&&!Y.access(u,\"globalEval\")&&E.contains(l,u)&&(u.src&&\"module\"!==(u.type||\"\").toLowerCase()?E._evalUrl&&!u.noModule&&E._evalUrl(u.src,{nonce:u.nonce||u.getAttribute(\"nonce\")},l):C(u.textContent.replace(Se,\"\"),u,l))}return n}function Oe(e,t,n){for(var r,i=t?E.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||E.cleanData(ge(r)),r.parentNode&&(n&&ie(r)&&ve(ge(r,\"script\")),r.parentNode.removeChild(r));return e}E.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,i,o,a,s,u,l,c=e.cloneNode(!0),f=ie(e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||E.isXMLDoc(e)))for(a=ge(c),r=0,i=(o=ge(e)).length;r<i;r++)s=o[r],u=a[r],void 0,\"input\"===(l=u.nodeName.toLowerCase())&&fe.test(s.type)?u.checked=s.checked:\"input\"!==l&&\"textarea\"!==l||(u.defaultValue=s.defaultValue);if(t)if(n)for(o=o||ge(e),a=a||ge(c),r=0,i=o.length;r<i;r++)je(o[r],a[r]);else je(e,c);return 0<(a=ge(c,\"script\")).length&&ve(a,!f&&ge(e,\"script\")),c},cleanData:function(e){for(var t,n,r,i=E.event.special,o=0;void 0!==(n=e[o]);o++)if(X(n)){if(t=n[Y.expando]){if(t.events)for(r in t.events)i[r]?E.event.remove(n,r):E.removeEvent(n,r,t.handle);n[Y.expando]=void 0}n[G.expando]&&(n[G.expando]=void 0)}}}),E.fn.extend({detach:function(e){return Oe(this,e,!0)},remove:function(e){return Oe(this,e)},text:function(e){return $(this,function(e){return void 0===e?E.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return qe(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||ke(this,e).appendChild(e)})},prepend:function(){return qe(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=ke(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return qe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return qe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(E.cleanData(ge(e,!1)),e.textContent=\"\");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return E.clone(this,e,t)})},html:function(e){return $(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if(\"string\"==typeof e&&!Ae.test(e)&&!he[(de.exec(e)||[\"\",\"\"])[1].toLowerCase()]){e=E.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(E.cleanData(ge(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return qe(this,arguments,function(e){var t=this.parentNode;E.inArray(this,n)<0&&(E.cleanData(ge(this)),t&&t.replaceChild(e,this))},n)}}),E.each({appendTo:\"append\",prependTo:\"prepend\",insertBefore:\"before\",insertAfter:\"after\",replaceAll:\"replaceWith\"},function(e,a){E.fn[e]=function(e){for(var t,n=[],r=E(e),i=r.length-1,o=0;o<=i;o++)t=o===i?this:this.clone(!0),E(r[o])[a](t),u.apply(n,t.get());return this.pushStack(n)}});var Pe=new RegExp(\"^(\"+ee+\")(?!px)[a-z%]+$\",\"i\"),He=/^--/,Ie=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=g),t.getComputedStyle(e)},Re=function(e,t,n){var r,i,o={};for(i in t)o[i]=e.style[i],e.style[i]=t[i];for(i in r=n.call(e),t)e.style[i]=o[i];return r},Be=new RegExp(ne.join(\"|\"),\"i\"),Me=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",We=new RegExp(\"^\"+Me+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+Me+\"+$\",\"g\");function Fe(e,t,n){var r,i,o,a,s=He.test(t),u=e.style;return(n=n||Ie(e))&&(a=n.getPropertyValue(t)||n[t],s&&(a=a.replace(We,\"$1\")),\"\"!==a||ie(e)||(a=E.style(e,t)),!m.pixelBoxStyles()&&Pe.test(a)&&Be.test(t)&&(r=u.width,i=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=n.width,u.width=r,u.minWidth=i,u.maxWidth=o)),void 0!==a?a+\"\":a}function $e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){u.style.cssText=\"position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0\",l.style.cssText=\"position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%\",re.appendChild(u).appendChild(l);var e=g.getComputedStyle(l);n=\"1%\"!==e.top,s=12===t(e.marginLeft),l.style.right=\"60%\",o=36===t(e.right),r=36===t(e.width),l.style.position=\"absolute\",i=12===t(l.offsetWidth/3),re.removeChild(u),l=null}}function t(e){return Math.round(parseFloat(e))}var n,r,i,o,a,s,u=w.createElement(\"div\"),l=w.createElement(\"div\");l.style&&(l.style.backgroundClip=\"content-box\",l.cloneNode(!0).style.backgroundClip=\"\",m.clearCloneStyle=\"content-box\"===l.style.backgroundClip,E.extend(m,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),s},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,t,n,r;return null==a&&(e=w.createElement(\"table\"),t=w.createElement(\"tr\"),n=w.createElement(\"div\"),e.style.cssText=\"position:absolute;left:-11111px;border-collapse:separate\",t.style.cssText=\"border:1px solid\",t.style.height=\"1px\",n.style.height=\"9px\",n.style.display=\"block\",re.appendChild(e).appendChild(t).appendChild(n),r=g.getComputedStyle(t),a=parseInt(r.height,10)+parseInt(r.borderTopWidth,10)+parseInt(r.borderBottomWidth,10)===t.offsetHeight,re.removeChild(e)),a}}))}();var ze=[\"Webkit\",\"Moz\",\"ms\"],_e=w.createElement(\"div\").style,Ue={};function Ve(e){var t=E.cssProps[e]||Ue[e];return t||(e in _e?e:Ue[e]=function(e){var t=e[0].toUpperCase()+e.slice(1),n=ze.length;while(n--)if((e=ze[n]+t)in _e)return e}(e)||e)}var Xe,Qe,Ye=/^(none|table(?!-c[ea]).+)/,Ge={position:\"absolute\",visibility:\"hidden\",display:\"block\"},Ke={letterSpacing:\"0\",fontWeight:\"400\"};function Je(e,t,n){var r=te.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||\"px\"):t}function Ze(e,t,n,r,i,o){var a=\"width\"===t?1:0,s=0,u=0;if(n===(r?\"border\":\"content\"))return 0;for(;a<4;a+=2)\"margin\"===n&&(u+=E.css(e,n+ne[a],!0,i)),r?(\"content\"===n&&(u-=E.css(e,\"padding\"+ne[a],!0,i)),\"margin\"!==n&&(u-=E.css(e,\"border\"+ne[a]+\"Width\",!0,i))):(u+=E.css(e,\"padding\"+ne[a],!0,i),\"padding\"!==n?u+=E.css(e,\"border\"+ne[a]+\"Width\",!0,i):s+=E.css(e,\"border\"+ne[a]+\"Width\",!0,i));return!r&&0<=o&&(u+=Math.max(0,Math.ceil(e[\"offset\"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))||0),u}function et(e,t,n){var r=Ie(e),i=(!m.boxSizingReliable()||n)&&\"border-box\"===E.css(e,\"boxSizing\",!1,r),o=i,a=Fe(e,t,r),s=\"offset\"+t[0].toUpperCase()+t.slice(1);if(Pe.test(a)){if(!n)return a;a=\"auto\"}return(!m.boxSizingReliable()&&i||!m.reliableTrDimensions()&&S(e,\"tr\")||\"auto\"===a||!parseFloat(a)&&\"inline\"===E.css(e,\"display\",!1,r))&&e.getClientRects().length&&(i=\"border-box\"===E.css(e,\"boxSizing\",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+Ze(e,t,n||(i?\"border\":\"content\"),o,r,a)+\"px\"}E.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Fe(e,\"opacity\");return\"\"===n?\"1\":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=V(t),u=He.test(t),l=e.style;if(u||(t=Ve(s)),a=E.cssHooks[t]||E.cssHooks[s],void 0===n)return a&&\"get\"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t];\"string\"===(o=typeof n)&&(i=te.exec(n))&&i[1]&&(n=function(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return E.css(e,t,\"\")},u=s(),l=n&&n[3]||(E.cssNumber[t]?\"\":\"px\"),c=e.nodeType&&(E.cssNumber[t]||\"px\"!==l&&+u)&&te.exec(E.css(e,t));if(c&&c[3]!==l){u/=2,l=l||c[3],c=+u||1;while(a--)E.style(e,t,c+l),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),c/=o;c*=2,E.style(e,t,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}(e,t,i),o=\"number\"),null!=n&&n==n&&(\"number\"!==o||u||(n+=i&&i[3]||(E.cssNumber[s]?\"\":\"px\")),m.clearCloneStyle||\"\"!==n||0!==t.indexOf(\"background\")||(l[t]=\"inherit\"),a&&\"set\"in a&&void 0===(n=a.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var i,o,a,s=V(t);return He.test(t)||(t=Ve(s)),(a=E.cssHooks[t]||E.cssHooks[s])&&\"get\"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Fe(e,t,r)),\"normal\"===i&&t in Ke&&(i=Ke[t]),\"\"===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),E.each([\"height\",\"width\"],function(e,u){E.cssHooks[u]={get:function(e,t,n){if(t)return!Ye.test(E.css(e,\"display\"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,u,n):Re(e,Ge,function(){return et(e,u,n)})},set:function(e,t,n){var r,i=Ie(e),o=!m.scrollboxSize()&&\"absolute\"===i.position,a=(o||n)&&\"border-box\"===E.css(e,\"boxSizing\",!1,i),s=n?Ze(e,u,n,a,i):0;return a&&o&&(s-=Math.ceil(e[\"offset\"+u[0].toUpperCase()+u.slice(1)]-parseFloat(i[u])-Ze(e,u,\"border\",!1,i)-.5)),s&&(r=te.exec(t))&&\"px\"!==(r[3]||\"px\")&&(e.style[u]=t,t=E.css(e,u)),Je(0,t,s)}}}),E.cssHooks.marginLeft=$e(m.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Fe(e,\"marginLeft\"))||e.getBoundingClientRect().left-Re(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+\"px\"}),E.each({margin:\"\",padding:\"\",border:\"Width\"},function(i,o){E.cssHooks[i+o]={expand:function(e){for(var t=0,n={},r=\"string\"==typeof e?e.split(\" \"):[e];t<4;t++)n[i+ne[t]+o]=r[t]||r[t-2]||r[0];return n}},\"margin\"!==i&&(E.cssHooks[i+o].set=Je)}),E.fn.extend({css:function(e,t){return $(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=Ie(e),i=t.length;a<i;a++)o[t[a]]=E.css(e,t[a],!1,r);return o}return void 0!==n?E.style(e,t,n):E.css(e,t)},e,t,1<arguments.length)}}),E.fn.delay=function(r,e){return r=E.fx&&E.fx.speeds[r]||r,e=e||\"fx\",this.queue(e,function(e,t){var n=g.setTimeout(e,r);t.stop=function(){g.clearTimeout(n)}})},Xe=w.createElement(\"input\"),Qe=w.createElement(\"select\").appendChild(w.createElement(\"option\")),Xe.type=\"checkbox\",m.checkOn=\"\"!==Xe.value,m.optSelected=Qe.selected,(Xe=w.createElement(\"input\")).value=\"t\",Xe.type=\"radio\",m.radioValue=\"t\"===Xe.value;var tt,nt=E.expr.attrHandle;E.fn.extend({attr:function(e,t){return $(this,E.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){E.removeAttr(this,e)})}}),E.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return\"undefined\"==typeof e.getAttribute?E.prop(e,t,n):(1===o&&E.isXMLDoc(e)||(i=E.attrHooks[t.toLowerCase()]||(E.expr.match.bool.test(t)?tt:void 0)),void 0!==n?null===n?void E.removeAttr(e,t):i&&\"set\"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+\"\"),n):i&&\"get\"in i&&null!==(r=i.get(e,t))?r:null==(r=E.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!m.radioValue&&\"radio\"===t&&S(e,\"input\")){var n=e.value;return e.setAttribute(\"type\",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(H);if(i&&1===e.nodeType)while(n=i[r++])e.removeAttribute(n)}}),tt={set:function(e,t,n){return!1===t?E.removeAttr(e,n):e.setAttribute(n,n),n}},E.each(E.expr.match.bool.source.match(/\\w+/g),function(e,t){var a=nt[t]||E.find.attr;nt[t]=function(e,t,n){var r,i,o=t.toLowerCase();return n||(i=nt[o],nt[o]=r,r=null!=a(e,t,n)?o:null,nt[o]=i),r}});var rt=/^(?:input|select|textarea|button)$/i,it=/^(?:a|area)$/i;function ot(e){return(e.match(H)||[]).join(\" \")}function at(e){return e.getAttribute&&e.getAttribute(\"class\")||\"\"}function st(e){return Array.isArray(e)?e:\"string\"==typeof e&&e.match(H)||[]}E.fn.extend({prop:function(e,t){return $(this,E.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[E.propFix[e]||e]})}}),E.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&E.isXMLDoc(e)||(t=E.propFix[t]||t,i=E.propHooks[t]),void 0!==n?i&&\"set\"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&\"get\"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=E.find.attr(e,\"tabindex\");return t?parseInt(t,10):rt.test(e.nodeName)||it.test(e.nodeName)&&e.href?0:-1}}},propFix:{\"for\":\"htmlFor\",\"class\":\"className\"}}),m.optSelected||(E.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),E.each([\"tabIndex\",\"readOnly\",\"maxLength\",\"cellSpacing\",\"cellPadding\",\"rowSpan\",\"colSpan\",\"useMap\",\"frameBorder\",\"contentEditable\"],function(){E.propFix[this.toLowerCase()]=this}),E.fn.extend({addClass:function(t){var e,n,r,i,o,a;return b(t)?this.each(function(e){E(this).addClass(t.call(this,e,at(this)))}):(e=st(t)).length?this.each(function(){if(r=at(this),n=1===this.nodeType&&\" \"+ot(r)+\" \"){for(o=0;o<e.length;o++)i=e[o],n.indexOf(\" \"+i+\" \")<0&&(n+=i+\" \");a=ot(n),r!==a&&this.setAttribute(\"class\",a)}}):this},removeClass:function(t){var e,n,r,i,o,a;return b(t)?this.each(function(e){E(this).removeClass(t.call(this,e,at(this)))}):arguments.length?(e=st(t)).length?this.each(function(){if(r=at(this),n=1===this.nodeType&&\" \"+ot(r)+\" \"){for(o=0;o<e.length;o++){i=e[o];while(-1<n.indexOf(\" \"+i+\" \"))n=n.replace(\" \"+i+\" \",\" \")}a=ot(n),r!==a&&this.setAttribute(\"class\",a)}}):this:this.attr(\"class\",\"\")},toggleClass:function(t,n){var e,r,i,o,a=typeof t,s=\"string\"===a||Array.isArray(t);return b(t)?this.each(function(e){E(this).toggleClass(t.call(this,e,at(this),n),n)}):\"boolean\"==typeof n&&s?n?this.addClass(t):this.removeClass(t):(e=st(t),this.each(function(){if(s)for(o=E(this),i=0;i<e.length;i++)r=e[i],o.hasClass(r)?o.removeClass(r):o.addClass(r);else void 0!==t&&\"boolean\"!==a||((r=at(this))&&Y.set(this,\"__className__\",r),this.setAttribute&&this.setAttribute(\"class\",r||!1===t?\"\":Y.get(this,\"__className__\")||\"\"))}))},hasClass:function(e){var t,n,r=0;t=\" \"+e+\" \";while(n=this[r++])if(1===n.nodeType&&-1<(\" \"+ot(at(n))+\" \").indexOf(t))return!0;return!1}});var ut=/\\r/g;E.fn.extend({val:function(n){var r,e,i,t=this[0];return arguments.length?(i=b(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=i?n.call(this,e,E(this).val()):n)?t=\"\":\"number\"==typeof t?t+=\"\":Array.isArray(t)&&(t=E.map(t,function(e){return null==e?\"\":e+\"\"})),(r=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&\"set\"in r&&void 0!==r.set(this,t,\"value\")||(this.value=t))})):t?(r=E.valHooks[t.type]||E.valHooks[t.nodeName.toLowerCase()])&&\"get\"in r&&void 0!==(e=r.get(t,\"value\"))?e:\"string\"==typeof(e=t.value)?e.replace(ut,\"\"):null==e?\"\":e:void 0}}),E.extend({valHooks:{option:{get:function(e){var t=E.find.attr(e,\"value\");return null!=t?t:ot(E.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a=\"select-one\"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!S(n.parentNode,\"optgroup\"))){if(t=E(n).val(),a)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=E.makeArray(t),a=i.length;while(a--)((r=i[a]).selected=-1<E.inArray(E.valHooks.option.get(r),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),E.each([\"radio\",\"checkbox\"],function(){E.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<E.inArray(E(e).val(),t)}},m.checkOn||(E.valHooks[this].get=function(e){return null===e.getAttribute(\"value\")?\"on\":e.value})}),m.focusin=\"onfocusin\"in g;var lt=/^(?:focusinfocus|focusoutblur)$/,ct=function(e){e.stopPropagation()};E.extend(E.event,{trigger:function(e,t,n,r){var i,o,a,s,u,l,c,f,d=[n||w],p=y.call(e,\"type\")?e.type:e,h=y.call(e,\"namespace\")?e.namespace.split(\".\"):[];if(o=f=a=n=n||w,3!==n.nodeType&&8!==n.nodeType&&!lt.test(p+E.event.triggered)&&(-1<p.indexOf(\".\")&&(p=(h=p.split(\".\")).shift(),h.sort()),u=p.indexOf(\":\")<0&&\"on\"+p,(e=e[E.expando]?e:new E.Event(p,\"object\"==typeof e&&e)).isTrigger=r?2:3,e.namespace=h.join(\".\"),e.rnamespace=e.namespace?new RegExp(\"(^|\\\\.)\"+h.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:E.makeArray(t,[e]),c=E.event.special[p]||{},r||!c.trigger||!1!==c.trigger.apply(n,t))){if(!r&&!c.noBubble&&!x(n)){for(s=c.delegateType||p,lt.test(s+p)||(o=o.parentNode);o;o=o.parentNode)d.push(o),a=o;a===(n.ownerDocument||w)&&d.push(a.defaultView||a.parentWindow||g)}i=0;while((o=d[i++])&&!e.isPropagationStopped())f=o,e.type=1<i?s:c.bindType||p,(l=(Y.get(o,\"events\")||Object.create(null))[e.type]&&Y.get(o,\"handle\"))&&l.apply(o,t),(l=u&&o[u])&&l.apply&&X(o)&&(e.result=l.apply(o,t),!1===e.result&&e.preventDefault());return e.type=p,r||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(d.pop(),t)||!X(n)||u&&b(n[p])&&!x(n)&&((a=n[u])&&(n[u]=null),E.event.triggered=p,e.isPropagationStopped()&&f.addEventListener(p,ct),n[p](),e.isPropagationStopped()&&f.removeEventListener(p,ct),E.event.triggered=void 0,a&&(n[u]=a)),e.result}},simulate:function(e,t,n){var r=E.extend(new E.Event,n,{type:e,isSimulated:!0});E.event.trigger(r,null,t)}}),E.fn.extend({trigger:function(e,t){return this.each(function(){E.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return E.event.trigger(e,t,n,!0)}}),m.focusin||E.each({focus:\"focusin\",blur:\"focusout\"},function(n,r){var i=function(e){E.event.simulate(r,e.target,E.event.fix(e))};E.event.special[r]={setup:function(){var e=this.ownerDocument||this.document||this,t=Y.access(e,r);t||e.addEventListener(n,i,!0),Y.access(e,r,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=Y.access(e,r)-1;t?Y.access(e,r,t):(e.removeEventListener(n,i,!0),Y.remove(e,r))}}}),E.parseXML=function(e){var t,n;if(!e||\"string\"!=typeof e)return null;try{t=(new g.DOMParser).parseFromString(e,\"text/xml\")}catch(e){}return n=t&&t.getElementsByTagName(\"parsererror\")[0],t&&!n||E.error(\"Invalid XML: \"+(n?E.map(n.childNodes,function(e){return e.textContent}).join(\"\\n\"):e)),t};var ft,dt=/\\[\\]$/,pt=/\\r?\\n/g,ht=/^(?:submit|button|image|reset|file)$/i,gt=/^(?:input|select|textarea|keygen)/i;function vt(n,e,r,i){var t;if(Array.isArray(e))E.each(e,function(e,t){r||dt.test(n)?i(n,t):vt(n+\"[\"+(\"object\"==typeof t&&null!=t?e:\"\")+\"]\",t,r,i)});else if(r||\"object\"!==T(e))i(n,e);else for(t in e)vt(n+\"[\"+t+\"]\",e[t],r,i)}E.param=function(e,t){var n,r=[],i=function(e,t){var n=b(t)?t():t;r[r.length]=encodeURIComponent(e)+\"=\"+encodeURIComponent(null==n?\"\":n)};if(null==e)return\"\";if(Array.isArray(e)||e.jquery&&!E.isPlainObject(e))E.each(e,function(){i(this.name,this.value)});else for(n in e)vt(n,e[n],t,i);return r.join(\"&\")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=E.prop(this,\"elements\");return e?E.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!E(this).is(\":disabled\")&&gt.test(this.nodeName)&&!ht.test(e)&&(this.checked||!fe.test(e))}).map(function(e,t){var n=E(this).val();return null==n?null:Array.isArray(n)?E.map(n,function(e){return{name:t.name,value:e.replace(pt,\"\\r\\n\")}}):{name:t.name,value:n.replace(pt,\"\\r\\n\")}}).get()}}),E.fn.extend({wrapAll:function(e){var t;return this[0]&&(b(e)&&(e=e.call(this[0])),t=E(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstElementChild)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return b(n)?this.each(function(e){E(this).wrapInner(n.call(this,e))}):this.each(function(){var e=E(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=b(t);return this.each(function(e){E(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not(\"body\").each(function(){E(this).replaceWith(this.childNodes)}),this}}),E.expr.pseudos.hidden=function(e){return!E.expr.pseudos.visible(e)},E.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},m.createHTMLDocument=((ft=w.implementation.createHTMLDocument(\"\").body).innerHTML=\"<form></form><form></form>\",2===ft.childNodes.length),E.parseHTML=function(e,t,n){return\"string\"!=typeof e?[]:(\"boolean\"==typeof t&&(n=t,t=!1),t||(m.createHTMLDocument?((r=(t=w.implementation.createHTMLDocument(\"\")).createElement(\"base\")).href=w.location.href,t.head.appendChild(r)):t=w),o=!n&&[],(i=k.exec(e))?[t.createElement(i[1])]:(i=me([e],t,o),o&&o.length&&E(o).remove(),E.merge([],i.childNodes)));var r,i,o},E.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,l=E.css(e,\"position\"),c=E(e),f={};\"static\"===l&&(e.style.position=\"relative\"),s=c.offset(),o=E.css(e,\"top\"),u=E.css(e,\"left\"),(\"absolute\"===l||\"fixed\"===l)&&-1<(o+u).indexOf(\"auto\")?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),b(t)&&(t=t.call(e,n,E.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+i),\"using\"in t?t.using.call(e,f):c.css(f)}},E.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){E.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if(\"fixed\"===E.css(r,\"position\"))t=r.getBoundingClientRect();else{t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;while(e&&(e===n.body||e===n.documentElement)&&\"static\"===E.css(e,\"position\"))e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=E(e).offset()).top+=E.css(e,\"borderTopWidth\",!0),i.left+=E.css(e,\"borderLeftWidth\",!0))}return{top:t.top-i.top-E.css(r,\"marginTop\",!0),left:t.left-i.left-E.css(r,\"marginLeft\",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&\"static\"===E.css(e,\"position\"))e=e.offsetParent;return e||re})}}),E.each({scrollLeft:\"pageXOffset\",scrollTop:\"pageYOffset\"},function(t,i){var o=\"pageYOffset\"===i;E.fn[t]=function(e){return $(this,function(e,t,n){var r;if(x(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===n)return r?r[i]:e[t];r?r.scrollTo(o?r.pageXOffset:n,o?n:r.pageYOffset):e[t]=n},t,e,arguments.length)}}),E.each([\"top\",\"left\"],function(e,n){E.cssHooks[n]=$e(m.pixelPosition,function(e,t){if(t)return t=Fe(e,n),Pe.test(t)?E(e).position()[n]+\"px\":t})}),E.each({Height:\"height\",Width:\"width\"},function(a,s){E.each({padding:\"inner\"+a,content:s,\"\":\"outer\"+a},function(r,o){E.fn[o]=function(e,t){var n=arguments.length&&(r||\"boolean\"!=typeof e),i=r||(!0===e||!0===t?\"margin\":\"border\");return $(this,function(e,t,n){var r;return x(e)?0===o.indexOf(\"outer\")?e[\"inner\"+a]:e.document.documentElement[\"client\"+a]:9===e.nodeType?(r=e.documentElement,Math.max(e.body[\"scroll\"+a],r[\"scroll\"+a],e.body[\"offset\"+a],r[\"offset\"+a],r[\"client\"+a])):void 0===n?E.css(e,t,i):E.style(e,t,n,i)},s,n?e:void 0,n)}})}),E.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,\"**\"):this.off(t,e||\"**\",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),E.each(\"blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu\".split(\" \"),function(e,n){E.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}});var yt=/^[\\s\\uFEFF\\xA0]+|([^\\s\\uFEFF\\xA0])[\\s\\uFEFF\\xA0]+$/g;E.proxy=function(e,t){var n,r,i;if(\"string\"==typeof t&&(n=e[t],t=e,e=n),b(e))return r=s.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||E.guid++,i},E.holdReady=function(e){e?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=S,E.isFunction=b,E.isWindow=x,E.camelCase=V,E.type=T,E.now=Date.now,E.isNumeric=function(e){var t=E.type(e);return(\"number\"===t||\"string\"===t)&&!isNaN(e-parseFloat(e))},E.trim=function(e){return null==e?\"\":(e+\"\").replace(yt,\"$1\")},\"function\"==typeof define&&define.amd&&define(\"jquery\",[],function(){return E});var mt=g.jQuery,bt=g.$;return E.noConflict=function(e){return g.$===E&&(g.$=bt),e&&g.jQuery===E&&(g.jQuery=mt),E},\"undefined\"==typeof e&&(g.jQuery=g.$=E),E});\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ?\n    'm=' + part : part).trim() + '\\r\\n');\n};\n\n// Returns the session description.\nSDPUtils.getDescription = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// Returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\n// Input can be prefixed with a=.\nSDPUtils.parseCandidate = function(line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  const candidate = {\n    foundation: parts[0],\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7],\n  };\n\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\n// This does not include the a= prefix!\nSDPUtils.writeCandidate = function(candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// Sample input:\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  let parts = line.substr(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10), // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generates a rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses a extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n  };\n};\n\n// Generates an extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses a fmtp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param] !== undefined) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  const parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' '),\n  };\n};\n\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses a RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10),\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\n// Parse a ssrc-group line (see RFC 5576). Sample input:\n// a=ssrc-group:semantics 12 34\nSDPUtils.parseSsrcGroup = function(line) {\n  const parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// Returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\n// Parses a fingerprint line for DTLS-SRTP.\nSDPUtils.parseFingerprint = function(line) {\n  const parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: [],\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(line => {\n      const parts = line.substr(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc,\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize,\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize,\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n',\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' '),\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n            typeof define === 'function' && define.amd ? define(factory) :\n            (global = global || self, global.strophe = factory());\n}(this, function () { 'use strict';\n\n            var global$1 = (typeof global !== \"undefined\" ? global :\n                        typeof self !== \"undefined\" ? self :\n                        typeof window !== \"undefined\" ? window : {});\n\n            function _typeof(obj) {\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                _typeof = function (obj) {\n                  return typeof obj;\n                };\n              } else {\n                _typeof = function (obj) {\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                };\n              }\n\n              return _typeof(obj);\n            }\n\n            function _toConsumableArray(arr) {\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n            }\n\n            function _arrayWithoutHoles(arr) {\n              if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n                return arr2;\n              }\n            }\n\n            function _iterableToArray(iter) {\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n            }\n\n            function _nonIterableSpread() {\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            var safe_add = function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            var bit_rol = function bit_rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            var str2binl = function str2binl(str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              var bin = [];\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            var binl2str = function binl2str(bin) {\n              var str = \"\";\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            var binl2hex = function binl2hex(binarray) {\n              var hex_tab = \"0123456789abcdef\";\n              var str = \"\";\n\n              for (var i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n            };\n\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            var core_md5 = function core_md5(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var olda, oldb, oldc, oldd;\n\n              for (var i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            var MD5 = {\n              hexdigest: function hexdigest(s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function hash(s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n                e = safe_add$1(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add$1(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            var SHA1 = {\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function b64_sha1(s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function str_sha1(s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            var utils = {\n              utf16to8: function utf16to8(str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function addCookies(cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (var cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    var expires = '';\n                    var domain = '';\n                    var path = '';\n                    var cookieObj = cookies[cookieName];\n                    var isObj = _typeof(cookieObj) === \"object\";\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n\n            var Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"@VERSION@\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag: function validTag(tag) {\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute: function validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n                validCSS: function validCSS(style) {\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace: function addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild: function forEachChild(elem, elemName, func) {\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual: function isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** PrivateFunction: _makeGenerator\n               *  _Private_ function that creates a dummy XML DOM document to serve as\n               *  an element and text node generator.\n               */\n              _makeGenerator: function _makeGenerator() {\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                  doc = this._getIEXmlDom();\n                  doc.appendChild(doc.createElement('strophe'));\n                } else {\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator: function xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** PrivateFunction: _getIEXmlDom\n               *  Gets IE xml doc object\n               *\n               *  Returns:\n               *    A Microsoft XML DOM Object\n               *  See Also:\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n               */\n              _getIEXmlDom: function _getIEXmlDom() {\n                var doc = null;\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n                for (var d = 0; d < docStrings.length; d++) {\n                  if (doc === null) {\n                    try {\n                      doc = new ActiveXObject(docStrings[d]);\n                    } catch (e) {\n                      doc = null;\n                    }\n                  } else {\n                    break;\n                  }\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement: function xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (var a = 1; a < arguments.length; a++) {\n                  var arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\n                    for (var i = 0; i < arg.length; i++) {\n                      var attr = arg[i];\n\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (_typeof(arg) === \"object\") {\n                    for (var k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape: function xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape: function xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode: function xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode: function xmlHtmlNode(html) {\n                var node; //ensure text is escaped\n\n                if (DOMParser) {\n                  var parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText: function getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                var str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement: function copyElement(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (var i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml: function createHtml(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        var attribute = Strophe.XHTML.attributes[tag][i];\n                        var value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          var css = [];\n                          var cssAttrs = value.split(';');\n\n                          for (var j = 0; j < cssAttrs.length; j++) {\n                            var attr = cssAttrs[j].split(':');\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode: function escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode: function unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid: function getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid: function getDomainFromJid(jid) {\n                var bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  var parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid: function getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                var s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid: function getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError: function _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log: function log(level, msg) {\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\n                  window.console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug: function debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info: function info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn: function warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error: function error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal: function fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize: function serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\n                  return elem.attributes[i].nodeName;\n                });\n\n                names.sort();\n                var result = names.reduce(function (a, n) {\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\n                }, \"<\".concat(elem.nodeName));\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (var i = 0; i < elem.childNodes.length; i++) {\n                    var child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = function (name, attrs) {\n              // Set correct namespace for jabber:client elements\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                if (attrs && !attrs.xmlns) {\n                  attrs.xmlns = Strophe.NS.CLIENT;\n                } else if (!attrs) {\n                  attrs = {\n                    xmlns: Strophe.NS.CLIENT\n                  };\n                }\n              } // Holds the tree being built.\n\n\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n              this.node = this.nodeTree;\n            };\n\n            Strophe.Builder.prototype = {\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n              tree: function tree() {\n                return this.nodeTree;\n              },\n\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n              toString: function toString() {\n                return Strophe.serialize(this.nodeTree);\n              },\n\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              up: function up() {\n                this.node = this.node.parentNode;\n                return this;\n              },\n\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              root: function root() {\n                this.node = this.nodeTree;\n                return this;\n              },\n\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              attrs: function attrs(moreattrs) {\n                for (var k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              },\n\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              c: function c(name, attrs, text) {\n                var child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              },\n\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              cnode: function cnode(elem) {\n                var impNode;\n                var xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              },\n\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              t: function t(text) {\n                var child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              },\n\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              h: function h(html) {\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                var xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace: function getNamespace(elem) {\n                var elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch: function namespaceMatch(elem) {\n                var _this = this;\n\n                var nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, function (elem) {\n                    if (_this.getNamespace(elem) === _this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch: function isMatch(elem) {\n                var from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                var elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run: function run(elem) {\n                var result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString: function toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            /** PrivateConstructor: Strophe.TimedHandler\n             *  Create and initialize a new Strophe.TimedHandler object.\n             *\n             *  Parameters:\n             *    (Integer) period - The number of milliseconds to wait before the\n             *      handler is called.\n             *    (Function) handler - The callback to run when the handler fires.  This\n             *      function should take no arguments.\n             *\n             *  Returns:\n             *    A new Strophe.TimedHandler object.\n             */\n\n            Strophe.TimedHandler = function (period, handler) {\n              this.period = period;\n              this.handler = handler;\n              this.lastCalled = new Date().getTime();\n              this.user = true;\n            };\n\n            Strophe.TimedHandler.prototype = {\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n              run: function run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              },\n\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n              reset: function reset() {\n                this.lastCalled = new Date().getTime();\n              },\n\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n              toString: function toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA1 - 70\n             *      DIGEST-MD5 - 60\n             *      PLAIN - 50\n             *      OAUTH-BEARER - 40\n             *      OAUTH-2 - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = function (service, options) {\n              var _this2 = this;\n\n              // The service URL\n              this.service = service; // Configuration options\n\n              this.options = options || {};\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\n\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                this._proto = new Strophe.Websocket(this);\n              } else {\n                this._proto = new Strophe.Bosh(this);\n              }\n              /* The connected JID. */\n\n\n              this.jid = \"\";\n              /* the JIDs domain */\n\n              this.domain = null;\n              /* stream:features */\n\n              this.features = null; // SASL\n\n              this._sasl_data = {};\n              this.do_session = false;\n              this.do_bind = false; // handler lists\n\n              this.timedHandlers = [];\n              this.handlers = [];\n              this.removeTimeds = [];\n              this.removeHandlers = [];\n              this.addTimeds = [];\n              this.addHandlers = [];\n              this.protocolErrorHandlers = {\n                'HTTP': {},\n                'websocket': {}\n              };\n              this._idleTimeout = null;\n              this._disconnectTimeout = null;\n              this.authenticated = false;\n              this.connected = false;\n              this.disconnecting = false;\n              this.do_authentication = true;\n              this.paused = false;\n              this.restored = false;\n              this._data = [];\n              this._uniqueId = 0;\n              this._sasl_success_handler = null;\n              this._sasl_failure_handler = null;\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n              this._idleTimeout = setTimeout(function () {\n                return _this2._onIdle();\n              }, 100);\n              utils.addCookies(this.options.cookies);\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\n\n              for (var k in Strophe._connectionPlugins) {\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                  var F = function F() {};\n\n                  F.prototype = Strophe._connectionPlugins[k];\n                  this[k] = new F();\n                  this[k].init(this);\n                }\n              }\n            };\n\n            Strophe.Connection.prototype = {\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n              reset: function reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              },\n\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n              pause: function pause() {\n                this.paused = true;\n              },\n\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n              resume: function resume() {\n                this.paused = false;\n              },\n\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n              getUniqueId: function getUniqueId(suffix) {\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  var r = Math.random() * 16 | 0,\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              },\n\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              },\n\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should not be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               */\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                /** Variable: servtype\n                 *  Digest MD5 compatibility.\n                 */\n\n                this.servtype = \"xmpp\";\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              },\n\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto instanceof Strophe.Bosh) {\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              restore: function restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n              _sessionCachingSupported: function _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n              xmlInput: function xmlInput(elem) {\n                return;\n              },\n\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n              xmlOutput: function xmlOutput(elem) {\n                return;\n              },\n\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n              rawInput: function rawInput(data) {\n                return;\n              },\n\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n              rawOutput: function rawOutput(data) {\n                return;\n              },\n\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n              nextValidRid: function nextValidRid(rid) {\n                return;\n              },\n\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n              send: function send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (var i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              },\n\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n              flush: function flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              },\n\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\n                var _this3 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this3.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\n                var _this4 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this4.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    var iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n              _queueData: function _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                var _this5 = this;\n\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(function () {\n                  return _this5._onIdle();\n                }, 100);\n              },\n\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addTimedHandler: function addTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              },\n\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n              deleteHandler: function deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                var i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              },\n\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\n              },\n\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\n                this.mechanisms[mechanism.prototype.name] = mechanism;\n              },\n\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n              disconnect: function disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                Strophe.warn(\"Disconnect was called because: \" + reason);\n\n                if (this.connected) {\n                  var pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              },\n\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (var k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    var plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\n                  }\n                }\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n              _doDisconnect: function _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              },\n\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n              _dataRecv: function _dataRecv(req, raw) {\n                var _this6 = this;\n\n                Strophe.debug(\"_dataRecv called\");\n\n                var elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  var hand = this.removeHandlers.pop();\n                  var i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                var type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  var cond = elem.getAttribute(\"condition\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, function (child) {\n                  // process handlers\n                  var newList = _this6.handlers;\n                  _this6.handlers = [];\n\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\n                    // one of the handlers throws an exception\n\n                    try {\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\n                        if (_hand.run(child)) {\n                          _this6.handlers.push(_hand);\n                        }\n                      } else {\n                        _this6.handlers.push(_hand);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n                  }\n                });\n              },\n\n              /** Attribute: mechanisms\n               *  SASL Mechanisms available for Connection.\n               */\n              mechanisms: {},\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n              _connect_cb: function _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                var bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                var conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                var hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                var matched = [];\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n\n                if (mechanisms.length > 0) {\n                  for (var i = 0; i < mechanisms.length; i++) {\n                    var mech = Strophe.getText(mechanisms[i]);\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n                  }\n                }\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              },\n\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\n                // Sorting mechanisms according to priority.\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\n                  var higher = i;\n\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    var swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              },\n\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n              authenticate: function authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              },\n\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                var mechanism_found = false;\n\n                for (var i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].prototype.test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = new mechanisms[i]();\n\n                  this._sasl_mechanism.onStart(this);\n\n                  var request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.name\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    var response = this._sasl_mechanism.onChallenge(this, null);\n\n                    request_auth_exchange.t(btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              },\n\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\n                var challenge = atob(Strophe.getText(elem));\n\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                var stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              },\n\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              },\n\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\n                // build plaintext auth iq\n                var iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_success_cb: function _sasl_success_cb(elem) {\n                var _this7 = this;\n\n                if (this._sasl_data[\"server-signature\"]) {\n                  var serverSignature;\n                  var success = atob(Strophe.getText(elem));\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  var matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                var streamfeature_handlers = [];\n\n                var wrapper = function wrapper(handlers, elem) {\n                  while (handlers.length) {\n                    _this7.deleteHandler(handlers.pop());\n                  }\n\n                  _this7._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              },\n\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n              bind: function bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                var resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              },\n\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n                  var condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                var bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this.authenticated = true;\n\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              },\n\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n              _establishSession: function _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              },\n\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              },\n\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _auth2_cb: function _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n              _onIdle: function _onIdle() {\n                var _this8 = this;\n\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  var thand = this.removeTimeds.pop();\n                  var i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                var now = new Date().getTime();\n                var newList = [];\n\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\n                  var _thand = this.timedHandlers[_i6];\n\n                  if (this.authenticated || !_thand.user) {\n                    var since = _thand.lastCalled + _thand.period;\n\n                    if (since - now <= 0) {\n                      if (_thand.run()) {\n                        newList.push(_thand);\n                      }\n                    } else {\n                      newList.push(_thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(function () {\n                    return _this8._onIdle();\n                  }, 100);\n                }\n              }\n            };\n            /** Class: Strophe.SASLMechanism\n             *\n             *  encapsulates SASL authentication mechanisms.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      OAUTHBEARER - 60\n             *      SCRAM-SHA1 - 50\n             *      DIGEST-MD5 - 40\n             *      PLAIN - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n\n            /**\n             * PrivateConstructor: Strophe.SASLMechanism\n             * SASL auth mechanism abstraction.\n             *\n             *  Parameters:\n             *    (String) name - SASL Mechanism name.\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\n             *    (Number) priority - Priority.\n             *\n             *  Returns:\n             *    A new Strophe.SASLMechanism object.\n             */\n\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\n              /** PrivateVariable: name\n               *  Mechanism name.\n               */\n              this.name = name;\n              /** PrivateVariable: isClientFirst\n               *  If client sends response without initial server challenge.\n               */\n\n              this.isClientFirst = isClientFirst;\n              /** Variable: priority\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n               *  Users may override this to prioritize mechanisms differently.\n               *\n               *  In the default configuration the priorities are\n               *\n               *  SCRAM-SHA1 - 40\n               *  DIGEST-MD5 - 30\n               *  Plain - 20\n               *\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n               *\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               */\n\n              this.priority = priority;\n            };\n\n            Strophe.SASLMechanism.prototype = {\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n              test: function test(connection) {\n                return true;\n              },\n\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n              onStart: function onStart(connection) {\n                this._connection = connection;\n              },\n\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge. If client is\n               *  first (isClientFirst === true) challenge will be null on the first call.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n              onChallenge: function onChallenge(connection, challenge) {\n                throw new Error(\"You should implement challenge handling!\");\n              },\n\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n              onFailure: function onFailure() {\n                this._connection = null;\n              },\n\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n              onSuccess: function onSuccess() {\n                this._connection = null;\n              }\n            };\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n             */\n            // Building SASL callbacks\n\n            /** PrivateConstructor: SASLAnonymous\n             *  SASL ANONYMOUS authentication.\n             */\n\n            Strophe.SASLAnonymous = function () {};\n\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\n              return connection.authcid === null;\n            };\n            /** PrivateConstructor: SASLPlain\n             *  SASL PLAIN authentication.\n             */\n\n\n            Strophe.SASLPlain = function () {};\n\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\n            Strophe.SASLPlain.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\n              var auth_str = connection.authzid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.authcid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLSHA1\n             *  SASL SCRAM SHA 1 authentication.\n             */\n\n\n            Strophe.SASLSHA1 = function () {};\n\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\n            Strophe.SASLSHA1.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n              auth_str += \",r=\";\n              auth_str += cnonce;\n              connection._sasl_data.cnonce = cnonce;\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n              auth_str = \"n,,\" + auth_str;\n\n              this.onChallenge = function (connection, challenge) {\n                var nonce, salt, iter, Hi, U, U_old, i, k;\n                var responseText = \"c=biws,\";\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\n                var cnonce = connection._sasl_data.cnonce;\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  var matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                var pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              };\n\n              return auth_str;\n            };\n            /** PrivateConstructor: SASLMD5\n             *  SASL DIGEST MD5 authentication.\n             */\n\n\n            Strophe.SASLMD5 = function () {};\n\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\n            Strophe.SASLMD5.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n            /** PrivateFunction: _quote\n             *  _Private_ utility function to backslash escape and quote strings.\n             *\n             *  Parameters:\n             *    (String) str - The string to be quoted.\n             *\n             *  Returns:\n             *    quoted string\n             */\n\n\n            Strophe.SASLMD5.prototype._quote = function (str) {\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\n            };\n\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var realm = \"\";\n              var host = null;\n              var nonce = \"\";\n              var qop = \"\";\n\n              while (challenge.match(attribMatch)) {\n                var matches = challenge.match(attribMatch);\n                challenge = challenge.replace(matches[0], \"\");\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n\n                switch (matches[1]) {\n                  case \"realm\":\n                    realm = matches[2];\n                    break;\n\n                  case \"nonce\":\n                    nonce = matches[2];\n                    break;\n\n                  case \"qop\":\n                    qop = matches[2];\n                    break;\n\n                  case \"host\":\n                    host = matches[2];\n                    break;\n                }\n              }\n\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\n\n              if (host !== null) {\n                digest_uri = digest_uri + \"/\" + host;\n              }\n\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n              var A2 = 'AUTHENTICATE:' + digest_uri;\n              var responseText = \"\";\n              responseText += 'charset=utf-8,';\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n              responseText += 'realm=' + this._quote(realm) + ',';\n              responseText += 'nonce=' + this._quote(nonce) + ',';\n              responseText += 'nc=00000001,';\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\n              responseText += 'qop=auth';\n\n              this.onChallenge = function () {\n                return \"\";\n              };\n\n              return responseText;\n            };\n            /** PrivateConstructor: SASLOAuthBearer\n             *  SASL OAuth Bearer authentication.\n             */\n\n\n            Strophe.SASLOAuthBearer = function () {};\n\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\n              var auth_str = 'n,';\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + 'a=' + connection.authzid;\n              }\n\n              auth_str = auth_str + ',';\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + 'auth=Bearer ';\n              auth_str = auth_str + connection.pass;\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + \"\\x01\";\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLExternal\n             *  SASL EXTERNAL authentication.\n             *\n             *  The EXTERNAL mechanism allows a client to request the server to use\n             *  credentials established by means external to the mechanism to\n             *  authenticate the client. The external means may be, for instance,\n             *  TLS services.\n             */\n\n\n            Strophe.SASLExternal = function () {};\n\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\n               * authcid contained or implied in the client certificate is the JID (i.e.\n               * authzid) with which the user wants to log in as.\n               *\n               * To NOT send the authzid, the user should therefore set the authcid equal\n               * to the JID when instantiating a new Strophe.Connection object.\n               */\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\n            };\n            /** PrivateConstructor: SASLXOAuth2\n             *  SASL X-OAuth2 authentication.\n             */\n\n\n            Strophe.SASLXOAuth2 = function () {};\n\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n              var auth_str = \"\\0\";\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + connection.authzid;\n              }\n\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$1 = core.Strophe;\n            var $build$1 = core.$build;\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            /** PrivateConstructor: Strophe.Request\n             *  Create and initialize a new Strophe.Request object.\n             *\n             *  Parameters:\n             *    (XMLElement) elem - The XML data to be sent in the request.\n             *    (Function) func - The function that will be called when the\n             *      XMLHttpRequest readyState changes.\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\n             *    (Integer) sends - The number of times this same request has been sent.\n             */\n\n            Strophe$1.Request = function (elem, func, rid, sends) {\n              this.id = ++Strophe$1._requestId;\n              this.xmlData = elem;\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\n              // from this one.\n\n              this.origFunc = func;\n              this.func = func;\n              this.rid = rid;\n              this.date = NaN;\n              this.sends = sends || 0;\n              this.abort = false;\n              this.dead = null;\n\n              this.age = function () {\n                if (!this.date) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.date) / 1000;\n              };\n\n              this.timeDead = function () {\n                if (!this.dead) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.dead) / 1000;\n              };\n\n              this.xhr = this._newXHR();\n            };\n\n            Strophe$1.Request.prototype = {\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n              getResponse: function getResponse() {\n                var node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe$1.error(\"invalid response received\");\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    var error = new Error();\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              },\n\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n              _newXHR: function _newXHR() {\n                var xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe$1.Bosh = function (connection) {\n              this._conn = connection;\n              /* request id for body tags */\n\n              this.rid = Math.floor(Math.random() * 4294967295);\n              /* The current session ID. */\n\n              this.sid = null; // default BOSH values\n\n              this.hold = 1;\n              this.wait = 60;\n              this.window = 5;\n              this.errors = 0;\n              this.inactivity = null;\n              this.lastResponseHeaders = null;\n              this._requests = [];\n            };\n\n            Strophe$1.Bosh.prototype = {\n              /** Variable: strip\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n               *\n               *  > Strophe.Bosh.prototype.strip = \"body\";\n               *\n               *  This will enable stripping of the body tag in both\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n               */\n              strip: null,\n\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n              _buildBody: function _buildBody() {\n                var bodyWrap = $build$1('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe$1.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n              _reset: function _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n              _connect: function _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                var body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                var _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\n              },\n\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _restore: function _restore(jid, callback, wait, hold, wind) {\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _cacheSession: function _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  var cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe$1.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                var wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                var hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                var wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                var inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                this._sendTerminate(pres);\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n              _doDisconnect: function _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return this._requests.length === 0;\n              },\n\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\n                var reqStatus = this._getRequestStatus(req);\n\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              },\n\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n              _hitError: function _hitError(reqStatus) {\n                this.errors++;\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                var body = this._buildBody();\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                this._abortAllRequests();\n              },\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  var req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  var body = this._buildBody();\n\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  var time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              },\n\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n              _getRequestStatus: function _getRequestStatus(req, def) {\n                var reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              },\n\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                var reqStatus = this._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                var valid_request = reqStatus > 0 && reqStatus < 500;\n                var too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  var reqIs0 = this._requests[0] === req;\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\n                }\n              },\n\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _processRequest: function _processRequest(i) {\n                var _this = this;\n\n                var req = this._requests[i];\n\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                var time_elapsed = req.age();\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  var sendFunc = function sendFunc() {\n                    req.date = new Date();\n\n                    if (_this._conn.options.customHeaders) {\n                      var headers = _this._conn.options.customHeaders;\n\n                      for (var header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              },\n\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n              _removeRequest: function _removeRequest(req) {\n                Strophe$1.debug(\"removing request\");\n\n                for (var i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _restartRequest: function _restartRequest(i) {\n                var req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              },\n\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n              _sendTerminate: function _sendTerminate(pres) {\n                Strophe$1.debug(\"_sendTerminate was called\");\n\n                var body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n              _send: function _send() {\n                var _this2 = this;\n\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(function () {\n                  return _this2._conn._onIdle();\n                }, 100);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              },\n\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n              _throttledRequestHandler: function _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$2 = core.Strophe;\n            var $build$2 = core.$build;\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            /** PrivateConstructor: Strophe.Websocket\n             *  Create and initialize a Strophe.WebSocket object.\n             *  Currently only sets the connection Object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n             *\n             *  Returns:\n             *    A new Strophe.WebSocket object.\n             */\n\n            Strophe$2.Websocket = function (connection) {\n              this._conn = connection;\n              this.strip = \"wrapper\";\n              var service = connection.service;\n\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                // If the service is not an absolute URL, assume it is a path and put the absolute\n                // URL together from options, current URL and the path.\n                var new_service = \"\";\n\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                  new_service += \"ws\";\n                } else {\n                  new_service += \"wss\";\n                }\n\n                new_service += \"://\" + window.location.host;\n\n                if (service.indexOf(\"/\") !== 0) {\n                  new_service += window.location.pathname + service;\n                } else {\n                  new_service += service;\n                }\n\n                connection.service = new_service;\n              }\n            };\n\n            Strophe$2.Websocket.prototype = {\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n              _buildStream: function _buildStream() {\n                return $build$2(\"open\", {\n                  \"xmlns\": Strophe$2.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              },\n\n              /** PrivateFunction: _check_streamerror\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\n                var errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                var error = errors[0];\n                var condition = \"\";\n                var text = \"\";\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (var i = 0; i < error.childNodes.length; i++) {\n                  var e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                var errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe$2.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n              _reset: function _reset() {\n                return;\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n              _connect: function _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket(); // Create the new WobSocket\n\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n                this.socket.onopen = this._onOpen.bind(this);\n                this.socket.onerror = this._onError.bind(this);\n                this.socket.onclose = this._onClose.bind(this);\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe$2.Status.CONNFAIL;\n                }\n              },\n\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n              _handleStreamStart: function _handleStreamStart(message) {\n                var error = false; // Check for errors in the <open /> tag\n\n                var ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe$2.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                var ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              },\n\n              /** PrivateFunction: _connect_cb_wrapper\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  var string = this._streamWrap(message.data);\n\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n                  this.socket.onmessage = this._onMessage.bind(this);\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  var close = $build$2(\"close\", {\n                    \"xmlns\": Strophe$2.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  var closeString = Strophe$2.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n              _doDisconnect: function _doDisconnect() {\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              },\n\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n              _streamWrap: function _streamWrap(stanza) {\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              },\n\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n              _closeSocket: function _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe$2.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return true;\n              },\n\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               *\n               * Nothing to do here for WebSockets\n               */\n              _onClose: function _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe$2.debug(\"Websocket closed\");\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {},\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n              _onError: function _onError(error) {\n                Strophe$2.error(\"Websocket error \" + error);\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      var stanza = void 0;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      var rawStanza = Strophe$2.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              },\n\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n              _onMessage: function _onMessage(message) {\n                var elem; // check for closing stream\n\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  var data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              },\n\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n              _onOpen: function _onOpen() {\n                Strophe$2.debug(\"Websocket open\");\n\n                var start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                var startString = Strophe$2.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(stanza) {\n                return stanza;\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n              _send: function _send() {\n                this._conn.flush();\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n            };\n\n            global$1.Strophe = core.Strophe;\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n\n            return core;\n\n}));\n","import { $iq, Strophe } from 'strophe.js';\n\nStrophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = $iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n","import { $build, Strophe } from 'strophe.js';\n\n/**\n* StropheJS - Stream Management XEP-0198\n*\n* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n* Note: Resumption is not supported in this current implementation.\n*\n* Reference: http://xmpp.org/extensions/xep-0198.html\n*\n* @class streamManagement\n*/\nStrophe.addConnectionPlugin('streamManagement', {\n\n\t/**\n\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t*/\n\tlogging: false,\n\n\t/**\n\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t* @default false\n\t* @public\n\t*/\n\tautoSendCountOnEveryIncomingStanza: false,\n\n\t/**\n\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t* number of stanzas sent. Set to 0 to disable.\n\t* @default 5\n\t* @public\n\t*/\n\trequestResponseInterval: 5,\n\n\t/**\n\t* @property {Pointer} _c: Strophe connection instance.\n\t* @private\n\t*/\n\t_c: null,\n\n\t/**\n\t* @property {String} _NS XMPP Namespace.\n\t* @private\n\t*/\n\t_NS: 'urn:xmpp:sm:3',\n\n\t/**\n\t* @property {Boolean} _isStreamManagementEnabled\n\t* @private\n\t*/\n\t_isStreamManagementEnabled: false,\n\n\t/**\n\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t* from the server.\n\t* @private\n\t*/\n\t_serverProcesssedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t* the server.\n\t* @private\n\t*/\n\t_clientProcessedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientSentStanzasCounter\n\t* @private\n\t*/\n\t_clientSentStanzasCounter: null,\n\n\t/**\n\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t* @method _originalXMLOutput\n\t* @type {Handler}\n\t* @private\n\t*/\n\t_originalXMLOutput: null,\n\n\t/**\n\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t* @private\n\t*/\n\t_requestHandler: null,\n\n\t/**\n\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t* @private\n\t*/\n\t_incomingHandler: null,\n\n\t/**\n\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t*/\n\t_requestResponseIntervalCount: 0,\n\n\t/**\n\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t * management namespace.\n\t */\n\t_isSupported: false,\n\n\t/**\n\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t*/\n\t_unacknowledgedStanzas: [],\n\n\t/**\n\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t* Provides the packet id of the stanza as a parameter.\n\t* @private\n\t*/\n\t_acknowledgedStanzaListeners: [],\n\n\taddAcknowledgedStanzaListener: function(listener) {\n\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t},\n\n\tenable: function(resume) {\n\t\tif (!this._isSupported) {\n\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t} else if (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('enable() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._c.send($build('enable', { xmlns: this._NS, resume }));\n\t\tthis._c.flush();\n\t\tthis._c.pause();\n\t},\n\n\tgetResumeToken: function() {\n\t\treturn this._resumeToken;\n\t},\n\n\tisSupported() {\n\t\treturn this._isSupported;\n\t},\n\n\tresume: function() {\n\t\tif (!this.getResumeToken()) {\n\t\t\tthrow new Error('No resume token');\n\t\t}\n\t\tif (this._connectionStatus !== Strophe.Status.DISCONNECTED) {\n\t\t\tthrow new Error('resume() can only be called in the DISCONNECTED state');\n\t\t}\n\n\t\tthis._c.options.explicitResourceBinding = true;\n\t\tthis._resuming = true;\n\n\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t},\n\n\trequestAcknowledgement: function() {\n\t\tif (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('requestAcknowledgement() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._requestResponseIntervalCount = 0;\n\t\tthis._c.send($build('r', { xmlns: this._NS }));\n\t},\n\n\tgetOutgoingCounter: function() {\n\t\treturn this._clientSentStanzasCounter;\n\t},\n\n\tgetIncomingCounter: function() {\n\t\treturn this._clientProcessedStanzasCounter;\n\t},\n\n\tinit: function(conn) {\n\t\tthis._c = conn;\n\t\tStrophe.addNamespace('SM', this._NS);\n\n\t\t// Storing original xmlOutput function to use additional logic\n\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\tthis._originalConnect = this._c.connect;\n\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\tthis._originalDisconnect = this._c.disconnect;\n\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t},\n\n\t_interceptDisconnect: function() {\n\t\tthis._resumeToken = undefined;\n\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptDoDisconnect: function() {\n\t\tif (this.getResumeToken()\n\t\t\t\t&& !this._resuming\n\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\tthis._resumeState = {\n\t\t\t\thandlers: this._c.handlers,\n\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t};\n\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\tthis.logging && Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t}\n\n\t\t// Remove any queued stanzas from the buffer that have failed to send while the socket was closed,\n\t\t// as they would interfere with the resume flow. They will be resent anyway.\n\t\tthis._c._data = [];\n\n\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptConnectArgs: function() {\n\t\tthis._connectArgs = arguments;\n\n\t\tthis._originalConnect.apply(this._c, arguments);\n\t},\n\n\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t},\n\n\tstatusChanged: function (status) {\n\t\tthis._connectionStatus = status;\n\t\tif (!this.getResumeToken()\n\t\t\t&& (status === Strophe.Status.CONNECTED || status === Strophe.Status.DISCONNECTED)) {\n\t\t\tthis.logging && Strophe.debug('SM reset state');\n\n\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t// FIXME not described in JSDocs\n\t\t\tthis._resuming = false;\n\n\t\t\tif (status === Strophe.Status.DISCONNECTED) {\n\t\t\t\tthis._isSupported = false;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\tif (this._requestHandler) {\n\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t}\n\n\t\t\tif (this._incomingHandler) {\n\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t}\n\n\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t// FIXME handler instances stored, but never used\n\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t} else if (status === Strophe.Status.BINDREQUIRED)  {\n\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t// Restore Strophe handlers\n\t\t\tfor (const property in this._resumeState) {\n\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t}\n\n\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\tthis._c.send($build('resume', {\n\t\t\t\txmlns: this._NS,\n\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\tprevid: this._resumeToken\n\t\t\t}));\n\t\t\tthis._c.flush();\n\t\t} else if (status === Strophe.Status.ERROR) {\n\t\t\tthis.logging && Strophe.debug('SM cleared resume token on error');\n\t\t\tthis._resumeToken = undefined;\n\t\t}\n\t},\n\n\t/**\n\t* This method overrides the send method implemented by Strophe.Connection\n\t* to count outgoing stanzas\n\t*\n\t* @method Send\n\t* @public\n\t*/\n\txmlOutput: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') ||\n\t\t\tStrophe.isTagEqual(elem, 'presence') ||\n\t\t\tStrophe.isTagEqual(elem, 'message')) {\n\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t}\n\n\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t},\n\n\t_handleEnabled: function(elem) {\n\t\tthis._isStreamManagementEnabled = true;\n\t\t// FIXME fail if requested, but not enabled\n\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\tthis._c.resume();\n\n\t\treturn true;\n\t},\n\n\t_handleResumeFailed: function(elem) {\n\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.ERROR, error, elem);\n\t\tthis._c._doDisconnect();\n\n\t\treturn true;\n\t},\n\n\t_handleResumed: function(elem) {\n\t\t// FIXME check if in the correct state\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\tthis._resuming = false;\n\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\tthis._c.authenticated = true;\n\t\tthis._c.restored = true;\n\n\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\tthis.logging && Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\tthis._c.send(stanza);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.logging && Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.CONNECTED, null);\n\n\t\treturn true;\n\t},\n\n\t_incomingStanzaHandler: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') || Strophe.isTagEqual(elem, 'presence') || Strophe.isTagEqual(elem, 'message'))  {\n\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\tif (delta < 0) {\n\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tfor(var i = 0; i < delta; i++) {\n\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t}\n\t\t}\n\n\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\tStrophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\tif (this.requestResponseInterval > 0) {\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t}\n\t},\n\n\t_handleServerRequestHandler: function() {\n\t\tthis._answerProcessedStanzas();\n\n\t\treturn true;\n\t},\n\n\t_handleServerAck: function(elem){\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\treturn true;\n\t},\n\n\t_answerProcessedStanzas: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._c.send($build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t}\n\t},\n\n\t_increaseSentStanzasCounter: function(elem) {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (this._connectionStatus === Strophe.Status.CONNECTED) {\n\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_increaseReceivedStanzasCounter: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t}\n\t},\n\n\t_throwError: function(msg) {\n\t\tStrophe.error(msg);\n\t\tthrow new Error(msg);\n\t}\n\n});\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset) {\n  const i = offset || 0;\n  const bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\n}\n\nvar _default = bytesToUuid;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function () {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function () {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function () {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function () {\n    return _v4.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  const output = [];\n  const length32 = input.length * 32;\n  const hexTab = '0123456789abcdef';\n\n  for (let i = 0; i < length32; i += 8) {\n    const x = input[i >> 5] >>> i % 32 & 0xff;\n    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  let a = 1732584193;\n  let b = -271733879;\n  let c = -1732584194;\n  let d = 271733878;\n\n  for (let i = 0; i < x.length; i += 16) {\n    const olda = a;\n    const oldb = b;\n    const oldc = c;\n    const oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  const length8 = input.length * 8;\n  const output = new Uint32Array(getOutputLength(length8));\n\n  for (let i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  const lsw = (x & 0xffff) + (y & 0xffff);\n  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nvar _default = md5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nconst getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  }\n\n  bytes.push(0x80);\n  const l = bytes.length / 4 + 2;\n  const N = Math.ceil(l / 16);\n  const M = new Array(N);\n\n  for (let i = 0; i < N; ++i) {\n    const arr = new Uint32Array(16);\n\n    for (let j = 0; j < 16; ++j) {\n      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n    }\n\n    M[i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (let i = 0; i < N; ++i) {\n    const W = new Uint32Array(80);\n\n    for (let t = 0; t < 16; ++t) {\n      W[t] = M[i][t];\n    }\n\n    for (let t = 16; t < 80; ++t) {\n      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n\n    for (let t = 0; t < 80; ++t) {\n      const s = Math.floor(t / 20);\n      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nvar _default = sha1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || [];\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _bytesToUuid.default)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.URL = exports.DNS = void 0;\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction uuidToBytes(uuid) {\n  // Note: We assume we're being passed a valid uuid string\n  const bytes = [];\n  uuid.replace(/[a-fA-F0-9]{2}/g, function (hex) {\n    bytes.push(parseInt(hex, 16));\n  });\n  return bytes;\n}\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction _default(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    const off = buf && offset || 0;\n    if (typeof value === 'string') value = stringToBytes(value);\n    if (typeof namespace === 'string') namespace = uuidToBytes(namespace);\n\n    if (!Array.isArray(value)) {\n      throw TypeError('value must be an array of bytes');\n    }\n\n    if (!Array.isArray(namespace) || namespace.length !== 16) {\n      throw TypeError('namespace must be uuid string or an Array of 16 byte values');\n    } // Per 4.3\n\n\n    const bytes = hashfunc(namespace.concat(value));\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      for (let idx = 0; idx < 16; ++idx) {\n        buf[off + idx] = bytes[idx];\n      }\n    }\n\n    return buf || (0, _bytesToUuid.default)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  if (typeof options === 'string') {\n    buf = options === 'binary' ? new Uint8Array(16) : null;\n    options = null;\n  }\n\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    const start = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[start + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _bytesToUuid.default)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","/**\n * Enumeration of the video types that are signaled to the bridge\n * @type {{CAMERA: string, DESKTOP: string, DESKTOP_HIGH_FPS: string, NONE: string}}\n */\nconst BridgeVideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The low fps desktop video type.\n     */\n    DESKTOP: 'desktop',\n\n    /**\n     * The high fps desktop video type.\n     */\n    DESKTOP_HIGH_FPS: 'desktop_high_fps',\n\n    /**\n     * Video type when no local source is present.\n     */\n    NONE: 'none'\n};\n\nmodule.exports = BridgeVideoType;\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","/**\n * Enumeration of the codec mime types\n * @type {{H264: string, OPUS: string, ULPFEC: string, VP8: string, VP9: string}}\n */\nconst CodecMimeType = {\n    /**\n     * AV1 codec mime type.\n     */\n    AV1: 'av1',\n\n    /**\n     * The h264 codec mime type.\n     */\n    H264: 'h264',\n\n    /**\n     * The opus codec mime type.\n     */\n    OPUS: 'opus',\n\n    /**\n     * The ulpfec codec mime type.\n     */\n    ULPFEC: 'ulpfec',\n\n    /**\n     * The vp8 codec mime type.\n     */\n    VP8: 'vp8',\n\n    /**\n     * The vp9 codec mime type.\n     */\n    VP9: 'vp9'\n\n};\n\nmodule.exports = CodecMimeType;\n","export enum RTCEvents {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED = 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED = 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN = 'rtc.data_channel_open',\n    ENDPOINT_CONN_STATUS_CHANGED = 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED = 'rtc.dominant_speaker_changed',\n    LASTN_ENDPOINT_CHANGED = 'rtc.lastn_endpoint_changed',\n    FORWARDED_SOURCES_CHANGED = 'rtc.forwarded_sources_changed',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED = 'rtc.permissions_changed',\n\n    SENDER_VIDEO_CONSTRAINTS_CHANGED = 'rtc.sender_video_constraints_changed',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED = 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED = 'rtc.local_track_ssrc_updated',\n\n    /**\n     * The max enabled resolution of a local video track was changed.\n     */\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED = 'rtc.local_track_max_enabled_resolution_changed',\n\n    TRACK_ATTACHED = 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED = 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE = 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED = 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE = 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED = 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED = 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED = 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED = 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE = 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE = 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED = 'rtc.endpoint_message_received',\n\n    /**\n     * Indicates that the remote endpoint stats have been received on data channel.\n     */\n    ENDPOINT_STATS_RECEIVED = 'rtc.endpoint_stats_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED = 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED = 'rtc.remote_ufrag_changed'\n};\n\nexport const CREATE_ANSWER_FAILED = RTCEvents.CREATE_ANSWER_FAILED;\nexport const CREATE_OFFER_FAILED = RTCEvents.CREATE_OFFER_FAILED;\nexport const DATA_CHANNEL_OPEN = RTCEvents.DATA_CHANNEL_OPEN;\nexport const ENDPOINT_CONN_STATUS_CHANGED = RTCEvents.ENDPOINT_CONN_STATUS_CHANGED;\nexport const DOMINANT_SPEAKER_CHANGED = RTCEvents.DOMINANT_SPEAKER_CHANGED;\nexport const LASTN_ENDPOINT_CHANGED = RTCEvents.LASTN_ENDPOINT_CHANGED;\nexport const FORWARDED_SOURCES_CHANGED = RTCEvents.FORWARDED_SOURCES_CHANGED;\nexport const PERMISSIONS_CHANGED = RTCEvents.PERMISSIONS_CHANGED;\nexport const SENDER_VIDEO_CONSTRAINTS_CHANGED = RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED;\nexport const LASTN_VALUE_CHANGED = RTCEvents.LASTN_VALUE_CHANGED;\nexport const LOCAL_TRACK_SSRC_UPDATED = RTCEvents.LOCAL_TRACK_SSRC_UPDATED;\nexport const LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED = RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED;\nexport const TRACK_ATTACHED = RTCEvents.TRACK_ATTACHED;\nexport const REMOTE_TRACK_ADDED = RTCEvents.REMOTE_TRACK_ADDED;\nexport const REMOTE_TRACK_MUTE = RTCEvents.REMOTE_TRACK_MUTE;\nexport const REMOTE_TRACK_REMOVED = RTCEvents.REMOTE_TRACK_REMOVED;\nexport const REMOTE_TRACK_UNMUTE = RTCEvents.REMOTE_TRACK_UNMUTE;\nexport const SET_LOCAL_DESCRIPTION_FAILED = RTCEvents.SET_LOCAL_DESCRIPTION_FAILED;\nexport const SET_REMOTE_DESCRIPTION_FAILED = RTCEvents.SET_REMOTE_DESCRIPTION_FAILED;\nexport const AUDIO_OUTPUT_DEVICE_CHANGED = RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED;\nexport const DEVICE_LIST_CHANGED = RTCEvents.DEVICE_LIST_CHANGED;\nexport const DEVICE_LIST_WILL_CHANGE = RTCEvents.DEVICE_LIST_WILL_CHANGE;\nexport const DEVICE_LIST_AVAILABLE = RTCEvents.DEVICE_LIST_AVAILABLE;\nexport const ENDPOINT_MESSAGE_RECEIVED = RTCEvents.ENDPOINT_MESSAGE_RECEIVED;\nexport const ENDPOINT_STATS_RECEIVED = RTCEvents.ENDPOINT_STATS_RECEIVED;\nexport const LOCAL_UFRAG_CHANGED = RTCEvents.LOCAL_UFRAG_CHANGED;\nexport const REMOTE_UFRAG_CHANGED = RTCEvents.REMOTE_UFRAG_CHANGED;\n\n// TODO: this was a pre-ES6 module using module.exports = RTCEvents which doesn't translate well\n// it is used in a number of places and should be updated to use the named export\n\nexport default RTCEvents;","const Resolutions = {\n    '2160': {\n        width: 3840,\n        height: 2160\n    },\n    '4k': {\n        width: 3840,\n        height: 2160\n    },\n    '1080': {\n        width: 1920,\n        height: 1080\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080\n    },\n    '720': {\n        width: 1280,\n        height: 720\n    },\n    'hd': {\n        width: 1280,\n        height: 720\n    },\n    '540': {\n        width: 960,\n        height: 540\n    },\n    'qhd': {\n        width: 960,\n        height: 540\n    },\n    '480': {\n        width: 640,\n        height: 480\n    },\n    'vga': {\n        width: 640,\n        height: 480\n    },\n    '360': {\n        width: 640,\n        height: 360\n    },\n    '240': {\n        width: 320,\n        height: 240\n    },\n    '180': {\n        width: 320,\n        height: 180\n    }\n};\n\nmodule.exports = Resolutions;\n","/**\n * Enumeration of the video types\n */\nexport enum VideoType {\n    /**\n     * The camera video type.\n     */\n    CAMERA = 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP = 'desktop'\n};\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","export const LOCAL_JID = 'local'\n","export enum XMPPEvents {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED = 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS = 'xmpp.audio_muted_by_focus',\n\n    // Designates an event indicating that the focus has asked us to disable our\n    // camera.\n    VIDEO_MUTED_BY_FOCUS = 'xmpp.video_muted_by_focus',\n    AUTHENTICATION_REQUIRED = 'xmpp.authentication_required',\n    BRIDGE_DOWN = 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED = 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING = 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED = 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED = 'xmpp.chat_error_received',\n    SETTINGS_ERROR_RECEIVED = 'xmpp.settings_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED = 'xmpp.conference_properties_changed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED = 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED = 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED = 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED = 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED = 'xmpp.connection.ice.failed',\n\n    // Designates an event indicating that the call has been migrated to a different\n    // bridge and that the client needs to be restarted for a successful transition.\n    CONNECTION_RESTARTED = 'xmpp.connection.restart',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED = 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED = 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED = 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED = 'xmpp.emuc_room_removed',\n    ETHERPAD = 'xmpp.etherpad',\n    FOCUS_DISCONNECTED = 'xmpp.focus_disconnected',\n    FOCUS_LEFT = 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN = 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING = 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS = 'rtc.ice_restart_success',\n\n    /**\n     * Designates an event indicating that we were kicked from the XMPP MUC.\n     * @param {boolean} isSelfPresence - whether it is for local participant\n     * or another participant.\n     * @param {string} actorJid - the jid of the participant who was initiator\n     * of the kick.\n     * @param {?string} participantJid - when it is not a kick for local participant,\n     * this is the jid of the participant which was kicked.\n     */\n    KICKED = 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED = 'xmpp.localrole_changed',\n\n    /**\n     * Event fired when the unique meeting id is set.\n     */\n    MEETING_ID_SET = 'xmpp.meeting_id_set',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED = 'xmpp.message_received',\n\n    // Designates an event indicating that an invite XMPP message in the MUC was\n    // received.\n    INVITE_MESSAGE_RECEIVED = 'xmpp.invite_message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED = 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED = 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED = 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we are currently in process of joining the XMPP MUC.\n    MUC_JOIN_IN_PROGRESS = 'xmpp.muc_join_in_progress',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED = 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED = 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT = 'xmpp.muc_member_left',\n\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\n    MUC_LOBBY_MEMBER_JOINED = 'xmpp.muc_lobby_member_joined',\n\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\n    MUC_LOBBY_MEMBER_UPDATED = 'xmpp.muc_lobby_member_updated',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_LOBBY_MEMBER_LEFT = 'xmpp.muc_lobby_member_left',\n\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\n    MUC_DENIED_ACCESS = 'xmpp.muc_denied access',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT = 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED = 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED = 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that the MUC members only config has changed.\n    MUC_MEMBERS_ONLY_CHANGED = 'xmpp.muc_members_only_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED = 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED = 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note = currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED = 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTICIPANT_FEATURES_CHANGED = 'xmpp.participant_features_changed',\n    PASSWORD_REQUIRED = 'xmpp.password_required',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED = 'xmpp.presence_received',\n    PRESENCE_STATUS = 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN = 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN = 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED = 'xmpp.recorderStateChanged',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS = 'xmpp.remote_stats',\n\n    /**\n     * Indicates that the offer / answer renegotiation has failed.\n     */\n    RENEGOTIATION_FAILED = 'xmpp.renegotiation_failed',\n    RESERVATION_ERROR = 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR = 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR = 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR = 'xmpp.room_join_error',\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR = 'xmpp.room_connect_error.members_only',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR = 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE = 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE = 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired after receiving the confirmation about session accept.\n     */\n    SESSION_ACCEPT = 'xmpp.session_accept',\n\n    /**\n     * Event fired if we receive an error after sending the session accept.\n     */\n    SESSION_ACCEPT_ERROR = 'xmpp.session_accept_error',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT = 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired after successful sending of jingle source-add.\n     */\n    SOURCE_ADD = 'xmpp.source_add',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-add.\n     */\n    SOURCE_ADD_ERROR = 'xmpp.source_add_error',\n\n    /**\n     * Event fired after successful sending of jingle source-remove.\n     */\n    SOURCE_REMOVE = 'xmpp.source_remove',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-remove.\n     */\n    SOURCE_REMOVE_ERROR = 'xmpp.source_remove_error',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED = 'xmpp.speaker_stats_received',\n\n    /**\n     * Event fired when conference creation timestamp is received.\n     */\n    CONFERENCE_TIMESTAMP_RECEIVED = 'xmpp.conference_timestamp_received',\n\n    /**\n     * Event fired when we receive a message for AV moderation approved for the local participant.\n     */\n    AV_MODERATION_APPROVED = 'xmpp.av_moderation.approved',\n\n    /**\n    * Event fired when we receive a message for AV moderation rejected for the local participant.\n    */\n    AV_MODERATION_REJECTED = 'xmpp.av_moderation.rejected',\n\n    /**\n     * Event fired when we receive a message for AV moderation.\n     */\n    AV_MODERATION_RECEIVED = 'xmpp.av_moderation.received',\n\n    /**\n     * Event fired when the moderation enable/disable changes.\n     */\n    AV_MODERATION_CHANGED = 'xmpp.av_moderation.changed',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED = 'xmpp.av_moderation.participant.approved',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED = 'xmpp.av_moderation.participant.rejected',\n\n    /**\n     * Event fired when a participant is requested to join a given (breakout) room.\n     */\n    BREAKOUT_ROOMS_MOVE_TO_ROOM = 'xmpp.breakout-rooms.move-to-room',\n\n    /**\n     * Event fired when we receive a message for breakout rooms.\n     */\n    BREAKOUT_ROOMS_EVENT = 'xmpp.breakout-rooms.event',\n\n    /**\n     * Event fired when the breakout rooms data was updated.\n     */\n    BREAKOUT_ROOMS_UPDATED = 'xmpp.breakout-rooms.updated',\n\n    /**\n     * Event fired when we receive a message related to room metadata.\n     */\n    ROOM_METADATA_EVENT = 'xmpp.room-metadata.event',\n\n    /**\n     * Event fired when we receive a message related to room metadata.\n     */\n    ROOM_METADATA_UPDATED = 'xmpp.room-metadata.updated',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS = 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED = 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED = 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED = 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO = 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWStatusConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED = 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWStateConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED = 'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED = 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     * TODO: this event contains a typo (xmmp vs xmpp) but it's unlikely this can be changed now\n     */\n    JSON_MESSAGE_RECEIVED = 'xmmp.json_message_received'\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.amdO = {};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(4449);\n"],"names":["root","factory","exports","module","define","amd","self","JitsiConferenceErrors","AUTHENTICATION_REQUIRED","CHAT_ERROR","SETTINGS_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","CONFERENCE_RESTARTED","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","PASSWORD_REQUIRED","RESERVATION_ERROR","VIDEOBRIDGE_NOT_AVAILABLE","JitsiConferenceEvents","AUDIO_INPUT_STATE_CHANGE","AUDIO_UNMUTE_PERMISSIONS_CHANGED","AUTH_STATUS_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOIN_IN_PROGRESS","CONFERENCE_JOINED","CONFERENCE_LEFT","CONFERENCE_UNIQUE_ID_SET","CONNECTION_ESTABLISHED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","DATA_CHANNEL_OPENED","DISPLAY_NAME_CHANGED","DOMINANT_SPEAKER_CHANGED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","ENDPOINT_MESSAGE_RECEIVED","ENDPOINT_STATS_RECEIVED","JVB121_STATUS","KICKED","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","FORWARDED_SOURCES_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","MESSAGE_RECEIVED","NO_AUDIO_INPUT","NOISY_MIC","NON_PARTICIPANT_MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","PARTICIPANT_CONN_STATUS_CHANGED","PARTCIPANT_FEATURES_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PHONE_NUMBER_CHANGED","PROPERTIES_CHANGED","RECORDER_STATE_CHANGED","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","SUBJECT_CHANGED","SUSPEND_DETECTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","TRACK_UNMUTE_REJECTED","TRANSCRIPTION_STATUS_CHANGED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","VIDEO_UNMUTE_PERMISSIONS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","AV_MODERATION_APPROVED","AV_MODERATION_REJECTED","AV_MODERATION_CHANGED","AV_MODERATION_PARTICIPANT_APPROVED","AV_MODERATION_PARTICIPANT_REJECTED","FACE_LANDMARK_ADDED","BREAKOUT_ROOMS_MOVE_TO_ROOM","BREAKOUT_ROOMS_UPDATED","METADATA_UPDATED","CALLSTATS_SCRIPT_URL","JitsiTrackErrors","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TIMEOUT","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","TRACK_ERROR_TO_MESSAGE_MAP","JitsiTrackError","error","options","devices","name","this","gum","constraints","Array","isArray","slice","undefined","message","join","constraintName","constraint","video","indexOf","failedConstraintName","mandatory","minWidth","minHeight","getResolutionFromFailedConstraint","Error","stack","prototype","Object","create","constructor","JitsiTrackEvents","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","TRACK_STREAMING_STATUS_CHANGED","AnalyticsEvents","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_DECLINED","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","FEEDBACK","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","NO_BYTES_SENT","TRACK_UNMUTED","createConferenceEvent","action","attributes","source","type","createConnectionStageReachedEvent","stage","actionSubject","createGetUserMediaEvent","createJingleEvent","createP2PEvent","createRemotelyMutedEvent","mediaType","createRtpStatsEvent","Events","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","LONG_TASKS_STATS","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","_detectElectron","userAgent","navigator","match","version","window","JitsiMeetElectron","_detectNWJS","_detectReactNative","product","length","DummyLocalStorage","EventEmitter","clear","_storage","keys","getItem","keyName","setItem","keyValue","removeItem","key","n","serialize","JSON","stringify","jitsiLocalStorage","super","localStorage","_localStorageDisabled","ignore","console","warn","isLocalStorageDisabled","emit","dontEmitChangedEvent","i","localStorageContent","logger","getLogger","browserInfo","_bowser","Bowser","detectedBrowserInfo","bowser","detectors","getBrowserName","getBrowserVersion","Number","parseInt","_detectChromiumBased","_detect","_name","_version","getName","isChrome","isOpera","isFirefox","isIExplorer","isSafari","isNWJS","isElectron","isReactNative","getVersion","_checkCondition","checkTree","satisfies","isVersionGreaterThan","isVersionLessThan","isVersionEqualTo","info","doesVideoMuteByStreamRemove","isChromiumBased","isWebKitBased","isIosBrowser","maxTouchPoints","platform","Boolean","test","isEngine","mediaDevices","getUserMedia","RTCRtpTransceiver","isTwa","matchMedia","matches","isSupported","_getSafariVersion","_getChromiumBasedVersion","isSupportedAndroidBrowser","isSupportedIOSBrowser","_getIOSVersion","isUserInteractionRequiredForUnmute","supportsVideoMuteOnConnInterrupted","supportsBandwidthStatistics","supportsCodecPreferences","RTCRtpReceiver","getCapabilities","supportsDeviceChangeEvent","ondevicechange","addEventListener","supportsPerformanceObserver","PerformanceObserver","supportedEntryTypes","supportsReceiverStats","supportsRTTStatistics","supportsVP9","usesSdpMungingForSimulcast","usesRidsForSimulcast","supportsGetDisplayMedia","getDisplayMedia","supportsEncodedTransform","RTCRtpScriptTransform","supportsInsertableStreams","RTCRtpSender","createEncodedStreams","stream","ReadableStream","postMessage","supportsAudioRed","codecs","some","codec","mimeType","supportsUnifiedPlan","supportsVADDetection","supportsRTX","process","versions","chromium","ua","reset","disposed","analyticsHandlers","Set","cache","permanentProperties","conferenceName","addPermanentProperties","browser","dispose","size","forEach","handler","setAnalyticsHandlers","handlers","_setUserProperties","event","_sendEvent","setUserProperties","properties","setConferenceName","sendEvent","eventName","_verifyRequiredFields","objectType","containerType","containerId","objectId","_maybeCacheEvent","push","splice","e","require","wrtcFuncNames","reportType","_fabrics","CallStats","msg","backend","log","backendInitialized","atLeastOneFabric","defaultInstance","callStatsInstance","fabrics","values","hasFabric","debug","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","confID","defaultPC","peerconnection","report","reportsQueue","errorData","data","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","ssrc","usageLabel","cs","_error","reportError","theBackend","tryCatchMethods","methodName","originalMethod","theArguments","apply","GlobalOnErrorHandler","debugMethods","originalReportError","args","call","exception","CallStatsBackend","callstats","_traceAndCatchBackendCalls","userID","aliasName","userName","callStatsID","callStatsSecret","configParams","applicationName","applicationVersion","siteID","initialize","_initCallback","getWiFiStatsMethod","attachWifiStatsHandler","then","result","parse","addresses","catch","devicesData","_reportEvent","conferenceID","overall","comment","Promise","resolve","reject","sendUserFeedback","status","reason","mute","tpc","remoteUserID","add","fabricAttributes","remoteEndpointType","isP2P","endpointType","peer","server","ret","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","associateStreamWithVideoTag","isLocal","streamEndpointId","sendDominantSpeakerEvent","sendTerminateEvent","fabricEvent","fabricTerminated","delete","sendIceConnectionFailedEvent","sendCreateOfferFailed","sendCreateAnswerFailed","sendResumeOrHoldEvent","isResume","sendScreenSharingEvent","start","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","AudioContext","webkitAudioContext","context","LocalStatsCollector","interval","callback","intervalId","intervalMilis","audioLevel","analyser","safeCounterIncrement","number","nextValue","MAX_SAFE_INTEGER","calculateAverage","valueArray","reduce","a","b","filterPositiveValues","filter","value","isLocalStatsSupported","resume","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","connect","setInterval","array","Uint8Array","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","diff","animateLevel","stop","clearInterval","disconnect","disconnectAudioContext","async","close","connectAudioContext","suspend","RunningAverage","average","addNext","getAverage","PerformanceObserverStats","emitter","statsInterval","eventEmitter","longTasks","maxDuration","performanceStatsInterval","stats","getLongTasksStats","avgRatePerMinute","maxDurationMs","startObserver","longTaskEventHandler","list","entries","getEntries","task","Math","max","duration","observer","observe","buffered","startTime","Date","now","longTasksIntervalId","_lastTimeStamp","rate","StatisticsEvents","stopObserver","MediaType","init","flags","_receiveMultipleVideoStreams","receiveMultipleVideoStreams","_runInLiteMode","runInLiteMode","_sendMultipleVideoStreams","sendMultipleVideoStreams","_sourceNameSignaling","sourceNameSignaling","_ssrcRewriting","ssrcRewritingEnabled","_usesUnifiedPlan","enableUnifiedOnChrome","isMultiStreamSupportEnabled","isReceiveMultipleVideoStreamsSupported","isRunInLiteModeEnabled","isSourceNameSignalingEnabled","isSsrcRewritingSupported","calculatePacketLoss","lostPackets","totalPackets","round","SsrcStats","loss","bitrate","download","upload","resolution","framerate","ConferenceStats","bandwidth","packetLoss","transport","StatsCollector","audioLevelsInterval","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","speakerList","statsIntervalId","statsIntervalMilis","ssrc2stats","Map","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","setSpeakerList","errorCallback","callErrorHandler","startAudioLevelStats","audioLevels","getAudioLevels","hasOwnProperty","getStats","processAudioLevelReport","processStats","processStatsReport","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioCodec","videoCodec","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","ssrcStats","isDownloadStream","packetsTotal","packetsLost","track","getTrackBySSRC","isAudioTrack","FeatureFlags","sourceName","getSourceName","width","height","codecDesc","participantId","getParticipantId","userResolutions","userFramerates","userCodecs","audio","total","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","v","isNaN","_calculateBitrate","before","fieldName","bytesNow","bytesBefore","bytesProcessed","timeMs","timestamp","bitrateKbps","byteSentStats","nominated","state","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","get","remoteCandidateId","localUsedCandidate","localCandidateId","ip","address","port","localip","protocol","conferenceStatsTransport","t","p2p","localCandidateType","candidateType","remoteCandidateType","networkType","rtt","currentRoundTripTime","id","set","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","frameHeight","frameWidth","frameRate","framesPerSecond","bytesSent","codecId","codecShortType","split","kind","VIDEO","remoteSource","localVideoTracks","getLocalTracks","getSsrcByTrackId","trackIdentifier","framesSent","numberOfActiveStreams","getActiveSimulcastStreams","getLocalSSRC","AUDIO","_instances","isCallstatsLoaded","_initCallStatsBackend","isBackendInitialized","initBackend","Statistics","xmpp","rtpStatsMap","callStatsIntegrationEnabled","enableCallStats","disableThirdPartyRequests","callStatsApplicationLogsDisabled","ScriptUtil","customScriptUrl","loadCallStatsAPI","callsStatsInstances","instances","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","longTasksStatsInterval","analytics","defineProperty","startRemoteStats","stopRemoteStats","rtpStats","RTPStats","localStats","startLocalStats","localStat","LocalStats","stopLocalStats","getOriginalStream","addAudioLevelListener","listener","on","removeAudioLevelListener","removeListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","addLongTasksStatsListener","attachLongTasksStats","conference","performanceObserverStats","removeLongTasksStatsListener","from","callStats","stopCallStats","tpcId","_stopRemoteStats","removeAllListeners","startCallStats","has","endsWith","roomName","lastIndexOf","newInstance","_getAllCallStatsInstances","csInstances","statistics","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","instance","sendMuteEvent","muted","roomJid","silence","sendActiveDeviceListEvent","globalSet","userId","sendGetUserMediaFailed","err","formatJitsiTrackErrorForCallStats","sendLog","m","globalSubSet","next","csPerStats","sendApplicationLog","sendFeedback","rating","LOCAL_JID","reportGlobalError","sendAnalyticsAndLog","eventToLog","sendAnalytics","JitsiConferenceEventManager","xmppListeners","session","p2pJingleSession","jvbJingleSession","isMuted","getType","setupChatRoomListeners","chatRoom","room","chatRoomForwarder","EventEmitterForwarder","addListener","XMPPEvents","jingleSession","rtc","closeBridgeChannel","features","participant","getParticipantById","Strophe","setFeatures","offerIq","_setBridgeChannel","actor","mutedByFocusActor","setAudioMute","isMutedByFocus","mutedVideoByFocusActor","setVideoMute","isVideoMutedByFocus","forward","_onMucJoined","isJvbConnectionInterrupted","connectionTimes","leave","_onConferenceRestarted","_onIceConnectionFailed","jid","resource","getStatus","setTerminator","setInitiator","setParticipantPropertyListener","node","setProperty","tagName","substring","onMemberKicked","bind","onSuspendDetected","onMemberJoined","_onMemberBotTypeChanged","onMemberLeft","onDisplayNameChanged","role","onLocalRoleChanged","isModerator","recorderSession","logObject","getError","onUserRoleChanged","AuthenticationEvents","authEnabled","authIdentity","txt","myJid","ts","_status","payload","addPresenceListener","myUserId","startAudioMuted","startVideoMuted","updated","startMutedPolicy","setupRTCListeners","RTCEvents","onRemoteTrackAdded","onRemoteTrackRemoved","dominant","previous","lastDominantSpeaker","dominantSpeakerIsSilent","roomjid","performance","ufrag","isVideoTrack","videoType","VideoType","removeXMPPListeners","setupXMPPListeners","_addConferenceXMPPListener","onIncomingCall","onCallAccepted","onTransportInfo","onCallEnded","audioMuted","videoMuted","config","ignoreStartMuted","createdTimestamp","actorJid","actorParticipant","getParticipants","find","p","getJid","enabled","setupStatisticsListeners","level","setAudioLevel","startSilent","onByteSentStatsReceived","ParticipantConnectionStatus","ACTIVE","INACTIVE","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","isConnectionActiveByJvb","isInLastN","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","trackTimers","connStatusFromJvb","outOfLastNTimeout","p2pRtcMuteTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","_getVideoFrozenTimeout","isP2PActive","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","_onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNChanged","_onLastNValueChanged","off","participantIds","clearTimeout","clearRtcMutedTimestamp","endpointId","isActive","figureOutConnectionStatus","_changeConnectionStatus","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","timeout","participants","inP2PMode","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","videoTracks","getTracksByMediaType","participantConnectionStatus","createParticipantConnectionStatusEvent","leavingLastN","enteringLastN","rTimer","setTimeout","JitsiParticipant","displayName","hidden","statsID","identity","isReplacing","isReplaced","_jid","_id","_conference","_displayName","_supportsDTMF","_tracks","_role","_hidden","_statsID","_connectionStatus","_properties","_identity","_isReplacing","_isReplaced","_features","getConference","getProperty","getTracks","jitsiTrack","isWebRTCTrackMuted","oldValue","getDisplayName","getStatsID","isHidden","isHiddenFromRecorder","user","isAudioMuted","_isMediaTypeMuted","getRole","setRole","newRole","setIsReplacing","newIsReplacing","setIsReplaced","newIsReplaced","supportsDTMF","getFeatures","hasFeature","feature","newFeatures","getBotType","_botType","setBotType","newBotType","getConnectionJid","_connectionJid","setConnectionJid","newJid","JitsiConnectionEvents","CONNECTION_FAILED","WRONG_STATE","DISPLAY_NAME_REQUIRED","JitsiConnectionErrors","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","Deferred","promise","clearRejectTimeout","_timeout","setRejectTimeout","ms","Listenable","removeEventListener","kJitsiE2EE","Symbol","E2EEcontext","sharedKey","baseUrl","ljm","document","querySelector","idx","src","workerUrl","workerBlob","Blob","URL","createObjectURL","_worker","Worker","onerror","operation","cleanup","cleanupAll","handleReceiver","receiver","transform","receiverStreams","readableStream","readable","writableStream","writable","handleSender","sender","senderStreams","setKey","keyIndex","KeyHandler","e2eeCtx","E2EEContext","_enabling","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_trackMuteChanged","isEnabled","_setEnabled","setLocalParticipantProperty","_restartMediaSessions","setEncryptionKey","getMediaSessions","_setupSenderE2EEForTrack","localTracks","findReceiverForTrack","findSenderForTrack","ExternallyManagedKeyHandler","keyInfo","encryptionKey","index","v4","REQ_TIMEOUT","OLM_MESSAGE_TYPE","OLM_MESSAGE_TYPES","kOlmData","OlmAdapterEvents","OLM_ID_KEY_READY","PARTICIPANT_E2EE_CHANNEL_READY","PARTICIPANT_KEY_UPDATED","OlmAdapter","_conf","_init","_key","_keyIndex","_reqs","_sessionInitialization","_bootstrapOlm","_onEndpointMessageReceived","_onConferenceLeft","_onParticipantLeft","_onParticipantPropertyChanged","promises","localParticipantId","FEATURE_E2EE","_sendSessionInit","allSettled","Olm","pId","olmData","_getParticipantOlmData","uuid","uuidv4","JITSI_MEET_MUC_TYPE","olm","ciphertext","_encryptKeyInfo","d","_sendMessage","updateCurrentKey","clearParticipantSession","free","clearAllParticipantsSessions","_olmAccount","Account","idKeys","identity_keys","_idKey","curve25519","get_library_version","_onIdKeyReady","idKey","_onParticipantE2EEChannelReady","base64js","encrypt","_sendError","Session","create_outbound","otKey","ack","pendingSessionUuid","create_inbound","body","remove_one_time_keys","decrypt","json","safeJsonParse","lastKey","isEqual","newValue","isE2EEEnabled","sendMessage","generate_one_time_keys","otKeys","one_time_keys","mark_keys_as_published","events","ManagedKeyHandler","_conferenceJoined","_olmAdapter","_rotateKey","debounce","_rotateKeyImpl","_ratchetKey","_ratchetKeyImpl","_onParticipantKeyUpdated","_onParticipantJoined","initSessions","_generateKey","updateKey","material","keyBytes","crypto","subtle","importKey","newKey","textEncoder","TextEncoder","deriveBits","salt","encode","hash","ArrayBuffer","ratchet","getRandomValues","E2EEncryption","e2ee","_externallyManaged","externallyManagedKey","_keyHandler","testing","disableE2EE","enableEncodedTransformSupport","setEnabled","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","compareIdentities","res","parseDiscoInfo","identities","$","each","_","el","getAttribute","category","Caps","connection","disco","rooms","externalFeatures","emuc","_addChatRoom","_removeChatRoom","addFeature","submit","external","_generateVersion","_updateRoomWithExternalFeatures","removeFeature","sendPresence","removeFromPresence","children","f","addOrReplaceInPresence","getFeaturesAndIdentities","_getDiscoInfo","response","_fixChatRoomPresenceMap","xmlns","ver","_notifyVersionChanged","sortedIdentities","sort","accumulatedValue","tmp","sortedFeatures","b64_sha1","generateSha","_identities","NETWORK_INFO_EVENT","_current","isOnline","updateNetworkInfo","ResumeTask","stropheConnection","_stropheConn","_resumeRetryN","_retryDelay","retryDelay","schedule","_cancelResume","_networkOnlineListener","NetworkInfo","_scheduleResume","_resumeTimeout","min","retry","minDelay","base","floor","random","pow","getJitterDelay","_resumeConnection","streamManagement","resumeToken","getResumeToken","url","service","search","pattern","oldToken","replace","toString","cancel","LastRequestTracker","_lastSuccess","_lastFailedMessage","startTracking","xmppConnection","originalRawInput","rawInput","rawMessage","includes","connected","getLastFailedMessage","getTimeSinceLastSuccess","getConnectionPluginDefinition","ConnectionPluginListenable","PingConnectionPlugin","ConnectionPlugin","getTimeSinceLastServerResponse","onPingThresholdExceeded","pingOptions","failedPings","_onPingThresholdExceeded","_getTimeSinceLastServerResponse","pingInterval","pingTimeout","pingThreshold","threshold","pingTimestampsToKeep","pingExecIntervals","ping","_addPingExecutionTimestamp","iq","$iq","to","c","sendIQ2","startInterval","remoteJid","_lastServerCheck","errmsg","stopInterval","getTime","shift","getPingSuspendTime","pingIntervals","maxInterval","previousTS","currentInterval","XmppConnection","CONN_STATUS_CHANGED","CONN_SHARD_CHANGED","Status","enableWebsocketResume","websocketKeepAlive","websocketKeepAliveUrl","serviceUrl","shard","xmppPing","_options","_usesWebsocket","startsWith","maxRetries","_rawInputTracker","LastSuccessTracker","_resumeTask","_deferredIQs","addConnectionPlugin","_onPingErrorThresholdExceeded","_oneSuccessfulConnect","websocket","_proto","socket","isUsingWebSocket","readyState","WebSocket","OPEN","disconnecting","domain","lastResponseHeaders","pingDomain","_maybeStartWSKeepAlive","plugin","addHandler","attach","sid","rid","_stropheConnectionCb","pass","targetCallback","blockCallback","_maybeEnableStreamResume","_keepAliveAndCheckShard","_processDeferredIQs","_tryResumingConnection","_wsKeepAlive","_clearDeferredIQs","deferred","closeWebsocket","_closeSocket","_onClose","flush","enable","intervalWithJitter","fetch","responseShard","headers","timeLeft","sendIQ","send","stanza","elem","errback","sendUnavailableBeacon","sendBeacon","_changeConnectStatus","_buildBody","attrs","pres","$pres","cnode","tree","_abortAllRequests","_doDisconnect","JitsiTranscriptionStatus","ON","OFF","AVModeration","_xmpp","_mainRoom","_moderationEnabledByType","_whitelistAudio","_whitelistVideo","_onMessage","avModerationComponentAddress","$msg","up","approve","jidToWhitelist","jidToBlacklist","obj","removed","media","approved","whitelists","newWhitelists","oldList","newList","x","FEATURE_KEY","BREAKOUT_ROOM_ACTIONS","ADD","REMOVE","MOVE_TO_ROOM","BREAKOUT_ROOM_EVENTS","BreakoutRooms","_handleMessages","_rooms","createBreakoutRoom","subject","removeBreakoutRoom","breakoutRoomJid","sendParticipantToRoom","participantJid","getComponentAddress","breakoutRoomsComponentAddress","_setIsBreakoutRoom","isBreakoutRoom","_isBreakoutRoom","myroomjid","_setMainRoomJid","_mainRoomJid","getMainRoomJid","EMAIL_COMMAND","Lobby","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoomJid","lobbySupported","setMembersOnly","disable","lobbyRoom","membersOnlyEnabled","sendPrivateMessage","getLocalId","addMessageListener","removeMessageHandler","setLobbyRoomJid","joined","email","customDomain","createRoom","disableDiscoInfo","disableFocus","enableLobby","nick","isHiddenDomain","botType","members","getBreakoutRooms","avatar","j","clean","isSelfPresence","invitePassword","denyAccess","kick","approveAccess","mainRoomJid","memberRoomJid","msgToSend","RoomMetadata","_metadata","setMetadata","getMetadata","roomMetadataComponentAddress","metadata","_callStatsUserName","_machineId","externalStorage","callStatsUserName","username","UsernameGenerator","generateCallStatsUserName","machineId","amDid","jitsiMeetId","_p8","generateJitsiMeetId","sessionId","substr","createExpBackoffTimer","step","count","Moderator","origin","location","Settings","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","attachEvent","isExternalAuthEnabled","isSipGatewayEnabled","onMucMemberLeft","setFocusUserJid","focusJid","focusUserJid","getFocusUserJid","getFocusComponent","focusComponent","hosts","focus","createConferenceIq","machineUID","disableRtx","audioPacketDelay","startBitrate","minBitrate","rtcstatsEnabled","callstatsDisabled","parseSessionId","resultIq","attr","parseConfigOptions","authenticationEnabled","IDENTITY_UPDATED","allocateConferenceFocus","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","errorMsg","text","anonymousdomain","waitMs","retrySec","authenticate","errorIq","prop","getLoginUrl","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","failureCb","str","decodeURIComponent","getPopupLoginUrl","logout","logoutUrl","parser","packet2JSON","xmlElement","nodes","child","json2packet","packet","filterNodeFromPresenceJSON","nodeName","MEMBERS_AFFILIATIONS","ChatRoom","password","XMPP","replaceParticipant","presMap","presHandlers","_removeConnListeners","inProgressEmitted","focusMucJid","noBridgeAvailable","moderator","lobby","avModeration","breakoutRooms","roomMetadata","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","transcriptionStatus","xns","statsId","presenceUpdateTime","onConnStatusChanged","fromJoin","billingId","presenceSyncTime","doLeave","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","isBreakoutField","breakoutMainRoomField","roomMetadataEl","roomMetadataText","meetingId","createNonAnonymousRoom","getForm","form","formSubmit","CONNECTED","onPresence","member","statusEl","getElementsByTagName","textContent","hasStatusUpdate","hasVersionUpdate","xElement","getElementsByTagNameNS","mucUserItem","isReplaceParticipant","affiliation","isFocus","hiddenDomain","fromHiddenDomain","presence","xEl","remove","extractIdentityInformation","userInfo","tags","hiddenFromRecorderFeatureEnabled","tag","groupInfo","group","_extractFeatures","_initFocus","memberOfThis","displayJids","restartByTerminateSupported","supportsRestartByTerminate","att","phone","pin","processNode","var","focusFeatures","tagHandlers","elementName","setSubject","onParticipantLeft","skipEvents","onPresenceUnavailable","destroySelect","reasonSelect","isKick","membersKeys","actorSelect","actorNick","onMessage","settingsErrorMsg","subjectText","stamp","dateParts","invite","passwordSelect","jsonMessage","parsedJson","tryParseJSONAndVerify","onPresenceError","lobbyRoomNode","lobbyRoomOldNode","setAffiliation","grantIQ","kickIQ","lockRoom","onSuccess","onError","onNotSupported","formsubmit","formToSubmit","addToPresence","matchingNodes","getFromPresence","removePresenceListener","handlerIdx","mucJid","getMemberRole","peerJid","addAudioInfoToPresence","audioMutedTagName","addVideoInfoToPresence","videoMutedTagName","getMediaPresenceInfo","mutedNode","codecTypeNode","videoTypeNode","codecType","getLastPresence","mucNick","isSIPCallingSupported","dial","rayo","hangup","getLobby","getAVModeration","getMetadataHandler","getPhoneNumber","getPhonePin","getMeetingId","muteParticipant","iqToFocus","onMute","onMuteVideo","onMucLeft","doReject","end","endConferenceComponentAddress","MucConnectionPlugin","isRoomCreated","_createSourceExtension","owner","sourceCompactJson","$build","s","_createSsrcGroupExtension","ssrcGroupCompactJson","semantics","_getOrCreateRtpDescription","jingle","description","content","appendChild","expandSourcesFromJson","jsonMessageXml","sources","audioRtpDescription","videoRtpDescription","ssrcMap","ssrcs","ownerSources","videoSources","videoSsrcGroups","audioSources","audioSsrcGroups","MediaDirection","ScreenObtainer","obtainStream","_createObtainStreamMethod","onFailure","JitsiMeetNW","obtainDesktopStream","jitsiError","obtainScreenOnElectron","obtainScreenFromGetDisplayMediaRN","obtainScreenFromGetDisplayMedia","_getAudioConstraints","audioQuality","stereo","autoGainControl","channelCount","echoCancellation","noiseSuppression","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingFrameRate","desktopSharingSources","streamId","streamType","screenShareAudio","audioConstraints","optionalConstraints","optional","chromeMediaSource","chromeMediaSourceId","minFrameRate","maxFrameRate","maxWidth","screen","maxHeight","sourceId","sourceType","setScreenSharingResolutionConstraints","cursor","errorDetails","errorName","errorStack","setDesktopSharingFrameRate","maxFps","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","pwd","findLine","parseICEUfrag","parseICEPwd","line","buildICEUfrag","frag","buildICEPwd","parseMID","parseMSIDAttribute","ssrcLines","msidLine","parseMLine","parts","proto","pop","fmt","buildMLine","mline","parseRTPMap","clockrate","channels","parseSCTPMap","parseSCTPPort","buildRTPMap","parseCrypto","parseFingerprint","fingerprint","parseFmtp","parseICECandidate","candidate","elems","foundation","component","toLowerCase","priority","generation","tcptype","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","desc","lines","parseSourceNameLine","sourceNameLine","ssrcSdpLine","parseVideoTypeLine","videoTypeLine","parseRTCPFB","pt","params","parseExtmap","direction","uri","haystack","needle","sessionpart","findLines","needles","candidateToJingle","candidateFromJingle","parsePrimaryVideoSsrc","videoMLine","numSsrcs","map","ssrcInfo","numGroups","ssrcGroups","primarySsrc","fidGroup","simGroup","generateSsrc","RandomUtil","getSsrcAttribute","mLine","attributeName","ssrcLine","attribute","parseGroupSsrcs","ssrcGroup","ssrcStr","getMedia","sdp","getUfrag","ufragLines","preferCodec","codecName","matchingPayloadTypes","rtp","payloadTypes","payloads","reverse","payloadIndex","unshift","stripCodec","highProfile","h264Pts","removePts","stripH264HighCodec","CodecMimeType","fmtp","item","rtxApts","rtxPts","keepPts","rtcpFb","SDP","mediaI","raw","arrayEquals","array1","array2","l","equals","SDPDiffer","mySDP","otherSDP","failICE","removeTcpCandidates","removeUdpCandidates","addMlineForNewLocalSource","mid","clonedeep","RECVONLY","msid","concat","groups","mids","getMediaSsrcMap","mediaSSRCs","mediaindex","linessrc","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","rtpmap","afmtpline","fmtpParameters","k","rtcpFbToJingle","availableSsrc","ssrcParameters","ridLines","rids","ridLine","ridInfo","extmapLines","extmap","SENDONLY","senders","SENDRECV","transportToJingle","sctpport","sctpmap","sctpAttrs","streams","setupLine","setup","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","fb","hasAttribute","fromJingle","contents","jingle2media","sctp","payloadType","setAttribute","__","parameter","hdrExt","userSources","nonUserSources","isUserSource","sourceStr","getNewMedia","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","matched","mySsrcGroup","modify","sdpMediaSsrcs","modified","ssrcNum","mediaSsrc","hasQueueMicrotask","queueMicrotask","hasSetImmediate","setImmediate","hasNextTick","nextTick","fallback","fn","wrap","defer","setImmediate$1","handlePromise","invokeCallback","isAsync","toStringTag","wrapAsync","asyncFn","func","awaitify","arity","cbArgs","applyEach","eachfn","fns","callArgs","that","cb","_asyncMap","arr","iteratee","results","counter","_iteratee","iterCb","isArrayLike","breakLoop","once","wrapper","callFn","assign","onlyOnce","asyncEachOfLimit","generator","limit","done","canceled","awaiting","running","replenish","iterDone","iterateeCallback","handleError","eachOfLimit","RangeError","asyncIterator","isAsyncIterable","nextElem","coll","len","createArrayIterator","okeys","iterator","getIterator","createES2015Iterator","createIterator","looping","eachOfLimit$2","eachOfArrayLike","completed","iteratorCallback","eachOfGeneric","Infinity","eachOf$1","map$1","eachOfSeries$1","DLL","head","tail","removeLink","prev","empty","insertAfter","newNode","insertBefore","setInitial","toArray","cur","testFn","curr","dll","queue","worker","concurrency","numRunning","workersList","drain","saturated","unsaturated","ev","trigger","processingScheduled","_insert","insertAtFront","rejectOnError","rej","promiseCallback","q","started","_tasks","_createCB","tasks","buffer","idle","_maybeDrain","eventMethod","handleAndRemove","isProcessing","paused","datum","pushAsync","kill","unshiftAsync","pause","defineProperties","memo","mapLimit$1","concatLimit$1","val","mapResults","_createTester","check","getResult","testResult","testPassed","consoleFunc","resultArgs","_withoutIndex","bool","_fn","_test","truth","eachLimit$2","eachSeries$1","filterArray","truthValues","filterGeneric","_filter","sync","innerArgs","ensureAsync","newObj","taskCb","TypeError","criteria","comparator","left","right","rest","taskIndex","nextTask","AsyncQueue","_queue","_processQueueTasks","items","_stopped","finishedCallback","shutdown","JingleSessionState","PENDING","ENDED","JingleSession","localJid","mediaConstraints","pcConfig","isInitiator","usedrip","dripContainer","_signalingLayer","initiatorJid","responderJid","signalingLayer","doInitialize","addIceCandidates","getState","addSources","removeSources","terminate","failure","acceptOffer","_getInitiatorJid","MediaSessionEvents","IQ_TIMEOUT","JingleSessionPC","jingleContents","videoContents","maxFrameHeightSel","receiverConstraints","sourceFrameHeightSel","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","localRecvMaxFrameHeight","_sourceReceiverConstraints","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","remoteSourceMaxFrameHeights","modificationQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_assertNotEnded","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","capScreenshareBitrate","enableInsertableStreams","videoQuality","forceTurnRelay","usesUnifiedPlan","disableSimulcast","abtestSuspendVideo","_abtestSuspendVideoEnabled","preferH264","disableH264","preferredCodec","H264","createPeerConnection","onicecandidate","phase","initiator","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","isStable","iceConnectionState","reconnect","usesTerminateForRestart","enableIceRestart","iceStarted","onconnectionstatechange","icestate","onnegotiationneeded","remoteDescription","workFunction","oldSdp","localDescription","_renegotiate","configureSenderVideoEncodings","newSdp","notifyMySSRCUpdate","getRemoteRecvMaxFrameHeight","getRemoteSourcesRecvMaxFrameHeight","localSDP","ice","sdpMLineIndex","jcand","errorMesssage","sendIceCandidates","candidates","cands","sdpMid","fingerprintLine","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","iceCandidates","rtcCandidate","RTCIceCandidate","iceCandidate","addIceCandidate","outerHTML","readSsrcInfo","ssrcElement","setTrackSourceName","setSSRCOwner","i3","ssrcInfoElement","jidOrEndpointId","generateRecvonlySsrc","getConfiguredVideoCodec","jingleOffer","setOfferAnswerCycle","sendSessionAccept","addTracks","addTrack","all","createOffer","offerSdp","setLocalDescription","processLocalSdpForTransceiverInfo","sendSessionInitiate","setAnswer","jingleAnswer","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","RTCSessionDescription","setRemoteDescription","newLocalSdp","sendContentModify","jingleOfferAnswerIq","audioTracks","tracks","bridgeSessionId","_responderRenegotiate","setVideoCodecs","preferred","disabled","current","replaceTransport","jingleOfferElem","enableForcedReload","sendTransportAccept","originalOffer","clone","newFingerprint","accept","responder","maxFrameHeight","sessionModify","setReceiverVideoConstraint","sourceReceiverConstraints","transportAccept","medialines","sendTransportReject","transportReject","setSenderVideoConstraint","jitsiLocalTrack","getLocalVideoTracks","getLocalVideoTrack","setSenderVideoConstraints","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","onTerminated","reasonCondition","reasonText","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","midFound","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","removeRemoteStreamsOnLeave","finishCallback","removeSsrcInfo","getRemoteSourceInfoByParticipant","_processRemoteRemoveSource","newLocalSDP","isAdd","logPrefix","errMsg","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","remoteSdp","findIndex","desiredDirection","getDesiredMediaDirection","optionalRemoteSdp","_initiatorRenegotiate","createAnswer","answer","offer","replaceTracks","oldLocalSDP","recvOnlyTransceiver","getTransceivers","currentDirection","replaceTrack","oldTrack","newTrack","clearRecvonlySsrc","shouldRenegotiate","setSourceName","sourceRemoveElem","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","addedMedia","removedMedia","addTrackToPc","_addRemoveTrack","removeTrackFromPc","isRemove","setMediaTransferActive","audioActive","videoActive","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","newMaxFrameHeight","parseMaxFrameHeight","sourceMaxFrameHeights","parseSourceMaxFrameHeight","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","getSignaledSourceInfo","sdpDiffer","mediaIndex","signaledSsrcs","ctx","removedSsrcInfo","addedSsrcInfo","request","errResponse","errorElSel","code","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","abTesting","enableSuspendVideoTest","integerHash","_parseIceCandidates","parseCandidates","candidateAttrs","JingleConnectionPlugin","iceConfig","sessions","jvbIceConfig","jvb","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","onJingle","fromJid","sess","jsonMessages","audioVideoSsrcs","logMessage","endpoint","startMuted","iceUfrag","icePwd","dtlsFingerprint","successTime","newP2PJingleSession","me","getStunAndTurnCredentials","v2Res","onReceiveStunAndTurnCredentials","v1Res","iceservers","dict","urls","credential","temp","useTurnUdp","iceServers","getLog","updateLog","href","StropheLogger","logIncoming","rawOutput","logOutgoing","RAYO_XMLNS","RayoConnectionPlugin","onRayo","roomPass","req","callResource","lastErrorStatus","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","FAILURE_REGEX","DEFAULT_STUN_SERVERS","FEATURE_JIGASI","token","disconnectInProgress","authenticatedUser","deploymentInfo","_components","trace","errStatusCapture","exec","createConnection","bosh","details","shard_changed","suspend_time","time_since_last_success","_initStrophePlugins","caps","initFeaturesList","disableBeforeUnloadHandlers","enableOpusRed","enableRemb","enableTcc","enableLipSync","getConnection","connectionHandler","credentials","statusStr","_maybeSendDeploymentInfoStat","_sysMessageHandler","deleteHandler","sendDiscoInfo","_resetState","sendDeploymentInfo","_processDiscoInfoIdentities","anonymousConnectionFailed","connectionFailed","lastErrorMsg","wasIntentionalDisconnect","_getConnectionFailedReasonDetails","lastFailedRawMessage","_parseConnectionFailedMessage","speakerStatsComponentAddress","conferenceDurationComponentAddress","processLobbyFeatures","fr","region","backendRelease","_onPrivateMessage","_connect","_addSysHandler","_onSystemMessage","foundIceServers","attaching","configDomain","hostname","onCreateResource","getRoomJid","mucNickname","muc","getJingleLog","getXmppLog","getSessions","disconnectListener","_cleanupXmppConnection","evType","p2pStunServers","stunServers","iceTransportPolicy","headersArr","trim","header","sendFaceExpressionEvent","expression","faceExpression","jsonString","users","created_timestamp","force","acceptedStatuses","aprops","authenticateAndUpgradeRole","rejectPromise","onLoginSuccessful","authenticationError","connectionError","CodecSelection","disabledCodec","_getCodecMimeType","jvbCodec","p2pCodec","jvbPreferredCodec","_isCodecSupported","p2pPreferredCodec","_selectPreferredCodec","mediaSession","currentCodec","selectedCodec","enforcePreferredCodec","remoteParticipants","remote","peerMediaInfo","getPeerMediaInfo","peerCodec","getPreferredCodec","BridgeChannel","wsUrl","_channel","_eventEmitter","_mode","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","isOpen","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","createBridgeChannelClosedEvent","mode","sendEndpointStatsMessage","_send","colibriClass","msgPayload","sendSetLastNMessage","lastN","sendSelectedEndpointsMessage","endpointIds","selectedEndpoints","sendReceiverVideoConstraintMessage","maxFrameHeightPixels","sendNewReceiverVideoConstraintsMessage","sendVideoTypeMessage","sendSourceVideoTypeMessage","channel","onopen","onmessage","dominantSpeakerEndpoint","previousSpeakers","active","lastNEndpoints","forwardedSources","videoConstraints","onclose","jsonObject","logDisabled_","deprecationWarnings_","extractVersion","uastring","expr","pos","wrapPeerConnectionEvent","eventNameToWrap","RTCPeerConnection","nativeAddEventListener","nativeEventName","arguments","wrappedCallback","modifiedEvent","handleEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","enumerable","configurable","disableLog","disableWarnings","deprecated","oldMethod","newMethod","detectBrowser","mozGetUserMedia","webkitGetUserMedia","isSecureContext","webkitRTCPeerConnection","RTCIceGatherer","isObject","compactObject","accumulator","isObj","isEmptyObject","walkStats","resultSet","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackStat","trackId","logging","utils","shimGetUserMedia","browserDetails","constraintsToChrome_","cc","r","ideal","exact","oldname_","prefix","charAt","toUpperCase","oc","mix","advanced","shimConstraints_","remap","face","facingMode","getSupportedFacingModeLies","getSupportedConstraints","enumerateDevices","dev","label","deviceId","shimError_","PermissionDeniedError","PermissionDismissedError","InvalidStateError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","origGetUserMedia","getAudioTracks","getVideoTracks","DOMException","shimGetDisplayMedia","getSourceId","widthSpecified","heightSpecified","frameRateSpecified","shimMediaStream","MediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","_ontrackpoly","te","getReceivers","Event","transceiver","dispatchEvent","shimGetSendersWithDtmf","shimSenderWithDtmf","dtmf","_dtmf","createDTMFSender","_pc","getSenders","_senders","origAddTrack","origRemoveTrack","removeTrack","origAddStream","addStream","origRemoveStream","removeStream","origGetSenders","shimGetStats","origGetStats","selector","onSucc","onErr","fixChromeStats_","standardReport","standardStats","localcandidate","remotecandidate","names","stat","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","origGetReceivers","receivers","srcElement","MediaStreamTrack","shimAddTrackRemoveTrackWithNative","getLocalStreams","_shimmedLocalStreams","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","newStream","replaceInternalStreamId","internalId","externalStream","internalStream","RegExp","replaceExternalStreamId","alreadyExists","oldStream","method","nativeMethod","methodObj","origSetLocalDescription","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","fixNegotiationNeeded","target","getConfiguration","sdpSemantics","nativeGetUserMedia","getSettings","nativeGetSettings","applyConstraints","nativeApplyConstraints","preferredMediaSource","mediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","inboundrtp","outboundrtp","candidatepair","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","addTransceiver","setParametersPromises","initParameters","shouldPerformCheck","sendEncodings","encodingParam","scaleResolutionDownBy","maxFramerate","getParameters","encodings","setParameters","shimGetParameters","origGetParameters","shimCreateOffer","origCreateOffer","finally","shimCreateAnswer","origCreateAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","shimRemoteStreamsAPI","getRemoteStreams","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","successCallback","withCallback","_getUserMedia","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","pcConstraints","newIceServers","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","offerOptions","audioTransceiver","setDirection","videoTransceiver","shimAudioContext","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","SDPUtils","augmentedCandidate","toJSON","usernameFragment","shimMaxMessageSize","_sctp","sctpInDescription","sections","mediaSection","getRemoteFirefoxVersion","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","getMaxMessageSize","maxMessageSize","canSendMMS","remoteMMS","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","byteLength","origCreateDataChannel","dataChannel","shimConnectionState","checking","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","newEvent","removeExtmapAllowMixed","nativeSRD","shimAddIceCandidateNullOrEmpty","nativeAddIceCandidate","shimParameterlessSetLocalDescription","nativeSetLocalDescription","shimChrome","shimFirefox","shimSafari","adapter","commonShim","chromeShim","browserShim","firefoxShim","safariShim","adapterFactory","DEFAULT_CONSTRAINTS","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","featureDetectionAudioEl","createElement","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevicesPollTimer","availableDevices","emptyFuncton","updateGrantedPermissions","um","audioTracksReceived","videoTracksReceived","grantedPermissions","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","groupId","updateKnownDevices","pds","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","rtcUtils","origAttachMediaStream","attachMediaStream","element","srcObject","isDeviceChangeAvailable","getAudioOutputDevice","ex","screenObtainer","isDeviceListAvailable","ds","umDevices","gumTimeout","timeoutExpired","_getDesktopMedia","_getMissingTracks","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","obtainAudioAndVideoPermissions","otherOptions","mediaStreamsMetaData","maybeRequestDesktopDevice","desktopSharingSourceDevice","matchingDevice","maybeRequestCaptureDevices","requestedCaptureDevices","Resolutions","cameraDeviceId","CameraFacingMode","micDeviceId","getConstraints","desktopStream","desktopAudioTracks","desktopAudioStream","desktopVideoTracks","desktopVideoStream","avStream","audioStream","effects","videoStream","stopMediaStream","deviceType","mediaStream","release","isDesktopSharingEnabled","setAudioOutputDevice","getCurrentlyAvailableMediaDevices","arePermissionsGrantedForAvailableDevices","getEventDataForActiveDevice","deviceData","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_setHandler","_unregisterHandlers","videoTrack","getVideoType","isLocalAudioTrack","getStreamId","getTrack","getTrackLabel","getTrackId","getUsageLabel","_maybeFireTrackAttached","container","_onTrackAttach","RTCUtils","_attachTTFMTracker","detach","_onTrackDetach","newAudioLevel","getMSID","setAudioOutput","JitsiLocalTrack","rtcId","_setEffectInProgress","effect","_startStreamEffect","displaySurface","maxEnabledResolution","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_sourceName","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","_addStreamToConferenceAsUnmute","_addLocalTrackToPc","_fireNoDataFromSourceEvent","isReceivingData","createNoDataFromSourceEvent","_isNoDataFromSourceEventsEnabled","_queueSetMuted","setMuted","_setMuted","_removeStreamFromConferenceAsMute","_removeLocalTrackFromPc","_sendMuteStatus","_setTrackMuteStatus","logMuteInfo","_streamEffect","_stopStreamEffect","stopStream","streamOptions","getDeviceId","getCameraFacingMode","streamsInfo","PRESENTER","streamInfo","cont","_sendBridgeVideoTypeMessage","storedMSID","_originalStream","startEffect","stopEffect","_switchCamera","_switchStreamEffect","setEffect","removeTrackPromise","trackSettings","getDuration","isEnded","_stopStreamInProgress","_effectEnabled","setConference","unmute","opts","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","Interop","toPlanB","every","sessionMedia","bLine","bundle","msidSemantic","semantic","resStr","toUnifiedPlan","currentDesc","iceRestart","newDesc","oldDesc","newMLine","oldMLine","checkForIceRestart","newIceUfrag","newIcePwd","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","sessionVersion","resultSdp","SignalingEvents","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","SOURCE_MUTED_CHANGED","SOURCE_VIDEO_TYPE_CHANGED","getSourceNameForJitsiTrack","trackIdx","getMediaTypeFromSourceName","firstLetterOfMediaTypeIdx","firstLetterOfMediaType","getSourceIndexFromSourceName","nameParts","SignalingLayer","getSSRCOwner","getPeerSourceInfo","getTrackSourceName","setTrackMuteStatus","setTrackVideoType","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","secondarySsrc","dumpSSRCGroups","removeGroupsWithSSRC","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","selectMedia","selectedMLines","toRawSDP","LocalSdpMunger","localEndpointId","audioSourcesToMsidMap","videoSourcesToMsidMap","_addMutedLocalVideoTracksToSDP","transformer","localVideos","isCamera","isInPeerConnection","isMediaStreamInPc","requiredSSRCs","isSimulcastOn","simulcast","ssrcCache","sdpConsistency","cachedPrimarySsrc","primaryCname","rtxModifier","modifyRtxSsrcs2","_generateMsidAttribute","pcId","_transformMediaIdentifiers","streamAndTrackIDs","mediaDirection","_hasHadVideoTrack","_hasHadAudioTrack","generatedMsid","maybeAddMutedLocalVideoTracksToSDP","transformStreamIdentifiers","sessionDesc","audioMLine","_injectSourceNames","videoMlines","nameExists","trackIndex","trackIndexParts","updateAssociatedRtxStream","primarySsrcInfo","rtxSsrc","primarySsrcMsid","primarySsrcCname","cname","previousRtxSSRC","RtxModifier","correspondingRtxSsrcs","clearSsrcCache","setSsrcCache","ssrcMapping","modifyRtxSsrcs","sdpStr","sdpTransformer","videoMLines","primaryVideoSsrcs","correspondingRtxSsrc","stripRtx","fidGroups","SdpConsistency","clearVideoSsrcCache","injectRecvOnly","setPrimarySsrc","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","newPrimarySsrc","SdpSimulcast","_ssrcCache","numOfLayers","_fillSsrcsFromCache","cachedSsrcs","newSsrcs","_parseSimLayers","newMsid","_getSsrcAttribute","newCname","_generateNewSsrcsForSimulcast","addAssociatedAttributes","simSsrcs","simSsrc","_generateSsrc","mungeLocalDescription","simulcastSsrcs","TrackStreamingStatus","TrackStreamingStatusImpl","isInForwardedSources","restoringTimer","streamingStatusMap","trackTimer","outOfForwardedSourcesTimeout","figureOutStreamingStatus","_onForwardedSourcesChanged","onForwardedSourcesChanged","maybeSendTrackStreamingStatusEvent","_changeStreamingStatus","getTrackStreamingStatus","_setTrackStreamingStatus","isVideoRTCMuted","oldStreamingStatus","streamingStatus","trackStreamingStatus","createTrackStreamingStatusEvent","leavingForwardedSources","enteringForwardedSources","_clearEnteredForwardedSourcesTimestamp","_setEnteredForwardedSourcesTimestamp","enteredForwardedSourcesTimestamp","_getEnteredForwardedSourcesTimestamp","_isCurrentTrack","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","JitsiRemoteTrack","ownerEndpointId","_trackStreamingStatus","_trackStreamingStatusImpl","_enteredForwardedSourcesTimestamp","_addEventListener","_removeEventListener","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","listenerCount","_initTrackStreamingStatus","_disposeTrackStreamingStatus","REMOTE_TRACK_MUTE","REMOTE_TRACK_UNMUTE","setMute","getSSRC","_setVideoType","_playCallback","getConnectionTimes","gumStart","gumEnd","gumDuration","ttfm","_getStatus","_p2pConnStatusRtcMuteTimeout","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","HD_BITRATE","SIM_LAYER_RIDS","TPCUtils","bitrateSettings","maxBitratesVideo","standardBitrates","low","standard","high","videoBitrates","encodingBitrates","VP8","localStreamEncodingsConfig","maxBitrate","_getStreamEncodings","localTrack","ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","findTransceiver","insertUnifiedPlanSimulcastReceive","simulcast_03","simulcastLine","transceiverInit","calculateEncodingsActiveState","localVideoTrack","newHeight","encoding","_capScreenshareBitrate","calculateEncodingsBitrates","desktopShareBitrate","desktopBitrate","presenterEnabled","lowFpsScreenshare","isNewLocalSource","stopped","transceiverMid","_localTrackTransceiverMids","setEncodings","parameters","transceivers","updateEncodingsResolution","TraceablePeerConnection","audioTransferActive","_dtmfSender","_dtmfTonesQueue","videoTransferActive","remoteTracks","_addedStreams","localSSRCs","localUfrag","remoteUfrag","_dtlsTransport","_peerVideoTypeChanged","_peerMutedChanged","_sourceMutedChanged","_sourceVideoTypeChanged","safeConstraints","rtcStatsSFUP2P","tpcUtils","statsinterval","_usesTransceiverCodecPreferences","interop","Simulcast","explodeRemoteSimulcast","localSdpMunger","getLocalEndpointId","_senderVideoMaxHeight","_senderMaxHeights","what","time","onTrack","evt","_remoteTrackAdded","_remoteTrackRemoved","onaddstream","_remoteStreamAdded","onremovestream","_remoteStreamRemoved","ondatachannel","_processStat","statValue","endTime","times","dumpSDP","isAddOperation","hasLocalSource","hasAnyTracksOfType","mediaTransferActive","_getReceiversByEndpointIds","endpoints","getRemoteTracks","remoteTrackIds","audioReceivers","getSynchronizationSources","endpointTracksByMediaType","primarySsrcs","fidLines","getTargetVideoBitrates","findTrackById","RTC","isUserStreamById","onaddtrack","onremovetrack","streamAudioTracks","audioTrack","streamVideoTracks","remoteSDP","mediaLines","mls","trackSsrc","_createRemoteTrack","remoteTracksMap","userTracksByMediaType","existingTrack","isUserStream","toBeRemoved","_removeRemoteTrack","removeRemoteTracks","removedTracks","remoteTracksByMedia","_extractSSRCMap","groupsMap","groupSSRCs","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","getters","audioMedia","changed","videoMedia","enforceSendRecv","_adjustRemoteMediaDirection","isSharingLowFpsScreen","_isSharingScreen","_mungeCodecOrder","codecPreference","webrtcStream","_addStream","generateNewStreamSSRCInfo","rtxSsrcMapping","promiseChain","_assertTrackBelongs","webRtcStream","_removeStream","doesBelong","defaultCodec","lowFps","findSenderByKind","localSdp","oldTrackSSRC","mediaActive","_ensureSimulcastGroupIsLast","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","hasRemoteSource","_mungeOpus","enableOpusDtx","opusMaxAverageBitrate","mLines","OPUS","fmtpOpus","fmtpConfig","sdpChanged","maxaveragebitrate","usedtx","mungedConfig","_mungeInactive","_initializeDtlsTransport","onstatechange","_setVp9MaxBitrates","isLocalSdp","getDesktopTrackMid","desktopTrack","VP9","bitrates","hdBitrate","isSharingScreen","currentDescription","mungeRemoteDescription","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","write","normalizePlanB","videoSender","preference","degradationPreference","encodingsEnabledState","maxBitrates","scaleFactor","layer","sendTones","tones","interToneGap","rtpSender","localAudioTrack","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","peerTracks","_removePeerConnection","_createOfferOrAnswer","isOffer","logName","handleSuccess","resolveFn","rejectFn","_processLocalSSRCsMap","handleFailure","eventType","capabilities","ULPFEC","setCodecPreferences","oaPromise","_extractPrimarySSRC","sourceIndex","sourceIdentifier","newSSRCNum","oldSSRCNum","activeStreams","currNumSsrcs","ConnectionQualityEvents","peerConnectionIdCounter","rtcTrackIdCounter","_createLocalTracks","mediaStreamMetaData","metaData","peerConnections","_lastN","_lastNEndpoints","_forwardedSources","_maxFrameHeight","_selectedEndpoints","_lastNChangeListener","_forwardedSourcesChangeListener","_onDeviceListChanged","_updateAudioOutputForAudioTracks","_videoType","BridgeVideoType","destroy","_channelOpenListener","tracksInfo","initializeBridgeChannel","logError","msgType","_receiverVideoConstraints","oldLastNEndpoints","leavingLastNEndpoints","enteringLastNEndpoints","oldForwardedSources","setNewReceiverVideoConstraints","setVideoType","sendSourceVideoType","selectEndpoints","ids","signaling","encodedInsertableStreams","bundlePolicy","newConnection","traceablePeerConnection","addLocalTrack","getForwardedSources","localVideo","getLocalAudioTrack","localAudio","pcRemoteTracks","mutePromises","removeLocalTrack","elSelector","sendChannelMessage","setLastN","remoteAudioTracks","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","kSimulcastFormats","layers","targetRN","ConnectionQuality","_localStats","connectionQuality","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","ConferenceEvents","_updateLocalConnectionQuality","_broadcastLocalStats","ICE_CONNECTION_STATE_CHANGED","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","serverRegion","bridgeCount","_calculateConnectionQuality","resolutionName","quality","DESKTOP","activeTPC","getActivePeerConnection","videoQualitySettings","millisSinceStart","simulcastFormat","targetHeight","rampUp","getTarget","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","isConnectionInterrupted","IceFailedHandling","_actOnIceFailed","explicitlyDisabled","useTerminateForRestart","jvbConnection","jvbConnIceState","_canceled","_iceFailedTimeout","DetectionEvents","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","NoAudioSignalDetection","_timeoutTrigger","_hasAudioInput","_audioLevel","_trackAdded","_clearTriggerTimeout","_handleAudioInputStateChange","_handleNoAudioInputDetection","_eventFired","_audioTrack","P2PDominantSpeakerDetection","myUserID","createAudioContext","AudioContextImpl","TrackVADEmitter","procNodeSampleRate","vadProcessor","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","score","pcmData","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","getDeviceLabel","_destroyed","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackRemoved","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","VADNoiseDetection","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","VADTalkMutedDetection","_calculateVADScore","E2ePingEvents","E2E_RTT_CHANGED","E2E_PING_REQUEST","E2E_PING_RESPONSE","ParticipantWrapper","e2eping","requests","lastRequestId","sendRequest","handleResponse","maybeLogRttAndStop","scheduleNext","getDelay","removeParticipant","conferenceSize","totalSeconds","numRequests","maxMessagesPerSecond","requestId","requestMessage","timeSent","numRequestsWithResponses","totalNumRequests","JitsiE2EPingEvents","E2ePing","maxConferenceSize","participantJoined","participantLeft","messageReceived","conferenceJoined","handleRequest","participantWrapper","Jvb121EventGenerator","_jvb121","evaluateStatus","oldStatus","getParticipantCount","ReceiverVideoConstraints","_defaultConstraints","defaultConstraints","onStageEndpoints","updateLastN","updateReceiveResolution","updateReceiverVideoConstraints","updateSelectedEndpoints","ReceiveVideoController","_rtc","startLastN","channelLastN","useNewBandwidthAllocationStrategy","_getDefaultSourceReceiverConstraints","remoteVideoTracks","remoteEndpointIds","oldConstraints","newConstraints","setPreferredReceiveMaxFrameHeight","setReceiverConstraints","isEndpointsFormat","isSourcesFormat","p2pSession","mappedConstraints","SendVideoController","_preferredSendMaxFrameHeight","_sourceSenderConstraints","_configureConstraintsForLocalSources","_onSenderConstraintsReceived","_propagateSendMaxFrameHeight","sourceConstraints","getActiveMediaSession","_senderVideoConstraints","idealHeight","sendMaxFrameHeight","_selectSendMaxFrameHeight","activeMediaSession","setPreferredSendMaxFrameHeight","getFocusRecordingUpdate","jibriStatus","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","JibriSession","_connection","_setSessionID","setStatus","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","appData","broadcastId","_createIQ","recordingXMLUtils","_setErrorFromIq","AudioOutputProblemDetector","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevels","remoteAudioLevels","localAudioLevelsString","createAudioOutputProblemEvent","AverageStatReport","calculate","appendReport","ConnectionAvgStats","avgRtpStatsReporter","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","AvgRTPStatsReporter","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","peerCount","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","SpeakerStatsCollector","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_onFaceLandmarkAdd","_updateStats","oldDominantSpeaker","newDominantSpeaker","setDominantSpeaker","savedUser","markAsHasLeft","newName","setDisplayName","addFaceExpression","newStats","speakerStatsToUpdate","newParticipant","totalDominantSpeakerTime","setFaceExpressions","faceExpressions","RecordingResult","blob","wordArray","TrackRecorder","recorder","AUDIO_WEBM","AUDIO_OGG","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","MediaRecorder","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","isRecording","instantiateTrackRecorder","updateNames","originalStream","ondataavailable","dataEvent","recorderToRemove","style","click","revokeObjectURL","getRecordingResults","getFileType","Word","word","begin","getWord","getBeginTime","getEndTime","SphinxService","recordingResult","verify","formatResponse","audioBlob","sphinxURL","toReturn","getURL","audioFileBlob","XMLHttpRequest","onreadystatechange","DONE","responseText","open","setRequestHeader","audioRecorder","objects","filler","BEFORE_STATE","RECORDING_STATE","TRANSCRIBING_STATE","FINISHED_STATE","Transcriber","transcriptionService","transcription","lineLength","blobCallBack","transcriber","offset","getUTCMilliseconds","wordObject","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","ComponentsVersions","addCommandListener","processVersions","VideoSIPGWStatusConstants","VideoSIPGWStateConstants","VideoSIPGWErrorConstants","mucResource","getComponentVersion","componentName","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","STATE_CHANGED","JitsiVideoSIPGWSession","sipAddress","VideoSIPGWConstants","_sendJibriIQ","setState","failureReason","oldState","addStateListener","removeStateListener","sipaddress","displayname","nodeTree","VideoSIPGW","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","failure_reason","createVideoSIPGWSession","SOURCE_INFO_PRESENCE_ELEMENT","SignalingLayerImpl","ssrcOwners","_localSourceState","_remoteSourceState","_sourceNames","_addLocalSourceInfoToPresence","_doesEndpointSendNewSourceInfo","setChatRoom","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","_sourceInfoHandler","_memberLeftHandler","_bindChatRoomEventHandlers","emitAudioMutedEvent","emitVideoMutedEvent","emitVideoTypeEvent","sourceInfoJSON","emitEventsFromHere","endpointSourceState","newMutedState","oldSourceState","newVideoType","newSourceNames","_findEndpointSourceInfoForMediaType","remoteSourceState","sourceInfo","legacyGetPeerMediaInfo","lastPresence","mediaInfo","endpointMediaSource","existingOwner","existingName","JitsiConference","eventManager","componentsVersions","dtmfManager","somebodySupportsDTMF","wasStopped","avgRtpStatsN","_audioOutputProblemDetector","speakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","videoSIPGWHandler","recordingManager","_sessions","_chatRoom","getSession","_handleFocusPresence","_handleJibriPresence","startRecording","_addSession","_emitSessionUpdate","stopRecording","_createSession","_conferenceJoinAnalyticsEventSent","isE2EESupported","_e2eEncryption","_audioSenderLimitReached","_videoSenderLimitReached","JitsiConnection","appID","errType","errorType","errorMessage","createConnectionFailedEvent","ANALYTICS_CONNECTION_DISCONNECTED","JitsiMediaDevicesEvents","resourceCreator","isAuthenticatedUser","re","codecSettings","codecSelection","_statsCurrentId","statisticsId","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","_removeLocalSourceOnReject","_updateRoomPresence","_registerRtcListeners","receiveVideoController","sendVideoController","callStatsThreshold","statisticsDisplayName","callStatsCustomScriptUrl","callStatsConfigParams","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","enableNoisyMicDetection","vadNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","hasAudioSignal","jvb121Status","p2pDominantSpeakerDetection","userRegion","transcriptionLanguage","_maybeSetSITimeout","isJoined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","onLocalTrackRemoved","_sendConferenceLeftAnalyticsEvent","_delayedIceFailed","_maybeClearSITimeout","leaveError","isEndConferenceSupported","localtrack","_desktopSharingFrameRate","isAuthEnabled","isLoggedIn","getAuthLogin","getExternalAuthUrl","urlForPopup","getPerformanceStats","longTasksStats","eventId","command","removeCommandListener","sendTextMessage","sendPrivateTextMessage","sendCommand","sendCommandOnce","removeCommand","nickKey","getTranscriber","localAudioTracks","getTranscriptionStatus","addTrackPromises","_setupNewTrack","_fireMuteChangeEvent","_fireAudioLevelChangeEvent","activeTpc","actorId","_getInitialLocalTracks","trackType","isStartAudioMuted","isStartVideoMuted","muteHandler","audioLevelHandler","oldVideoType","oldTrackBelongsToConference","_doReplaceTrack","replaceTrackPromises","_setNewVideoType","videoTypeChanged","videoTypeTagName","trackVideoType","legacyTypeChanged","presenceChanged","audioMuteChanged","videoMuteChanged","addPromises","removePromises","lock","unlock","selectParticipant","selectParticipants","isInteger","isVideoActive","countHidden","grantOwner","revokeOwner","isMyself","isMembersOnly","kickParticipant","_sessionInitiateTimeout","muteMediaType","fullJid","_updateFeatures","_maybeStartOrStopP2P","updateDTMFSupport","botParticipant","mediaSessions","tracksToBeRemoved","kickedParticipantId","kickedParticipant","transportInfo","removedTrack","_onIncomingCallP2P","rejectReason","contentName","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","_acceptJvbIncomingCall","_suspendMediaTransferForJvbConnection","webSocket","first","stopOptions","forceJvb121","p2pFailed","_stopP2PSession","isDTMFSupported","peerConnection","startTranscriber","stopTranscriber","getMeetingUniqueId","setStartMutedPolicy","policy","getStartMutedPolicy","removeLocalParticipantProperty","getLocalParticipantProperty","property","overallFeedback","detailedFeedback","getSsrcByTrack","remoteUserId","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","remoteID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","p2pEstablishmentDuration","jvbEstablishmentDuration","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","audioLimitReached","videoLimitReached","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","userLeftEvent","peers","shouldBeInP2P","myId","peersId","hasBotPeer","wasP2PEstablished","skip","muteStatusChanged","audioMuteStatusChanged","videoMuteStatusChanged","getP2PConnectionState","startP2PSession","stopP2PSession","getSpeakerStats","sendFaceLandmarks","perf","toggleE2EE","setMediaEncryptionKey","isLobbySupported","disableLobby","joinLobby","myLobbyUserId","sendLobbyMessage","addLobbyMessageListener","removeLobbyMessageHandler","lobbyDenyAccess","lobbyApproveAccess","isAVModerationSupported","enableAVModeration","disableAVModeration","avModerationApprove","avModerationReject","setToken","initJitsiConference","getLogs","DEVICE_LIST_CHANGED","PERMISSIONS_CHANGED","PERMISSION_PROMPT_IS_SHOWN","SLOW_GET_USER_MEDIA","AUDIO_PERMISSION_NAME","VIDEO_PERMISSION_NAME","_permissions","_logOutputDevice","permissions","_handlePermissionsChange","_permissionsApiSupported","query","_parsePermissionState","onchange","supported","permissionStatus","deviceID","isDevicePermissionGranted","isMultipleAudioInputSupported","emitEvent","stopActiveDevices","CustomSignalingLayer","ACTIONS","ProxyConnectionPC","receiveAudio","receiveVideo","_peerConnection","_onError","_onRemoteStream","_onSendMessage","getPeerJid","processMessage","$jingle","ACCEPT","_onSessionAccept","INITIATE","_onSessionInitiate","TERMINATE","_onSessionTerminate","TRANSPORT_INFO","_onTransportInfo","_createPeerConnection","connectionStub","pcConfigStub","roomStub","jitsiRemoteTrack","onRemoteStream","onSendMessage","PRECALL_TEST_RESULTS","_initialized","api","_loadScript","appId","appSecret","disablePrecalltest","_initialize","execute","makePrecallTest","AudioMixer","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","Logger","getAnalyticsAttributesFromOptions","video_requested","ProxyConnectionService","jitsiConnection","_onFatalError","_convertStringToXML","UNAVAILABLE","_selfCloseConnection","xml","xmlDom","DOMParser","parseFromString","isVideo","convertVideoToDesktop","jitsiLocalTracks","createLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","constants","recording","BUSY","ERROR","RESOURCE_CONSTRAINT","UNEXPECTED_REQUEST","SERVICE_UNAVAILABLE","FILE","STREAM","sipVideoGW","detection","errors","errorTypes","logLevels","JitsiMediaDevices","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","isWebRtcSupported","setLogLevel","setLogLevelById","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","oldfirePermissionPromptIsShownEvent","promiseFulfilled","firePermissionPromptIsShownEvent","fireSlowPromiseEvent","restOptions","currentlyAvailableMediaDevices","setVideoTrackContentHints","createTrackVADEmitter","localAudioDeviceId","createAudioMixer","getActiveAudioDevice","audioDevices","devicePromiseArray","micDevice","devicePromise","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","deviceLabel","isCollectingLocalStats","lineno","colno","setNetworkInfo","hint","contentHint","precallTest","util","AuthUtil","JitsiMeetJS","_mergeNamespaceAndModule","isLocalStats","_userId","_isLocalStats","_dominantSpeakerStart","_isDominantSpeaker","_isSilent","_hasLeft","_faceExpressions","happy","neutral","surprised","angry","fearful","disgusted","sad","getUserId","isDominantSpeaker","isNowDominantSpeaker","timeElapsed","getTotalDominantSpeakerTime","hasLeft","getFaceExpressions","getTokenAuthUrl","urlPattern","roleUpgrade","dest","srcEvent","Function","oldOnErrorHandler","oldOnUnhandledRejection","onunhandledrejection","errHandler","callUnhandledRejectionHandler","randomInt","randomElement","randomHexDigit","randomHexString","randomAlphanumStr","currentExecutingScript","loadScript","prepend","relativeURL","loadCallback","script","referenceNode","scriptEl","scriptSrc","baseScriptSrc","onload","parentNode","string","char","charCodeAt","abs","generateUsername","LogCollector","logStorage","stringifyObjects","storeInterval","maxEntryLength","levels","logLevel","_log","storeLogsIntervalID","totalLen","outputCache","someObject","formatLogMessage","arg","prevMessage","prevMessageText","_flush","_reschedulePublishInterval","reschedule","isReady","cachedQueue","storeLogs","consoleTransport","globalTransports","addGlobalTransport","removeGlobalTransport","transportIdx","globalOptions","getCallerInfo","callerInfo","fileLocation","column","disableCallerInfo","transports","logPrefixes","toISOString","fullLogParts","methods","setGlobalOptions","setLevel","TRACE","DEBUG","INFO","LOG","WARN","idLoggers","loggers","curLevel","grammar","reg","o","format","u","z","subtype","sessionConfig","raddr","dir2","clksrcExt","mediaClockValue","rateNumerator","rateDenominator","writer","parseParams","parseFmtpConfig","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","toIntIfInt","String","parseReg","needsBlank","keyLocation","rawName","attachProperties","validLine","paramReducer","acc","scid","formatRegExp","formatStr","makeLine","defaultOuterOrder","defaultInnerOrder","outerOrder","innerOrder","transformUtils","parseSsrcs","writeSsrcs","processVideo","validateDescription","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","ssrcsToReplace","ssrcsToAdd","_generateSourceData","addAssociatedStream","_restoreSimulcast","enableConferenceFlag","order","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","nuke","implodeRemoteSimulcast","invalid","assertGoogConference","xGoogleFlag","removeGoogConference","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","Arr","_byteLength","curByte","revLookup","fromByteArray","uint8","extraBytes","maxChunkLength","len2","encodeChunk","lookup","num","output","__esModule","default","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","epiphany","firefox","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","desktop","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","getParser","_ua","parsedResult","getUA","parseBrowser","describe","getBrowser","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","isOS","isPlatform","isBrowser","compareVersion","is","versionName","vendor","model","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","getScriptUrlFromStack","skipStackDepth","ignoreMessage","_nearestExecutingScript","eligibleScripts","getScriptFromUrl","getSoleInlineScript","currentScript","thrownErr","near","far","ReflectOwnKeys","R","Reflect","ReflectApply","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","errorListener","resolver","eventTargetAgnosticAddListener","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","_addListener","existing","warning","newListener","warned","w","onceWrapper","fired","wrapFn","_onceWrap","wrapped","_listeners","unwrap","evlistener","unwrapListeners","arrayClone","copy","wrapListener","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","listeners","prependListener","prependOnceListener","position","originalListener","spliceOne","rawListeners","eventNames","g","flat","y","nodeType","nonce","noModule","C","removeChild","T","E","jquery","pushStack","prevObject","eq","last","even","grep","odd","extend","isPlainObject","expando","noop","globalEval","makeArray","inArray","guid","support","h","A","N","ue","S","D","L","O","P","H","I","B","M","W","F","U","V","X","Q","ID","CLASS","TAG","ATTR","PSEUDO","CHILD","needsContext","Y","G","K","J","Z","ee","ne","fromCharCode","oe","ae","xe","dir","childNodes","se","ownerDocument","getElementById","getElementsByClassName","qsa","ye","scope","be","querySelectorAll","removeAttribute","cacheLength","le","ce","fe","attrHandle","de","nextSibling","pe","he","ge","isDisabled","ve","isXML","namespaceURI","documentElement","setDocument","defaultView","top","className","createComment","getById","getElementsByName","getAttributeNode","innerHTML","matchesSelector","webkitMatchesSelector","mozMatchesSelector","oMatchesSelector","msMatchesSelector","disconnectedMatch","compareDocumentPosition","contains","sortDetached","specified","escape","uniqueSort","detectDuplicates","sortStable","getText","firstChild","nodeValue","selectors","createPseudo","relative","preFilter","lastChild","uniqueID","pseudos","setFilters","not","lang","activeElement","hasFocus","tabIndex","checked","selected","selectedIndex","parent","input","button","lt","gt","nth","radio","checkbox","file","image","we","Ce","Te","Ee","filters","tokenize","compile","select","defaultValue","unique","isXMLDoc","escapeSelector","parseHTML","ready","closest","prevAll","addBack","parents","parentsUntil","nextAll","nextUntil","prevUntil","siblings","contentDocument","fail","Callbacks","stopOnFalse","memory","fireWith","fire","always","pipe","progress","notify","notifyWith","resolveWith","exceptionHook","stackTrace","rejectWith","getStackHook","when","readyException","readyWait","doScroll","uid","access","hasData","removeData","_data","_removeData","dequeue","_queueHooks","clearQueue","composed","getRootNode","display","css","show","hide","toggle","createDocumentFragment","checkClone","cloneNode","noCloneChecked","option","thead","col","tr","td","_default","tbody","tfoot","colgroup","caption","th","optgroup","htmlPrefilter","createTextNode","namespace","isTrigger","special","delegateType","stopPropagation","stopImmediatePropagation","preventDefault","global","handle","triggered","dispatch","bindType","origType","delegateCount","teardown","removeEvent","fix","delegateTarget","preDispatch","isPropagationStopped","currentTarget","isImmediatePropagationStopped","rnamespace","handleObj","postDispatch","addProp","originalEvent","load","noBubble","beforeunload","returnValue","isDefaultPrevented","defaultPrevented","relatedTarget","timeStamp","isSimulated","altKey","bubbles","cancelable","changedTouches","ctrlKey","detail","eventPhase","metaKey","pageX","pageY","shiftKey","view","charCode","keyCode","buttons","clientX","clientY","offsetX","offsetY","pointerId","pointerType","screenX","screenY","targetTouches","toElement","touches","which","blur","mouseenter","mouseleave","pointerenter","pointerleave","one","Ae","Ne","Se","ke","De","Le","je","qe","html","_evalUrl","Oe","cleanData","append","after","replaceWith","replaceChild","appendTo","prependTo","replaceAll","Pe","He","Ie","opener","getComputedStyle","Re","Be","Me","We","Fe","getPropertyValue","pixelBoxStyles","$e","cssText","marginLeft","offsetWidth","backgroundClip","clearCloneStyle","boxSizingReliable","pixelPosition","reliableMarginLeft","scrollboxSize","reliableTrDimensions","borderTopWidth","borderBottomWidth","offsetHeight","ze","_e","Ue","Ve","cssProps","Xe","Qe","Ye","Ge","visibility","Ke","letterSpacing","fontWeight","Je","Ze","ceil","et","getClientRects","cssHooks","opacity","cssNumber","animationIterationCount","columnCount","fillOpacity","flexGrow","flexShrink","gridArea","gridColumn","gridColumnEnd","gridColumnStart","gridRow","gridRowEnd","gridRowStart","lineHeight","orphans","widows","zIndex","zoom","isFinite","getBoundingClientRect","margin","padding","border","expand","fx","speeds","checkOn","optSelected","radioValue","tt","nt","removeAttr","attrHooks","rt","it","ot","at","st","removeProp","propFix","propHooks","addClass","removeClass","toggleClass","hasClass","ut","valHooks","focusin","ct","parentWindow","simulate","triggerHandler","parseXML","ft","dt","ht","vt","param","encodeURIComponent","serializeArray","wrapAll","firstElementChild","wrapInner","visible","createHTMLDocument","implementation","setOffset","using","pageYOffset","pageXOffset","offsetParent","scrollLeft","scrollTop","scrollTo","Height","Width","unbind","delegate","undelegate","hover","yt","proxy","holdReady","parseJSON","isFunction","isWindow","camelCase","isNumeric","mt","jQuery","bt","noConflict","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","Uint32Array","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","nodeWrap","eval","Buffer","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","notString","lastByteIndex","finalize","bc","da","hex","arrayBuffer","base64","v1","v2","v3","base64Str","md5","HASH_UNDEFINED","argsTag","boolTag","dateTag","funcTag","genTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","freeSelf","freeExports","freeModule","moduleExports","addMapEntry","pair","addSetEntry","arrayReduce","initAccum","isHostObject","mapToArray","overArg","setToArray","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","IE_PROTO","funcToString","objectToString","reIsNative","getPrototype","objectCreate","propertyIsEnumerable","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entry","ListCache","MapCache","Stack","__data__","assignValue","object","objValue","assocIndexOf","baseClone","isDeep","isFull","customizer","isArr","initCloneArray","copyArray","getTag","isFunc","cloneBuffer","isPrototype","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","symbol","Ctor","cloneArrayBuffer","dataView","byteOffset","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","stacked","props","keysFunc","symbolsFunc","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","getMapData","getValue","baseIsNative","pairs","LARGE_ARRAY_SIZE","isIndex","other","ctorString","isLength","inherited","isObjectLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","arrayLikeKeys","baseKeys","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","nativeMax","nativeMin","toNumber","isSymbol","isBinary","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","thisArg","leadingEdge","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","remainingWait","debounced","isInvoking","arrayTag","errorTag","typedArrayTags","freeProcess","nodeUtil","binding","nodeIsTypedArray","isTypedArray","arraySome","predicate","nativeObjectToString","symToStringTag","SetCache","baseGetTag","isOwn","unmasked","getRawTag","baseIsArguments","baseIsEqual","bitmask","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","convert","isPartial","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","objLength","skipCtor","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","arrLength","othLength","seen","arrValue","othIndex","isMasked","resIndex","arrayFilter","baseUnary","isArg","isBuff","isType","localCName","generateIdentifier","splitLines","splitSections","part","getDescription","getMediaSections","matchPrefix","parseCandidate","relatedAddress","relatedPort","tcpType","writeCandidate","parseIceOptions","parseRtpMap","parsed","clockRate","numChannels","writeRtpMap","preferredPayloadType","writeExtmap","headerExtension","preferredId","kv","writeFmtp","parseRtcpFb","writeRtcpFb","rtcpFeedback","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","algorithm","getDtlsParameters","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","writeIceParameters","iceLite","parseRtpParameters","headerExtensions","fecMechanisms","rtcp","rtpmapline","fmtps","writeRtpDescription","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","flows","apt","encParam","codecPayloadType","rtx","fec","mechanism","parseRtcpParameters","rtcpParameters","remoteSsrc","rsize","reducedSize","compound","mux","writeRtcpParameters","parseMsid","spec","planB","msidParts","parseSctpDescription","maxSizeLine","sctpPort","sctpMapLines","writeSctpDescription","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","getDirection","getKind","isRejected","parseOLine","netType","addressType","isValidSDP","global$1","_typeof","_toConsumableArray","arr2","_arrayWithoutHoles","iter","_iterableToArray","_nonIterableSpread","safe_add","lsw","str2binl","bin","md5_cmn","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","hex_tab","binl2hex","binl2str","core_sha1","olde","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","bkey","str2binb","ipad","opad","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","str_hmac_sha1","str_sha1","out","cookies","cookieName","expires","path","cookieObj","cookieValue","unescape","cookie","Builder","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","validTag","validAttribute","validCSS","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elemName","childNode","isTagEqual","_xmlGenerator","_makeGenerator","doc","createDocument","documentMode","_getIEXmlDom","xmlGenerator","docStrings","ActiveXObject","xmlTextNode","xmlescape","xmlunescape","xmlHtmlNode","loadXML","copyElement","_i","createHtml","cssAttrs","cssName","cssValue","_i2","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","getDomainFromJid","bare","getBareJidFromJid","getResourceFromJid","_handleError","fatal","sourceURL","fileName","lineNumber","getNamedItem","_requestId","_connectionPlugins","ptype","moreattrs","impNode","xmlGen","importNode","newElem","fragment","xhtml","Handler","ns","matchBare","matchBareFromJid","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","_this","nsMatch","isMatch","elem_type","run","TimedHandler","period","lastCalled","Connection","_this2","Websocket","Bosh","_sasl_data","do_session","do_bind","timedHandlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","do_authentication","restored","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","_onIdle","registerSASLMechanisms","mechanisms","_reset","_requests","getUniqueId","suffix","addProtocolErrorHandler","status_code","hold","route","authcid","authzid","servtype","connect_callback","wind","_attach","restore","_sessionCachingSupported","_restore","sessionStorage","xmlInput","xmlOutput","nextValidRid","_queueData","_this3","timeoutHandler","deleteTimedHandler","addTimedHandler","_this4","iqtype","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","registerSASLMechanism","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","condition","statusChanged","_dataRecv","_this6","_reqToData","strip","_emptyQueue","cond","conflict","UNKOWN_REASON","_i5","_hand","_connect_cb","_callback","bodyWrap","mech","_no_auth_received","sortMechanismsByPriority","higher","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","onChallenge","btoa","challenge","atob","_onLegacyAuthIQResult","_auth2_cb","_this7","serverSignature","streamfeature_handlers","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","jidNode","_establishSession","_onSessionResultIQ","_this8","_i6","_thand","SASLMechanism","auth_str","test_cnonce","cnonce","Hi","U_old","authMessage","attribMatch","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","overrideMimeType","_conn","inactivity","keepalive","_cacheSession","_onRequestStateChange","_throttledRequestHandler","typ","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","_processRequest","primary_timeout","secondary_timeout","server_error","content_type","contentType","withCredentials","e2","sendFunc","customHeaders","backoff","Strophe$2","$build$2","new_service","pathname","_buildStream","_check_streamerror","connectstatus","errorString","_onOpen","_connect_cb_wrapper","_handleStreamStart","streamStart","parsedMessage","see_uri","_streamWrap","CLOSED","closeString","rawStanza","startString","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","var_name","addItem","call_back","_buildIQResult","query_attrs","iqresult","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","_resumeToken","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","delta","_throwError","byteToHex","buf","bth","_v","_v2","_v3","_v4","_interopRequireDefault","getOutputLength","inputLength8","safeAdd","md5cmn","md5ff","md5gg","md5hh","md5ii","length32","hexTab","md5ToHexEncodedArray","wordsToMd5","length8","bytesToWords","rnds8","msCrypto","ROTL","_rng","_bytesToUuid","_nodeId","_clockseq","_lastMSecs","_lastNSecs","clockseq","seedBytes","rng","msecs","nsecs","tl","tmh","_md","hashfunc","generateUUID","stringToBytes","uuidToBytes","DNS","rnds","_sha","CAMERA","DESKTOP_HIGH_FPS","NONE","ENVIRONMENT","USER","AV1","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","LASTN_ENDPOINT_CHANGED","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_REMOVED","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","amdO","getter","definition","globalThis","nmd","paths","__webpack_exports__"],"sourceRoot":""}